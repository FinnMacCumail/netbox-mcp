# NetBox Documentation

> NetBox is an open source web application for managing and documenting network infrastructure.
These are docs for LLMs for NetBox 4.1.3.

## Documentation Index

- [index.md](https://netboxlabs.com/docs/netbox/en/stable/index/)
- [Introduction](https://netboxlabs.com/docs/netbox/en/stable/introduction/)
- Features
  - [Facilities](https://netboxlabs.com/docs/netbox/en/stable/features/facilities/)
  - [Devices & Cabling](https://netboxlabs.com/docs/netbox/en/stable/features/devices-cabling/)
  - [Power Tracking](https://netboxlabs.com/docs/netbox/en/stable/features/power-tracking/)
  - [IPAM](https://netboxlabs.com/docs/netbox/en/stable/features/ipam/)
  - [VLAN Management](https://netboxlabs.com/docs/netbox/en/stable/features/vlan-management/)
  - [L2VPN & Overlay](https://netboxlabs.com/docs/netbox/en/stable/features/l2vpn-overlay/)
  - [Circuits](https://netboxlabs.com/docs/netbox/en/stable/features/circuits/)
  - [Wireless](https://netboxlabs.com/docs/netbox/en/stable/features/wireless/)
  - [Virtualization](https://netboxlabs.com/docs/netbox/en/stable/features/virtualization/)
  - [VPN Tunnels](https://netboxlabs.com/docs/netbox/en/stable/features/vpn-tunnels/)
  - [Tenancy](https://netboxlabs.com/docs/netbox/en/stable/features/tenancy/)
  - [Contacts](https://netboxlabs.com/docs/netbox/en/stable/features/contacts/)
  - [Search](https://netboxlabs.com/docs/netbox/en/stable/features/search/)
  - [Context Data](https://netboxlabs.com/docs/netbox/en/stable/features/context-data/)
  - [Configuration Rendering](https://netboxlabs.com/docs/netbox/en/stable/features/configuration-rendering/)
  - [Synchronized Data](https://netboxlabs.com/docs/netbox/en/stable/features/synchronized-data/)
  - [Change Logging](https://netboxlabs.com/docs/netbox/en/stable/features/change-logging/)
  - [Journaling](https://netboxlabs.com/docs/netbox/en/stable/features/journaling/)
  - [Event Rules](https://netboxlabs.com/docs/netbox/en/stable/features/event-rules/)
  - [Notifications](https://netboxlabs.com/docs/netbox/en/stable/features/notifications/)
  - [Background Jobs](https://netboxlabs.com/docs/netbox/en/stable/features/background-jobs/)
  - [Auth & Permissions](https://netboxlabs.com/docs/netbox/en/stable/features/authentication-permissions/)
  - [API & Integration](https://netboxlabs.com/docs/netbox/en/stable/features/api-integration/)
  - [Customization](https://netboxlabs.com/docs/netbox/en/stable/features/customization/)
- Installation & Upgrade
  - [Installing NetBox](https://netboxlabs.com/docs/netbox/en/stable/installation/index/)
  - [1. PostgreSQL](https://netboxlabs.com/docs/netbox/en/stable/installation/1-postgresql/)
  - [2. Redis](https://netboxlabs.com/docs/netbox/en/stable/installation/2-redis/)
  - [3. NetBox](https://netboxlabs.com/docs/netbox/en/stable/installation/3-netbox/)
  - [4a. Gunicorn](https://netboxlabs.com/docs/netbox/en/stable/installation/4a-gunicorn/)
  - [4b. uWSGI](https://netboxlabs.com/docs/netbox/en/stable/installation/4b-uwsgi/)
  - [5. HTTP Server](https://netboxlabs.com/docs/netbox/en/stable/installation/5-http-server/)
  - [6. LDAP (Optional)](https://netboxlabs.com/docs/netbox/en/stable/installation/6-ldap/)
  - [Upgrading NetBox](https://netboxlabs.com/docs/netbox/en/stable/installation/upgrading/)
- Getting Started
  - [Planning](https://netboxlabs.com/docs/netbox/en/stable/getting-started/planning/)
  - [Populating Data](https://netboxlabs.com/docs/netbox/en/stable/getting-started/populating-data/)
- Configuration
  - [Configuring NetBox](https://netboxlabs.com/docs/netbox/en/stable/configuration/index/)
  - [Required Parameters](https://netboxlabs.com/docs/netbox/en/stable/configuration/required-parameters/)
  - [System](https://netboxlabs.com/docs/netbox/en/stable/configuration/system/)
  - [Security](https://netboxlabs.com/docs/netbox/en/stable/configuration/security/)
  - [GraphQL API](https://netboxlabs.com/docs/netbox/en/stable/configuration/graphql-api/)
  - [Remote Authentication](https://netboxlabs.com/docs/netbox/en/stable/configuration/remote-authentication/)
  - [Data & Validation](https://netboxlabs.com/docs/netbox/en/stable/configuration/data-validation/)
  - [Default Values](https://netboxlabs.com/docs/netbox/en/stable/configuration/default-values/)
  - [Error Reporting](https://netboxlabs.com/docs/netbox/en/stable/configuration/error-reporting/)
  - [Plugins](https://netboxlabs.com/docs/netbox/en/stable/configuration/plugins/)
  - [Miscellaneous](https://netboxlabs.com/docs/netbox/en/stable/configuration/miscellaneous/)
  - [Development](https://netboxlabs.com/docs/netbox/en/stable/configuration/development/)
- Customization
  - [Custom Fields](https://netboxlabs.com/docs/netbox/en/stable/customization/custom-fields/)
  - [Custom Links](https://netboxlabs.com/docs/netbox/en/stable/customization/custom-links/)
  - [Custom Validation](https://netboxlabs.com/docs/netbox/en/stable/customization/custom-validation/)
  - [Export Templates](https://netboxlabs.com/docs/netbox/en/stable/customization/export-templates/)
  - [Reports](https://netboxlabs.com/docs/netbox/en/stable/customization/reports/)
  - [Custom Scripts](https://netboxlabs.com/docs/netbox/en/stable/customization/custom-scripts/)
- Integrations
  - [REST API](https://netboxlabs.com/docs/netbox/en/stable/integrations/rest-api/)
  - [GraphQL API](https://netboxlabs.com/docs/netbox/en/stable/integrations/graphql-api/)
  - [Webhooks](https://netboxlabs.com/docs/netbox/en/stable/integrations/webhooks/)
  - [Synchronized Data](https://netboxlabs.com/docs/netbox/en/stable/integrations/synchronized-data/)
  - [Prometheus Metrics](https://netboxlabs.com/docs/netbox/en/stable/integrations/prometheus-metrics/)
- Plugins
  - [About Plugins](https://netboxlabs.com/docs/netbox/en/stable/plugins/index/)
  - [Installing a Plugin](https://netboxlabs.com/docs/netbox/en/stable/plugins/installation/)
  - [Removing a Plugin](https://netboxlabs.com/docs/netbox/en/stable/plugins/removal/)
  - Developing Plugins
    - [Getting Started](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/index/)
    - [Models](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/models/)
    - [Views](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/views/)
    - [Navigation](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/navigation/)
    - [Templates](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/templates/)
    - [Tables](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/tables/)
    - [Forms](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/forms/)
    - [Filters & Filter Sets](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/filtersets/)
    - [Search](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/search/)
    - [Event Types](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/event-types/)
    - [Data Backends](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/data-backends/)
    - [REST API](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/rest-api/)
    - [GraphQL API](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/graphql-api/)
    - [Background Jobs](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/background-jobs/)
    - [Dashboard Widgets](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/dashboard-widgets/)
    - [Staged Changes](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/staged-changes/)
    - [Exceptions](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/exceptions/)
    - [Migrating to v4.0](https://netboxlabs.com/docs/netbox/en/stable/plugins/development/migration-v4/)
- Administration
  - Authentication
    - [Overview](https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/overview/)
    - [Google](https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/google/)
    - [Microsoft Entra ID](https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/microsoft-entra-id/)
    - [Okta](https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/okta/)
  - [Permissions](https://netboxlabs.com/docs/netbox/en/stable/administration/permissions/)
  - [Error Reporting](https://netboxlabs.com/docs/netbox/en/stable/administration/error-reporting/)
  - [Housekeeping](https://netboxlabs.com/docs/netbox/en/stable/administration/housekeeping/)
  - [Replicating NetBox](https://netboxlabs.com/docs/netbox/en/stable/administration/replicating-netbox/)
  - [NetBox Shell](https://netboxlabs.com/docs/netbox/en/stable/administration/netbox-shell/)
- Data Model
  - Circuits
    - [Circuit](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuit/)
    - [CircuitGroup](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuitgroup/)
    - [CircuitGroupAssignment](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuitgroupassignment/)
    - [Circuit Termination](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuittermination/)
    - [Circuit Type](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuittype/)
    - [Provider](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/provider/)
    - [Provider Account](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/provideraccount/)
    - [Provider Network](https://netboxlabs.com/docs/netbox/en/stable/models/circuits/providernetwork/)
  - Core
    - [DataFile](https://netboxlabs.com/docs/netbox/en/stable/models/core/datafile/)
    - [DataSource](https://netboxlabs.com/docs/netbox/en/stable/models/core/datasource/)
    - [Job](https://netboxlabs.com/docs/netbox/en/stable/models/core/job/)
  - DCIM
    - [Cable](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/cable/)
    - [ConsolePort](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleport/)
    - [ConsolePortTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleporttemplate/)
    - [ConsoleServerPort](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleserverport/)
    - [ConsoleServerPortTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleserverporttemplate/)
    - [Device](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/device/)
    - [DeviceBay](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicebay/)
    - [DeviceBayTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicebaytemplate/)
    - [DeviceRole](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicerole/)
    - [DeviceType](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicetype/)
    - [FrontPort](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/frontport/)
    - [FrontPortTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/frontporttemplate/)
    - [Interface](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/interface/)
    - [InterfaceTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/interfacetemplate/)
    - [InventoryItem](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/inventoryitem/)
    - [InventoryItemRole](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/inventoryitemrole/)
    - [InventoryItemTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/inventoryitemtemplate/)
    - [Location](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/location/)
    - [Manufacturer](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/manufacturer/)
    - [Module](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/module/)
    - [ModuleBay](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/modulebay/)
    - [ModuleBayTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/modulebaytemplate/)
    - [ModuleType](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/moduletype/)
    - [Platform](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/platform/)
    - [PowerFeed](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerfeed/)
    - [PowerOutlet](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/poweroutlet/)
    - [PowerOutletTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/poweroutlettemplate/)
    - [PowerPanel](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerpanel/)
    - [PowerPort](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerport/)
    - [PowerPortTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerporttemplate/)
    - [Rack](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rack/)
    - [RackReservation](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rackreservation/)
    - [RackRole](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rackrole/)
    - [RackType](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/racktype/)
    - [RearPort](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rearport/)
    - [RearPortTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rearporttemplate/)
    - [Region](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/region/)
    - [Site](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/site/)
    - [SiteGroup](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/sitegroup/)
    - [VirtualChassis](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/virtualchassis/)
    - [VirtualDeviceContext](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/virtualdevicecontext/)
  - Extras
    - [Bookmark](https://netboxlabs.com/docs/netbox/en/stable/models/extras/bookmark/)
    - [Branch](https://netboxlabs.com/docs/netbox/en/stable/models/extras/branch/)
    - [ConfigContext](https://netboxlabs.com/docs/netbox/en/stable/models/extras/configcontext/)
    - [ConfigTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/extras/configtemplate/)
    - [CustomField](https://netboxlabs.com/docs/netbox/en/stable/models/extras/customfield/)
    - [CustomFieldChoiceSet](https://netboxlabs.com/docs/netbox/en/stable/models/extras/customfieldchoiceset/)
    - [CustomLink](https://netboxlabs.com/docs/netbox/en/stable/models/extras/customlink/)
    - [EventRule](https://netboxlabs.com/docs/netbox/en/stable/models/extras/eventrule/)
    - [ExportTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/extras/exporttemplate/)
    - [ImageAttachment](https://netboxlabs.com/docs/netbox/en/stable/models/extras/imageattachment/)
    - [JournalEntry](https://netboxlabs.com/docs/netbox/en/stable/models/extras/journalentry/)
    - [Notification](https://netboxlabs.com/docs/netbox/en/stable/models/extras/notification/)
    - [NotificationGroup](https://netboxlabs.com/docs/netbox/en/stable/models/extras/notificationgroup/)
    - [SavedFilter](https://netboxlabs.com/docs/netbox/en/stable/models/extras/savedfilter/)
    - [StagedChange](https://netboxlabs.com/docs/netbox/en/stable/models/extras/stagedchange/)
    - [Subscription](https://netboxlabs.com/docs/netbox/en/stable/models/extras/subscription/)
    - [Tag](https://netboxlabs.com/docs/netbox/en/stable/models/extras/tag/)
    - [Webhook](https://netboxlabs.com/docs/netbox/en/stable/models/extras/webhook/)
  - IPAM
    - [ASN](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/asn/)
    - [ASNRange](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/asnrange/)
    - [Aggregate](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/aggregate/)
    - [FHRPGroup](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/fhrpgroup/)
    - [FHRPGroupAssignment](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/fhrpgroupassignment/)
    - [IPAddress](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/ipaddress/)
    - [IPRange](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/iprange/)
    - [Prefix](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/prefix/)
    - [RIR](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/rir/)
    - [Role](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/role/)
    - [RouteTarget](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/routetarget/)
    - [Service](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/service/)
    - [ServiceTemplate](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/servicetemplate/)
    - [VLAN](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/vlan/)
    - [VLANGroup](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/vlangroup/)
    - [VRF](https://netboxlabs.com/docs/netbox/en/stable/models/ipam/vrf/)
  - Tenancy
    - [Contact](https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/contact/)
    - [ContactGroup](https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/contactgroup/)
    - [ContactRole](https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/contactrole/)
    - [Tenant](https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/tenant/)
    - [TenantGroup](https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/tenantgroup/)
  - Virtualization
    - [Cluster](https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/cluster/)
    - [ClusterGroup](https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/clustergroup/)
    - [ClusterType](https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/clustertype/)
    - [VMInterface](https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/vminterface/)
    - [VirtualDisk](https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/virtualdisk/)
    - [VirtualMachine](https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/virtualmachine/)
  - VPN
    - [IKEPolicy](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ikepolicy/)
    - [IKEProposal](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ikeproposal/)
    - [IPSecPolicy](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ipsecpolicy/)
    - [IPSecProfile](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ipsecprofile/)
    - [IPSecProposal](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ipsecproposal/)
    - [L2VPN](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/l2vpn/)
    - [L2VPNTermination](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/l2vpntermination/)
    - [Tunnel](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/tunnel/)
    - [TunnelGroup](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/tunnelgroup/)
    - [TunnelTermination](https://netboxlabs.com/docs/netbox/en/stable/models/vpn/tunneltermination/)
  - Wireless
    - [WirelessLAN](https://netboxlabs.com/docs/netbox/en/stable/models/wireless/wirelesslan/)
    - [WirelessLANGroup](https://netboxlabs.com/docs/netbox/en/stable/models/wireless/wirelesslangroup/)
    - [WirelessLink](https://netboxlabs.com/docs/netbox/en/stable/models/wireless/wirelesslink/)
- Reference
  - [Filtering](https://netboxlabs.com/docs/netbox/en/stable/reference/filtering/)
  - [Conditions](https://netboxlabs.com/docs/netbox/en/stable/reference/conditions/)
  - [Markdown](https://netboxlabs.com/docs/netbox/en/stable/reference/markdown/)
- Development
  - [Introduction](https://netboxlabs.com/docs/netbox/en/stable/development/index/)
  - [Getting Started](https://netboxlabs.com/docs/netbox/en/stable/development/getting-started/)
  - [Style Guide](https://netboxlabs.com/docs/netbox/en/stable/development/style-guide/)
  - [Models](https://netboxlabs.com/docs/netbox/en/stable/development/models/)
  - [Adding Models](https://netboxlabs.com/docs/netbox/en/stable/development/adding-models/)
  - [Extending Models](https://netboxlabs.com/docs/netbox/en/stable/development/extending-models/)
  - [Signals](https://netboxlabs.com/docs/netbox/en/stable/development/signals/)
  - [Search](https://netboxlabs.com/docs/netbox/en/stable/development/search/)
  - [Application Registry](https://netboxlabs.com/docs/netbox/en/stable/development/application-registry/)
  - [User Preferences](https://netboxlabs.com/docs/netbox/en/stable/development/user-preferences/)
  - [Web UI](https://netboxlabs.com/docs/netbox/en/stable/development/web-ui/)
  - [Internationalization](https://netboxlabs.com/docs/netbox/en/stable/development/internationalization/)
  - [Translations](https://netboxlabs.com/docs/netbox/en/stable/development/translations/)
  - [Release Checklist](https://netboxlabs.com/docs/netbox/en/stable/development/release-checklist/)
  - [git Cheat Sheet](https://netboxlabs.com/docs/netbox/en/stable/development/git-cheat-sheet/)
- Release Notes
  - [Summary](https://netboxlabs.com/docs/netbox/en/stable/release-notes/index/)
  - [Version 4.1](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-4.1/)
  - [Version 4.0](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-4.0/)
  - [Version 3.7](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.7/)
  - [Version 3.6](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.6/)
  - [Version 3.5](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.5/)
  - [Version 3.4](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.4/)
  - [Version 3.3](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.3/)
  - [Version 3.2](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.2/)
  - [Version 3.1](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.1/)
  - [Version 3.0](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.0/)
  - [Version 2.11](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.11/)
  - [Version 2.10](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.10/)
  - [Version 2.9](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.9/)
  - [Version 2.8](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.8/)
  - [Version 2.7](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.7/)
  - [Version 2.6](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.6/)
  - [Version 2.5](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.5/)
  - [Version 2.4](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.4/)
  - [Version 2.3](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.3/)
  - [Version 2.2](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.2/)
  - [Version 2.1](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.1/)
  - [Version 2.0](https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.0/)

## Embedded Documentation

URL: https://netboxlabs.com/docs/netbox/en/stable/index/
=== BEGIN FILE ===
# The Premier Network Source of Truth

NetBox is a solution for modeling and documenting networks, integrating IP address management (IPAM) and datacenter infrastructure management (DCIM) with APIs and extensions. It serves as a "source of truth" for network automation, utilized by organizations globally.

## Built for Networks

NetBox features a data model tailored for network engineers, including:

* Hierarchical regions, sites, and locations
* Racks, devices, and device components
* Cables and wireless connections
* Power distribution tracking
* Data circuits and providers
* Virtual machines and clusters
* IP prefixes, ranges, and addresses
* VRFs and route targets
* FHRP groups (VRRP, HSRP, etc.)
* AS numbers
* VLANs and scoped VLAN groups
* L2VPN overlays
* Tenancy assignments
* Contact management

## Customizable & Extensible

NetBox allows customization and extension through:

* Custom fields
* Custom model validation
* Export templates
* Event rules
* Plugins
* REST & GraphQL APIs

## Always Open

NetBox is open source under the Apache 2 license, ensuring accessibility and community-driven development. Contributions can be made via the [GitHub repository](https://github.com/netbox-community/netbox).

## Powered by Python

Built on the Django framework, NetBox allows users to extend its functionality using Python tools through custom scripts and plugins.

## Getting Started

* Try the [public demo](https://demo.netbox.dev/)
* Follow the [installation guide](./installation/index.md) for deployment
* Use the community [Docker image](https://github.com/netbox-community/netbox-docker)
* Explore [NetBox Cloud](https://netboxlabs.com/netbox-cloud) for a managed solution by [NetBox Labs](https://netboxlabs.com/)
=== END FILE ===

**Introduction**
URL: https://netboxlabs.com/docs/netbox/en/stable/introduction/
=== BEGIN FILE ===
# Introduction to NetBox

## Origin Story

NetBox was developed by Jeremy Stretch at DigitalOcean in 2015 to automate network provisioning and was released as an open source project in June 2016. It has since been adopted by many organizations as a central network source of truth, managed by NetBox Labs and community maintainers, with various plugins available.

## Key Features

NetBox serves network engineers and operators with core features including:

* IP address management (IPAM) with full IPv4/IPv6 parity
* Automatic provisioning of next available prefix/IP
* VRFs with import & export route targets
* VLANs with variably-scoped groups
* AS number (ASN) management
* Rack elevations with SVG rendering
* Device modeling using pre-defined types
* Virtual chassis and device contexts
* Network, power, and console cabling with SVG traces
* Breakout cables
* Power distribution modeling
* Data circuit and provider tracking
* Wireless LAN and point-to-point links
* VPN tunnels
* IKE & IPSec policies
* Layer 2 VPN overlays
* FHRP groups (VRRP, HSRP, etc.)
* Application service bindings
* Virtual machines & clusters
* Flexible hierarchy for sites and locations
* Tenant ownership assignment
* Device & VM configuration contexts for advanced configuration rendering
* Custom fields for data model extension
* Custom validation & protection rules
* Custom reports & scripts executable directly within the UI
* Extensive plugin framework for adding custom functionality
* Single sign-on (SSO) authentication
* Robust object-based permissions
* Detailed, automatic change logging
* Global search engine
* Event-driven scripts & webhooks

## What NetBox Is Not

NetBox does not provide:

* Network monitoring
* DNS server
* RADIUS server
* Configuration management
* Facilities management

However, it can populate external tools with necessary data.

## Design Philosophy

NetBox's design is based on:

### Replicate the Real World

The data model reflects real-world networks, assigning IP addresses to interfaces rather than devices.

### Serve as a "Source of Truth"

NetBox represents the desired state of a network, discouraging automated imports of live data to ensure integrity.

### Keep it Simple

A preference for simple solutions ensures a lean codebase and low learning curve.

## Application Stack

NetBox is built on the Django framework and uses a PostgreSQL database, running as a WSGI service behind an HTTP server.

| Function           | Component         |
|--------------------|-------------------|
| HTTP service       | nginx or Apache   |
| WSGI service       | gunicorn or uWSGI |
| Application        | Django/Python     |
| Database           | PostgreSQL 12+    |
| Task queuing       | Redis/django-rq   |
=== END FILE ===

**Features**
**Facilities**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/facilities/
=== BEGIN FILE ===
# Facilities

NetBox allows modeling of a network's presence from global regions to individual equipment racks using purpose-built models. 

## Regions

Regions represent geographic domains for network presence, such as countries or cities, and can be nested hierarchically. Example hierarchy:

* Europe
    * France
    * Germany
    * Spain
* North America
    * Canada
    * United States
        * California
        * New York
        * Texas

Regions are listed alphabetically and have no maximum nesting depth.

## Site Groups

Site groups can also be arranged hierarchically but focus on functional grouping rather than geographic. They can classify sites as corporate, branch, or customer sites.

## Sites

A site represents a building within a region/site group, assigned an operational status and can have a mailing address and GPS coordinates.

## Locations

Locations are logical subdivisions within a building (e.g., floors or rooms) and can be nested hierarchically. Each location has an operational status.

## Rack Types

Rack types specify unique rack specifications, including weight, height, and unit ordering, which can be replicated in new racks created in NetBox.

## Racks

Racks are discrete objects within a site/location where devices are installed. Each rack has an operational status, type, facility ID, and dimensions. Racks must be associated with a site, and optionally with a location. Custom roles can be assigned to racks, and rack space can be tracked in half-unit increments.

!!! tip "Devices"
    A device can be installed within a site, location, or rack, providing flexibility in organization.
=== END FILE ===

**Devices & Cabling**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/devices-cabling/
=== BEGIN FILE ===
# Devices & Cabling

NetBox is a tool for modeling network infrastructure, with the device object being crucial. A device represents physical hardware like servers or routers, which can be mounted in racks. Resources within devices, such as network interfaces and console ports, can be grouped into modules.

## Manufacturers

Manufacturers represent organizations producing hardware devices, defined by users to reflect actual entities.

## Device Types

A device type combines manufacturer and hardware model, allowing users to create devices with replicated components. Users can create their own device types or use the community library of pre-defined types.

Components that can be modeled include:

* Interfaces
* Console ports
* Console server ports
* Power ports
* Power outlets
* Pass-through ports
* Module bays
* Device bays

For example, a Juniper EX4300-48T device type might include templates for console ports, power ports, and multiple interfaces.

!!! tip "Component Instantiation is not Retroactive"
Component instantiation occurs at device creation; changes to device types do not affect existing devices.

## Devices

A device represents actual hardware installed in the real world, with attributes like operational status and software platform. Components are instantiated from the assigned device type.

### Virtual Chassis

Virtual chassis model a set of devices sharing a management plane, with one device as the master.

### Virtual Device Contexts

VDCs are logical partitions within a device, operating autonomously while sharing resources.

## Module Types & Modules

Module types instantiate modules within devices, which can have their own child components. Device bays hold independently operating hardware, while module bays contain modules that do not operate independently.

!!! tip "Device Bays vs. Module Bays"
Device bays are for hardware with its own management plane; module bays are for components dependent on the parent device.

Modules can have templated components automatically renamed based on their module bay.

## Cables

NetBox models cables as connections among device components, with attributes like type, color, length, and label. Basic checks prevent invalid connections, allowing flexible terminations for cables.
=== END FILE ===

**Power Tracking**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/power-tracking/
=== BEGIN FILE ===
# Power Tracking

NetBox's DCIM feature allows modeling facility power through power panels and feeds, primarily for data centers but applicable to other environments.

## Power Panels

- Represents the upstream power element, typically a power distribution panel.
- Splits facility power into multiple circuits modeled as feeds.
- Associated with a site and optionally a specific location.
- No limit on the number of feeds per panel, but should reflect real-world objects.

## Power Feeds

- Represents a discrete power circuit from a power panel.
- Can have a name, operational status, and electrical characteristics (supply type, voltage, amperage).
- A device power port connects to a power feed via a cable; only one port per feed.
- Multiple devices on the same feed require a power distribution unit (PDU).

!!! tip "Primary and Redundant Power"
- Each power feed is assigned a type: primary or redundant for modeling redundancy.
- For single, non-redundant supplies, all feeds should be marked as primary.
=== END FILE ===

**IPAM**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/ipam/
=== BEGIN FILE ===
# IP Address Management

IP address management (IPAM) is a key feature of NetBox, supporting both IPv4 and IPv6, advanced VRF assignment, and automatic hierarchy formation.

## IP Hierarchy

NetBox uses several object types to represent IP resource hierarchies:

* **Aggregate** - Represents the root of an addressing hierarchy, typically a large address space allocated to an organization.
* **Prefix** - A subnet within an aggregate, which can have a functional role and operational status.
* **IP Range** - A range of individual IP addresses within a prefix, often used for DHCP scopes.
* **IP Address** - An individual IP address with its subnet mask, organized under its parent prefix.

Automatic hierarchy construction is managed by NetBox without manual assignment.

Example hierarchy:
* 100.64.0.0/10 (aggregate)
    * 100.64.0.0/20 (prefix)
    * 100.64.16.0/20 (prefix)
        * 100.64.16.0/24 (prefix)
            * 100.64.16.1/24 (address)
            * 100.64.16.2/24 (address)
            * 100.64.16.3/24 (address)
        * 100.64.19.0/24 (prefix)
    * 100.64.32.0/20 (prefix)
        * 100.64.32.1/24 (address)
        * 100.64.32.10-99/24 (range)

## Utilization Stats

Utilization rates for prefixes are calculated based on their status. _Container_ prefixes' rates depend on child prefixes' usage, while other prefixes' rates depend on child IP addresses and ranges. Aggregate utilization is based on child prefixes' consumption.

## VRF Tracking

NetBox models VRF instances for multiple routing tables, allowing each IP object to be assigned to a VRF, maintaining isolated IP hierarchies. Each VRF can enforce unique IP space, providing flexibility in modeling.

## AS Numbers

NetBox tracks autonomous system (AS) numbers, supporting both 16- and 32-bit ASNs, each assigned to an authoritative RIR.

## Service Mapping

NetBox models network applications as service objects linked to devices or virtual machines, optionally with specific IP addresses. Services are defined using templates for easy instantiation, though they can also be created manually.
=== END FILE ===

**VLAN Management**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/vlan-management/
=== BEGIN FILE ===
# VLAN Management

NetBox tracks VLAN information to assist with layer two network configurations, defining VLANs per IEEE 802.1Q standards. VLANs can be assigned to groups and functional roles.

## VLAN Groups

- A VLAN group is a collection of VLANs within a scope.
- Each group can be associated with a site, location, or rack.
- Designates a minimum and maximum VLAN ID (default: 1 to 4094).
- Each VLAN in a group must have a unique ID and name.
- No limit on the number of groups per scope.

## VLANs

- VLANs are modeled with a 12-bit VLAN ID and a name.
- Each VLAN has an operational status and may have a function role.
- VLANs can be assigned to a VLAN group or site.
- VLANs can be associated with device and virtual machine interfaces.
- Interfaces can be assigned an 802.1Q mode (access or tagged) with relevant VLANs applied as tagged or untagged.
=== END FILE ===

**L2VPN & Overlay**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/l2vpn-overlay/
=== BEGIN FILE ===
# L2VPN & Overlay

L2VPN and overlay networks (e.g., VXLAN, EVPN) can be defined in NetBox, linking them to interfaces and VLANs for tracking overlay assets and their relationships with underlay resources.

- Each L2VPN instance has:
  - A type
  - An optional unique identifier
- L2VPNs can have import and export route targets assigned, similar to VRFs.
- Terminations can be created to assign VLANs and/or device and virtual machine interfaces to the overlay.
=== END FILE ===

**Circuits**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/circuits/
=== BEGIN FILE ===
# Circuits

NetBox is designed for managing network transit and peering providers and circuits, offering flexibility for modeling physical circuits in various environments and connecting them to device interfaces via cables.

## Providers

- A provider is any organization offering Internet or private connectivity, typically large carriers, regional providers, or internal services.
- Providers can have account and contact details, and one or more AS numbers.
- Provider networks can be modeled as "black box" networks for circuits to connect, often represented in topology diagrams.

## Circuits

- A circuit is a physical connection between two points, maintained by an external provider, such as a fiber optic Internet connection.
- Each circuit is linked to a provider and has a unique circuit ID, type, operational status, and other characteristics.
- Provider accounts can categorize circuits by business units or technologies.
- Circuits can have up to two terminations (A and Z), associated with a site or provider network, allowing for physical connectivity mapping.

!!! warning "Physical vs. Virtual Circuits"
    The circuit model in NetBox represents **physical** connections, not _virtual_ circuits offered by providers. If it can't be pointed to, it's not a physical circuit.
=== END FILE ===

**Wireless**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/wireless/
=== BEGIN FILE ===
# Wireless

NetBox supports modeling both wireless LANs and point-to-point links alongside physical cable plants.

## Wireless LANs

A wireless LAN is a multi-access network for multiple wireless clients, identified by a common SSID and authentication parameters. They can be organized into self-nesting groups and optionally bound to a VLAN for mapping to wired networks.

Authentication attributes for wireless LANs include:

* **Type** - Open, WEP, WPA, etc.
* **Cipher** - Auto, TKIP, or AES
* **Pre-shared key (PSK)** - The secret key configured on all participating clients

Defining authentication parameters is optional.

## Wireless Links

A wireless link is a point-to-point connection between two stations, functioning similarly to cables but modeling wireless communications more accurately. Wireless links also have an SSID and optional authentication attributes.
=== END FILE ===

**Virtualization**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/virtualization/
=== BEGIN FILE ===
# Virtualization

Virtual machines and clusters can be modeled in NetBox alongside physical infrastructure, allowing for seamless integration between physical and virtual networks.

## Clusters

- A cluster consists of one or more physical host devices for running virtual machines.
- Each cluster requires a type and operational status, and may be assigned to a user-defined group.
- Designating one or more devices as hosts is optional.

## Virtual Machines

- A virtual machine is a virtualized compute instance, similar to device objects but lacking physical attributes.
- VMs can have interfaces with assigned IP addresses and VLANs, but cannot connect via cables.
- Each VM can define its compute, memory, and storage resources.
=== END FILE ===

**VPN Tunnels**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/vpn-tunnels/
=== BEGIN FILE ===
# Tunnels

NetBox models private tunnels among virtual termination points in a network, including implementations like GRE, IP-in-IP, and IPSec. Tunnels can terminate at two or more device or virtual machine interfaces and can be organized into user-defined groups.

# IPSec & IKE

NetBox supports modeling IPSec & IKE policies, which define encryption and authentication parameters for IPSec tunnels.
=== END FILE ===

**Tenancy**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/tenancy/
=== BEGIN FILE ===
# Tenancy

Most core objects within NetBox's data model support _tenancy_, associating an object with a particular tenant to convey ownership or dependency. For example, an enterprise might represent its internal business units as tenants, while a managed services provider might create a tenant for each customer.

## Tenant Groups

Tenants can be grouped by any logic required, with recursive nesting for flexibility. For instance, a parent "Customers" group can have child groups "Current" and "Past." A tenant can be assigned to a group at any level in the hierarchy.

## Tenants

The tenant model typically represents a customer or internal organization but can be adapted to various needs. Most core objects in NetBox can be assigned to a tenant, allowing for easy tracking of ownership across object types. The following objects can be assigned to tenants:

* Sites
* Racks
* Rack reservations
* Devices
* VRFs
* Prefixes
* IP addresses
* VLANs
* Circuits
* Clusters
* Virtual machines

Tenant assignment signifies ownership in NetBox, with each object owned by a single tenant. For example, a firewall dedicated to a customer would be assigned to that customer's tenant, while a firewall serving multiple customers would not have a tenant assignment.
=== END FILE ===

**Contacts**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/contacts/
=== BEGIN FILE ===
# Contacts

Contact assignment in NetBox allows tracking ownership of resources, with a contact representing an individual responsible for a resource within a specific role.

## Contact Groups

Contacts can be organized into a recursive hierarchy, allowing assignment at any level.

## Contact Roles

Contact roles define the relationship of a contact to an assigned object, such as administrative, operational, or emergency roles.

## Contacts

Each contact must have a name and may include optional details like title, phone number, and email. Contacts are unique and can be assigned to multiple NetBox objects without limit. The following models support contact assignments:

* circuits.Circuit
* circuits.Provider
* circuits.ProviderAccount
* dcim.Device
* dcim.Location
* dcim.Manufacturer
* dcim.PowerPanel
* dcim.Rack
* dcim.Region
* dcim.Site
* dcim.SiteGroup
* tenancy.Tenant
* virtualization.Cluster
* virtualization.ClusterGroup
* virtualization.VirtualMachine
=== END FILE ===

**Search**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/search/
=== BEGIN FILE ===
# Search

## Global Search

NetBox features a global search engine that allows users to search across its data model. Relevant fields are indexed by precedence for optimal results. The search index updates in real-time with object creation or modification. Users can specify lookup types like exact or partial match, with matching portions highlighted in results. Custom fields can be included if configured with a search weight, and plugins can register custom models for search inclusion. 

Note: Static choice fields, including custom fields of type "Selection" or "Multiple selection," are not indexed.

## Saved Filters

NetBox provides extensive filters for each object type, enabling complex queries. Users can save frequently used filter sets for future use. For example, a query to find planned devices can be saved as:

```
?status=planned&device_type_id=78&region_id=12
```

and reused as:

```
?filter=my-custom-filter
```

Saved filters are usable in both the UI and API queries.
=== END FILE ===

**Context Data**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/context-data/
=== BEGIN FILE ===
# Context Data

Configuration context data (or "config contexts") allows users to define arbitrary data for devices and virtual machines based on specific characteristics. For instance, syslog servers can be defined for devices in a certain region using a config context instance.

```json
{
    "syslog-servers": [
        "192.168.43.107",
        "192.168.48.112"
    ]
}
```

This data can be accessed via remote API clients or used to render configuration templates.

Config contexts can be computed based on various criteria:

| Type          | Devices          | Virtual Machines |
|---------------|------------------|------------------|
| Region        | Yes              | Yes              |
| Site group    | Yes              | Yes              |
| Site          | Yes              | Yes              |
| Location      | Yes              |                  |
| Device type   | Yes              |                  |
| Role          | Yes              | Yes              |
| Platform      | Yes              | Yes              |
| Cluster type  |                  | Yes              |
| Cluster group |                  | Yes              |
| Cluster       |                  | Yes              |
| Tenant group  | Yes              | Yes              |
| Tenant        | Yes              | Yes              |
| Tag           | Yes              | Yes              |

Data can be stored in JSON format without restrictions.

## Hierarchical Rendering

Context data can be merged and overridden using multiple instances. For example, if different syslog servers are needed for a specific device role, a second config context with a higher weight can be created.

Example of a config context for a region:

```json
{
    "ntp-servers": [
        "172.16.10.22",
        "172.16.10.33"
    ],
    "syslog-servers": [
        "172.16.9.100",
        "172.16.9.101"
    ]
}
```

If a site within the region requires a local syslog server, a second config context can be created:

```json
{
    "syslog-servers": [
        "192.168.43.107"
    ]
}
```

The resulting context data for a device at this site will be:

```json
{
    "ntp-servers": [
        "172.16.10.22",
        "172.16.10.33"
    ],
    "syslog-servers": [
        "192.168.43.107"
    ]
}
```

Higher-weight context data overwrites conflicting lower-weight data while preserving non-conflicting data.

## Local Context Data

Devices and virtual machines can have local context data that takes precedence over other config contexts. This is useful for specific deviations in data for individual objects. If local context data is frequently defined, custom fields may be a better solution.
=== END FILE ===

**Configuration Rendering**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/configuration-rendering/
=== BEGIN FILE ===
# Configuration Rendering

NetBox enables the rendering of complete configuration files for network devices using configuration templates and context data. 

## Configuration Templates

Templates are written in Jinja2 and can be populated from remote data sources. An example template for a network switch configuration is provided:

```jinja2
{% extends 'base.j2' %}

{% block content %}
    system {
        host-name {{ device.name }};
        domain-name example.com;
        time-zone UTC;
        authentication-order [ password radius ];
        ntp {
            {% for server in ntp_servers %}
                server {{ server }};
            {% endfor %}
        }
    }
    {% for interface in device.interfaces.all() %}
        {% include 'common/interface.j2' %}
    {% endfor %}
{% endblock %}
```

The `device` variable is populated with the specific device instance, and `ntp_servers` is sourced from context data.

### Context Data

The configuration rendering context includes the `device` or `virtualmachine` object. NetBox model classes can also be accessed, e.g., `There are {{ dcim.Site.objects.count() }} sites.`

## Rendering Templates

### Device Configurations

NetBox has a REST API endpoint for rendering the default configuration template for a device via a POST request:

```no-highlight
curl -X POST \
-H "Authorization: Token $TOKEN" \
-H "Content-Type: application/json" \
-H "Accept: application/json; indent=4" \
http://netbox:8000/api/dcim/devices/123/render-config/ \
--data '{
  "extra_data": "abc123"
}'
```

The rendering order for configuration templates is:

* Device-specific template
* Role-specific template
* Platform-specific template

If none are assigned, the request fails. The output format can be JSON or plaintext.

### General Purpose Use

Templates can also be rendered without a specific device using a general purpose REST API endpoint:

```no-highlight
curl -X POST \
-H "Authorization: Token $TOKEN" \
-H "Content-Type: application/json" \
-H "Accept: application/json; indent=4" \
http://netbox:8000/api/extras/config-templates/123/render/ \
--data '{
  "foo": "abc",
  "bar": 123
}'
```
=== END FILE ===

**Synchronized Data**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/synchronized-data/
=== BEGIN FILE ===
# Synchronized Data

NetBox supports automatic synchronization of local data from designated remote sources, such as configuration templates that can source content from remote git repositories. This is achieved using the core data source and data file models.

To enable synchronization, the NetBox administrator designates remote data sources, which can be:

* Git repository
* Amazon S3 bucket (or compatible product)
* Local disk path

Local disk paths are considered "remote" as they exist outside NetBox's database.

Data backends connecting to external sources typically require supporting Python libraries. The Git backend needs the `dulwich` package, and the S3 backend requires the `boto3` package. If using Git with `HTTP_PROXIES` configured for SOCKS, the `python_socks` library is also necessary.

Each remote source type has specific configuration parameters. For example, a git source requires a branch and authentication credentials. After creating the source, a synchronization job replicates remote files into the local database.

The following NetBox models can be associated with replicated data files:

* Config contexts
* Config templates
* Export templates

Designated data will replace local instance content, and future updates to the replicated file will flag the local instance as out-of-date. Users can synchronize these objects individually or in bulk, ensuring that automated tasks do not immediately affect production data.

A user must have the `core.sync_datasource` permission to synchronize local files from a remote data source.
=== END FILE ===

**Change Logging**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/change-logging/
=== BEGIN FILE ===
# Change Logging

Every time an object in NetBox is created, updated, or deleted, a serialized copy of that object is saved to the database along with metadata such as the current time and the user associated with the change. This creates a persistent record of changes for each object and for NetBox as a whole. The global change log can be viewed by navigating to Other > Change Log.

A serialized representation of the modified instance is included in JSON format, similar to the REST API, but without nested representations. For example, the `tenant` field of a site records only the tenant's ID.

When a request is made, a UUID is generated and attached to change records from that request. Editing three objects in bulk will create three separate change records, all associated with the same UUID, facilitating the identification of change records from a particular request.

Change records are accessible via the API at the read-only endpoint `/api/extras/object-changes/` and can be exported in CSV format through the web UI.

## Correlating Changes by Request

Every request to NetBox is assigned a unique ID to correlate change records. For instance, changing the status of three sites using the bulk edit feature results in three new change records, all referencing the same request ID, indicating that the changes were made as part of the same request.
=== END FILE ===

**Journaling**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/journaling/
=== BEGIN FILE ===
# Journaling

All primary and organizational models in NetBox support journaling, which is a collection of human-generated notes and comments about an object for historical context. It supplements the change log by providing additional information about changes or events outside NetBox. Unlike the change log, journal entries persist for the life of their associated object.

Each journal entry includes:
- A selectable kind (info, success, warning, or danger)
- A user-populated `comments` field

Each entry automatically records:
- Date
- Time
- Associated user upon creation
=== END FILE ===

**Event Rules**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/event-rules/
=== BEGIN FILE ===
# Event Rules

NetBox can automatically perform functions in response to internal events, including:

* Executing a [custom script](../customization/custom-scripts.md)
* Sending a [webhook](../integrations/webhooks.md)
* Generating [user notifications](../features/notifications.md)

For instance, to configure a monitoring system to start monitoring a device when its status changes to active, a webhook can be created for the device model, and associated with an event rule to trigger automatically under specified conditions.

Each event must be linked to at least one NetBox object type and one event (e.g., create, update, delete).

## Conditional Event Rules

Event rules can include conditional logic in JSON to determine if an event should trigger for a specific object. For example, to trigger an event for devices only when the `status` field is "active":

```json
{
  "and": [
    {
      "attr": "status.value",
      "value": "active"
    }
  ]
}
```

Refer to the NetBox's [conditional logic](../reference/conditions.md) documentation for more details.

## Event Rule Processing

Detected changes result in events being placed into a Redis queue for processing, allowing user requests to complete without waiting. Events are processed by the `rqworker` process, and the current event queue and any failed events can be viewed under System > Background Tasks.
=== END FILE ===

**Notifications**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/notifications/
=== BEGIN FILE ===
# Notifications

NetBox v4.1 introduced a user notification system that allows users to mark notifications as read or delete them. Notifications can be generated through two main mechanisms:

* Users can subscribe to an object, receiving notifications when that object is modified.
* Event rules can be defined to automatically generate notifications for users in response to specific system events.

Plugins in NetBox can also create notifications for their own needs.
=== END FILE ===

**Background Jobs**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/background-jobs/
=== BEGIN FILE ===
# Background Jobs

NetBox allows for the execution of certain functions as background tasks, including:

* [Report](../customization/reports.md) execution
* [Custom script](../customization/custom-scripts.md) execution
* Synchronization of [remote data sources](../integrations/synchronized-data.md)

Plugins can also enqueue their own background tasks using the [Job model](../models/core/job.md). These tasks are executed by the `rqworker` process(es).

## Scheduled Jobs

Background jobs can be set to run immediately or at a specified future time, with options for repeating at set intervals.
=== END FILE ===

**Auth & Permissions**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/authentication-permissions/
=== BEGIN FILE ===
# Authentication & Permissions

NetBox features a comprehensive permissions system that surpasses the model-based permissions of Django. Key aspects of assigning permissions include:

* Object types for permissions
* Users/groups receiving permissions
* Permitted actions (e.g., view, add, change)
* Constraints limiting permissions to specific object subsets

These constraints allow for per-object permissions, enabling users to interact with specific objects based on attributes. For example, a user may only view prefixes or IPs within a certain VRF. Constraints are defined in JSON format, similar to Django ORM queries. An example constraint for reserved VLANs is:

```json
[
  {
    "vid__gte": 100,
    "vid__lt": 200
  },
  {
    "status": "reserved"
  }
]
```

For more details, refer to the permissions documentation.

NetBox supports LDAP authentication through a built-in backend for remote LDAP server authentication, with further details in the installation documentation.

Additionally, NetBox integrates with the python-social-auth library for single sign-on (SSO) options, including:

* Cognito
* GitHub & GitHub Enterprise
* GitLab
* Google
* Hashicorp Vault
* Keycloak
* Microsoft Entra ID
* Microsoft Graph
* Okta
* OIDC

Custom backends can also be created using python-social-auth's base classes. Examples for configuring SSO are available in the authentication documentation.
=== END FILE ===

**API & Integration**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/api-integration/
=== BEGIN FILE ===
# API & Integration

NetBox offers various features for integration with network tools and resources.

## REST API

NetBox's REST API, built on the Django REST Framework, allows for creating, modifying, and deleting objects using HTTP and JSON. It supports token-based authentication and is documented with OpenAPI. Example usage:

```no-highlight
curl -s -X POST \
-H "Authorization: Token $TOKEN" \
-H "Content-Type: application/json" \
http://netbox/api/ipam/prefixes/ \
--data '{"prefix": "192.0.2.0/24", "site": {"name": "Branch 12"}}'
```

API client libraries are available for Python and Go.

## GraphQL API

NetBox provides a GraphQL API for complex queries, allowing clients to retrieve specific data. It is read-only and also uses token-based authentication.

## Webhooks

Webhooks notify external systems of changes in NetBox, such as device status updates. Users can create a webhook with a receiver URL and define an event rule to trigger it. This facilitates event-based automation.

## Prometheus Metrics

NetBox features a `/metrics` view for Prometheus scrapers, utilizing the django-prometheus library.
=== END FILE ===

**Customization**
URL: https://netboxlabs.com/docs/netbox/en/stable/features/customization/
=== BEGIN FILE ===
# Customization

NetBox allows extensive customization to cater to unique user environments, including:

## Tags

- User-created tags can be assigned to most objects for organization and filtering.
- Tags can be filtered in API requests, e.g.:
  ```no-highlight
  GET /api/dcim/devices/?tag=monitored
  ```
- Multiple tags can be specified to match all assigned tags:
  ```no-highlight
  GET /api/dcim/devices/?tag=monitored&tag=deprecated
  ```

## Bookmarks

- Users can bookmark frequently visited objects, which are accessible under their profile with custom filtering and ordering.

## Custom Fields

- Administrators can create custom fields for built-in objects to store additional data.
- Supports various data types and can reference other NetBox objects.
- Custom field data is stored alongside the object and accessible via the REST API.

## Custom Links

- Custom links allow referencing external resources related to NetBox objects.
- Links can be templatized, e.g.:
  ```no-highlight
  http://server.local/vms/?name={{ object.name }}
  ```

## Custom Validation

- Custom validation rules can be configured for object creation and modification.
- Example configuration:
  ```python
  CUSTOM_VALIDATORS = {
      "dcim.device": [
          {
              "name": {
                  "regex": "[a-z]+\d{3}"
              },
              "asset_tag": {
                  "required": True
              }
          }
      ]
  }
  ```

## Export Templates

- Objects can be exported in CSV formats or custom formats via export templates using Jinja2 template code.

## Reports

- Custom Python scripts (reports) can be installed to evaluate NetBox objects against rules.
- Reports can be executed via UI, REST API, or CLI and can be scheduled.

## Custom Scripts

- Custom scripts automate tasks and can prompt for user input.
- They have full access to the Python environment and NetBox's internal mechanisms, requiring familiarity with Python and the data model.
=== END FILE ===

**Installation & Upgrade**
**Installing NetBox**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/index/
=== BEGIN FILE ===
# Installation

The document provides installation instructions for NetBox as a standalone, self-hosted application, specifically tested on Ubuntu 22.04 and CentOS 8.3. Users are advised to consult their distribution's documentation for dependency installation issues. 

The setup process includes the following steps:
1. [PostgreSQL database](1-postgresql.md)
2. [Redis](2-redis.md)
3. [NetBox components](3-netbox.md)
4. [Gunicorn](4a-gunicorn.md) or [uWSGI](4b-uwsgi.md)
5. [HTTP server](5-http-server.md)
6. [LDAP authentication](6-ldap.md) (optional)

## Requirements

| Dependency | Supported Versions |
|------------|--------------------|
| Python     | 3.10, 3.11, 3.12   |
| PostgreSQL | 12+                |
| Redis      | 4.0+               |

For users upgrading from an existing installation, a reference to the [upgrading guide](upgrading.md) is provided.
=== END FILE ===

**1. PostgreSQL**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/1-postgresql/
=== BEGIN FILE ===
# PostgreSQL Database Installation

This section covers the installation and configuration of a local PostgreSQL database, requiring PostgreSQL 12 or later. If a PostgreSQL service is already in place, proceed to the next section.

## Installation

=== "Ubuntu"

    ```no-highlight
    sudo apt update
    sudo apt install -y postgresql
    ```

=== "CentOS"

    ```no-highlight
    sudo yum install -y postgresql-server
    sudo postgresql-setup --initdb
    ```

Modify `/var/lib/pgsql/data/pg_hba.conf` for MD5 authentication:

```no-highlight
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
```

Start and enable the PostgreSQL service:

```no-highlight
sudo systemctl enable --now postgresql
```

Verify PostgreSQL installation:

```no-highlight
psql -V
```

## Database Creation

Create a database for NetBox and assign a username and password:

```no-highlight
sudo -u postgres psql
```

Within the shell, execute:

```postgresql
CREATE DATABASE netbox;
CREATE USER netbox WITH PASSWORD 'J5brHrAXFLQSif0K';
ALTER DATABASE netbox OWNER TO netbox;
\connect netbox;
GRANT CREATE ON SCHEMA public TO netbox;
```

Use a strong password for security. Exit the shell with `\q`.

## Verify Service Status

Verify authentication with the following command:

```no-highlight
$ psql --username netbox --password --host localhost netbox
```

Confirm successful connection with `\conninfo` or exit with `\q`.
=== END FILE ===

**2. Redis**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/2-redis/
=== BEGIN FILE ===
# Redis Installation

## Install Redis

Redis is an in-memory key-value store used by NetBox for caching and queuing. This section covers the installation and configuration of a local Redis instance. If a Redis service is already in place, proceed to the next section.

=== "Ubuntu"

    ```no-highlight
    sudo apt install -y redis-server
    ```

=== "CentOS"

    ```no-highlight
    sudo yum install -y redis
    sudo systemctl enable --now redis
    ```

Verify that the installed version of Redis is at least v4.0:

```no-highlight
redis-server -v
```

You may modify the Redis configuration at `/etc/redis.conf` or `/etc/redis/redis.conf`, but the default configuration is usually sufficient.

## Verify Service Status

Use the `redis-cli` utility to check if the Redis service is functional:

```no-highlight
redis-cli ping
```

A successful response will return `PONG` from the server.
=== END FILE ===

**3. NetBox**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/3-netbox/
=== BEGIN FILE ===
# NetBox Installation

This document outlines the steps for installing and configuring the NetBox application.

## Install System Packages

Install required system packages for NetBox:

!!! warning "Python 3.10 or later required"
NetBox supports Python 3.10, 3.11, and 3.12.

=== "Ubuntu"

```
sudo apt install -y python3 python3-pip python3-venv python3-dev build-essential libxml2-dev libxslt1-dev libffi-dev libpq-dev libssl-dev zlib1g-dev
```

=== "CentOS"

```
sudo yum install -y gcc libxml2-devel libxslt-devel libffi-devel libpq-devel openssl-devel redhat-rpm-config
```

Check Python version:

```
python3 -V
```

## Download NetBox

Two installation options are available: downloading a release archive or cloning the git repository.

### Option A: Download a Release Archive

Download the latest stable release from GitHub:

```
sudo wget https://github.com/netbox-community/netbox/archive/refs/tags/vX.Y.Z.tar.gz
sudo tar -xzf vX.Y.Z.tar.gz -C /opt
sudo ln -s /opt/netbox-X.Y.Z/ /opt/netbox
```

### Option B: Clone the Git Repository

Create the base directory:

```
sudo mkdir -p /opt/netbox/
cd /opt/netbox/
```

Install `git` if not already installed:

=== "Ubuntu"

```
sudo apt install -y git
```

=== "CentOS"

```
sudo yum install -y git
```

Clone the **master** branch:

```
sudo git clone -b master --depth 1 https://github.com/netbox-community/netbox.git .
```

## Create the NetBox System User

Create a system user account named `netbox`:

=== "Ubuntu"

```
sudo adduser --system --group netbox
sudo chown --recursive netbox /opt/netbox/netbox/media/
sudo chown --recursive netbox /opt/netbox/netbox/reports/
sudo chown --recursive netbox /opt/netbox/netbox/scripts/
```

=== "CentOS"

```
sudo groupadd --system netbox
sudo adduser --system -g netbox netbox
sudo chown --recursive netbox /opt/netbox/netbox/media/
sudo chown --recursive netbox /opt/netbox/netbox/reports/
sudo chown --recursive netbox /opt/netbox/netbox/scripts/
```

## Configuration

Copy the configuration example:

```
cd /opt/netbox/netbox/netbox/
sudo cp configuration_example.py configuration.py
```

Edit `configuration.py` to set:

* `ALLOWED_HOSTS`
* `DATABASE`
* `REDIS`
* `SECRET_KEY`

### ALLOWED_HOSTS

```python
ALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']
```

### DATABASE

```python
DATABASE = {
    'NAME': 'netbox',
    'USER': 'netbox',
    'PASSWORD': 'J5brHrAXFLQSif0K',
    'HOST': 'localhost',
    'PORT': '',
    'CONN_MAX_AGE': 300,
}
```

### REDIS

```python
REDIS = {
    'tasks': {
        'HOST': 'localhost',
        'PORT': 6379,
        'PASSWORD': '',
        'DATABASE': 0,
        'SSL': False,
    },
    'caching': {
        'HOST': 'localhost',
        'PORT': 6379,
        'PASSWORD': '',
        'DATABASE': 1,
        'SSL': False,
    }
}
```

### SECRET_KEY

Generate a secret key:

```
python3 ../generate_secret_key.py
```

## Optional Requirements

Install optional packages by adding them to `local_requirements.txt`.

### Remote File Storage

```
sudo sh -c "echo 'django-storages' >> /opt/netbox/local_requirements.txt"
```

### Remote Data Sources

Add libraries for integration:

```
sudo sh -c "echo 'boto3' >> /opt/netbox/local_requirements.txt"
```

### Sentry Integration

```
sudo sh -c "echo 'sentry-sdk' >> /opt/netbox/local_requirements.txt"
```

## Run the Upgrade Script

Run the upgrade script:

```
sudo /opt/netbox/upgrade.sh
```

If using a different Python version:

```
sudo PYTHON=/usr/bin/python3.10 /opt/netbox/upgrade.sh
```

## Create a Super User

Activate the virtual environment:

```
source /opt/netbox/venv/bin/activate
```

Create a superuser:

```
cd /opt/netbox/netbox
python3 manage.py createsuperuser
```

## Schedule the Housekeeping Task

Link the housekeeping script:

```
sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping
```

## Test the Application

Run the development server:

```
python3 manage.py runserver 0.0.0.0:8000 --insecure
```

Access the application at <http://127.0.0.1:8000/>. 

!!! danger "Not for production use"
The development server is for testing only.
=== END FILE ===

**4a. Gunicorn**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/4a-gunicorn/
=== BEGIN FILE ===
# Gunicorn

This page provides instructions for setting up the [gunicorn](http://gunicorn.org/) WSGI server for NetBox, which runs as a WSGI application behind an HTTP server. 

## Configuration

NetBox includes a default configuration file for gunicorn. To use it, copy the file:

```
sudo cp /opt/netbox/contrib/gunicorn.py /opt/netbox/gunicorn.py
```

You may edit this file for changes to the IP address, port number, or performance adjustments. Refer to [the Gunicorn documentation](https://docs.gunicorn.org/en/stable/configure.html) for configuration parameters.

## systemd Setup

Use systemd to control gunicorn and NetBox's background worker process. Copy the service files and reload the systemd daemon:

```
sudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/
sudo systemctl daemon-reload
```

Start and enable the services:

```
sudo systemctl enable --now netbox netbox-rq
```

Verify the WSGI service is running:

```
systemctl status netbox.service
```

Expected output includes:

```
● netbox.service - NetBox WSGI Service
     Loaded: loaded (/etc/systemd/system/netbox.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2021-08-30 04:02:36 UTC; 14h ago
       Docs: https://docs.netbox.dev/
   Main PID: 1140492 (gunicorn)
      Tasks: 19 (limit: 4683)
     Memory: 666.2M
     CGroup: /system.slice/netbox.service
             ├─1140492 /opt/netbox/venv/bin/python3 /opt/netbox/venv/bin/gunicorn --pid /va>
...
```

If the service fails to start, check logs with:

```
journalctl -eu netbox
```

Note that there is a bug in gunicorn v21.2.0 causing 502 errors under heavy load. Users may downgrade to gunicorn v20.1.0, which does not officially support Python 3.11.
=== END FILE ===

**4b. uWSGI**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/4b-uwsgi/
=== BEGIN FILE ===
# uWSGI

This document provides instructions for setting up the uWSGI WSGI server for running NetBox as a WSGI application behind an HTTP server.

## Installation

Activate the Python virtual environment and install the `pyuwsgi` package:

```no-highlight
source /opt/netbox/venv/bin/activate
pip3 install pyuwsgi
```

Add the package to `local_requirements.txt`:

```no-highlight
sudo sh -c "echo 'pyuwsgi' >> /opt/netbox/local_requirements.txt"
```

## Configuration

Copy the default configuration file for uWSGI:

```no-highlight
sudo cp /opt/netbox/contrib/uwsgi.ini /opt/netbox/uwsgi.ini
```

Edit the configuration file as needed for IP address, port number, or performance adjustments. Refer to the uWSGI documentation for parameters.

## systemd Setup

Copy service files to the systemd directory:

```no-highlight
sudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/
sudo systemctl daemon-reload
```

Update the `netbox.service` file to use uWSGI instead of gunicorn. Ensure user and group assignments are correct.

Reload the service:

```no-highlight
sudo systemctl daemon-reload
```

Start and enable the services:

```no-highlight
sudo systemctl enable --now netbox netbox-rq
```

Verify the WSGI service is running:

```no-highlight
systemctl status netbox.service
```

If the service fails to start, check logs with:

```no-highlight
journalctl -eu netbox
```

## HTTP Server Installation

Follow the NetBox HTTP Server Setup guide. After copying the configuration file, edit the `location` section to uncomment the uWSGI parameters:

```no-highlight
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8001;
        uwsgi_param Host $host;
        uwsgi_param X-Real-IP $remote_addr;
        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;
    }
```
=== END FILE ===

**5. HTTP Server**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/5-http-server/
=== BEGIN FILE ===
# HTTP Server Setup

This documentation provides example configurations for both [nginx](https://www.nginx.com/resources/wiki/) and [Apache](https://httpd.apache.org/docs/current/), applicable to any HTTP server supporting WSGI, with instructions focused on Ubuntu 20.04.

## Obtain an SSL Certificate

To enable HTTPS for NetBox, obtain a valid SSL certificate from a commercial provider, [Let's Encrypt](https://letsencrypt.org/getting-started/), or generate a self-signed certificate. Install both public and private key files on the NetBox server, readable by the `netbox` user. Use the following command for a self-signed certificate:

```no-highlight
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
-keyout /etc/ssl/private/netbox.key \
-out /etc/ssl/certs/netbox.crt
```

## HTTP Server Installation

### Option A: nginx

Install nginx:

```no-highlight
sudo apt install -y nginx
```

Copy the NetBox nginx configuration file:

```no-highlight
sudo cp /opt/netbox/contrib/nginx.conf /etc/nginx/sites-available/netbox
```

Delete the default site and create a symlink:

```no-highlight
sudo rm /etc/nginx/sites-enabled/default
sudo ln -s /etc/nginx/sites-available/netbox /etc/nginx/sites-enabled/netbox
```

Restart nginx:

```no-highlight
sudo systemctl restart nginx
```

### Option B: Apache

Install Apache:

```no-highlight
sudo apt install -y apache2
```

Copy the default configuration file:

```no-highlight
sudo cp /opt/netbox/contrib/apache.conf /etc/apache2/sites-available/netbox.conf
```

Enable required modules and the NetBox site, then restart Apache:

```no-highlight
sudo a2enmod ssl proxy proxy_http headers rewrite
sudo a2ensite netbox
sudo systemctl restart apache2
```

## Confirm Connectivity

You should now be able to connect to the HTTPS service at the specified server name or IP address. Note that configurations are minimal and may require adjustments for production environments.

## Troubleshooting

If unable to connect, check:

* Nginx/Apache is running and listening on the correct port.
* No firewall is blocking access.

For a 502 error, verify:

* WSGI worker processes (gunicorn) are running.
* Nginx/Apache connects to the correct port (default 8001).
* SELinux allows HTTP network connections with `setsebool -P httpd_can_network_connect 1`.
=== END FILE ===

**6. LDAP (Optional)**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/6-ldap/
=== BEGIN FILE ===
# LDAP Configuration

This guide details the implementation of LDAP authentication using an external server, with a fallback to built-in Django users if authentication fails.

## Install Requirements

### Install System Packages

On Ubuntu:

```
sudo apt install -y libldap2-dev libsasl2-dev libssl-dev
```

On CentOS:

```
sudo yum install -y openldap-devel python3-devel
```

### Install django-auth-ldap

Activate the Python virtual environment and install the `django-auth-ldap` package:

```
source /opt/netbox/venv/bin/activate
pip3 install django-auth-ldap
```

Add the package to `local_requirements.txt`:

```
sudo sh -c "echo 'django-auth-ldap' >> /opt/netbox/local_requirements.txt"
```

## Configuration

Enable the LDAP authentication backend in `configuration.py`:

```python
REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'
```

Create `ldap_config.py` in the same directory as `configuration.py` and define the required parameters.

### General Server Configuration

```python
import ldap

AUTH_LDAP_SERVER_URI = "ldaps://ad.example.com"
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}
AUTH_LDAP_BIND_DN = "CN=NETBOXSA, OU=Service Accounts,DC=example,DC=com"
AUTH_LDAP_BIND_PASSWORD = "demo"
LDAP_IGNORE_CERT_ERRORS = True
LDAP_CA_CERT_DIR = '/etc/ssl/certs'
LDAP_CA_CERT_FILE = '/path/to/example-CA.crt'
```

### User Authentication

```python
from django_auth_ldap.config import LDAPSearch

AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=Users,dc=example,dc=com",
                                    ldap.SCOPE_SUBTREE,
                                    "(sAMAccountName=%(user)s)")
AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=example,dc=com"
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail"
}
```

### User Groups for Permissions

```python
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

AUTH_LDAP_GROUP_SEARCH = LDAPSearch("dc=example,dc=com", ldap.SCOPE_SUBTREE,
                                    "(objectClass=group)")
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()
AUTH_LDAP_REQUIRE_GROUP = "CN=NETBOX_USERS,DC=example,DC=com"
AUTH_LDAP_MIRROR_GROUPS = True
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=active,ou=groups,dc=example,dc=com",
    "is_staff": "cn=staff,ou=groups,dc=example,dc=com",
    "is_superuser": "cn=superuser,ou=groups,dc=example,dc=com"
}
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_CACHE_TIMEOUT = 3600
```

### Authenticating with Active Directory

Modify `AUTH_LDAP_USER_SEARCH` for username formats:

```python
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "ou=Users,dc=example,dc=com",
    ldap.SCOPE_SUBTREE,
    "(|(userPrincipalName=%(user)s)(sAMAccountName=%(user)s))"
)
AUTH_LDAP_USER_DN_TEMPLATE = None
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "email": "mail",
    "first_name": "givenName",
    "last_name": "sn",
}
AUTH_LDAP_USER_QUERY_FIELD = "username"
```

### Example Configuration

```python
import ldap
from django_auth_ldap.config import LDAPSearch, NestedGroupOfNamesType

AUTH_LDAP_SERVER_URI = "ldaps://ad.example.com:3269"
AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_REFERRALS: 0
}
AUTH_LDAP_BIND_DN = "CN=NETBOXSA,OU=Service Accounts,DC=example,DC=com"
AUTH_LDAP_BIND_PASSWORD = "demo"
LDAP_IGNORE_CERT_ERRORS = False
LDAP_CA_CERT_DIR = '/etc/ssl/certs'
LDAP_CA_CERT_FILE = '/path/to/example-CA.crt'
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    "ou=Users,dc=example,dc=com",
    ldap.SCOPE_SUBTREE,
    "(|(userPrincipalName=%(user)s)(sAMAccountName=%(user)s))"
)
AUTH_LDAP_USER_DN_TEMPLATE = None
AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName",
    "email": "mail",
    "first_name": "givenName",
    "last_name": "sn",
}
AUTH_LDAP_USER_QUERY_FIELD = "username"
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    "dc=example,dc=com",
    ldap.SCOPE_SUBTREE,
    "(objectClass=group)"
)
AUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()
AUTH_LDAP_REQUIRE_GROUP = "CN=NETBOX_USERS,DC=example,DC=com"
AUTH_LDAP_MIRROR_GROUPS = True
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": "cn=active,ou=groups,dc=example,dc=com",
    "is_staff": "cn=staff,ou=groups,dc=example,dc=com",
    "is_superuser": "cn=superuser,ou=groups,dc=example,dc=com"
}
AUTH_LDAP_FIND_GROUP_PERMS = True
AUTH_LDAP_CACHE_TIMEOUT = 3600
AUTH_LDAP_ALWAYS_UPDATE_USER = True
```

## Troubleshooting LDAP

Restart the NetBox service with `systemctl restart netbox`. For logging LDAP queries, add the following configuration:

```python
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'netbox_auth_log': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/opt/netbox/local/logs/django-ldap-debug.log',
            'maxBytes': 1024 * 500,
            'backupCount': 5,
        },
    },
    'loggers': {
        'django_auth_ldap': {
            'handlers': ['netbox_auth_log'],
            'level': 'DEBUG',
        },
    },
}
```
=== END FILE ===

**Upgrading NetBox**
URL: https://netboxlabs.com/docs/netbox/en/stable/installation/upgrading/
=== BEGIN FILE ===
# Upgrading to a New NetBox Release

Upgrading NetBox is straightforward but requires reviewing release notes and backing up the current deployment. Users can upgrade directly to newer releases, except for major version increments, which require upgrading to the latest minor version first.

## 1. Review the Release Notes

Review all [release notes](../release-notes/index.md) published since the current version to identify any breaking changes.

## 2. Update Dependencies to Required Versions

NetBox dependencies include:

| Dependency | Supported Versions |
|------------|--------------------|
| Python     | 3.10, 3.11, 3.12   |
| PostgreSQL | 12+                |
| Redis      | 4.0+               |

## 3. Install the Latest Release

Upgrade by downloading the latest release package or cloning the `master` branch. Verify the installation method with:

```
ls -ld /opt/netbox /opt/netbox/.git
```

### Option A: Download a Release

Download the latest stable release:

```no-highlight
NEWVER=3.5.0
wget https://github.com/netbox-community/netbox/archive/v$NEWVER.tar.gz
sudo tar -xzf v$NEWVER.tar.gz -C /opt
sudo ln -sfn /opt/netbox-$NEWVER/ /opt/netbox
```

Copy necessary files from the old version:

```no-highlight
OLDVER=3.4.9
sudo cp /opt/netbox-$OLDVER/local_requirements.txt /opt/netbox/
sudo cp /opt/netbox-$OLDVER/netbox/netbox/configuration.py /opt/netbox/netbox/netbox/
sudo cp /opt/netbox-$OLDVER/netbox/netbox/ldap_config.py /opt/netbox/netbox/netbox/
sudo cp -pr /opt/netbox-$OLDVER/netbox/media/ /opt/netbox/netbox/
sudo cp -r /opt/netbox-$OLDVER/netbox/scripts /opt/netbox/netbox/
sudo cp -r /opt/netbox-$OLDVER/netbox/reports /opt/netbox/netbox/
sudo cp /opt/netbox-$OLDVER/gunicorn.py /opt/netbox/
```

### Option B: Clone the Git Repository

If installed at `/opt/netbox`, pull the latest master branch:

```no-highlight
cd /opt/netbox
sudo git checkout master
sudo git pull origin master
```

## 4. Run the Upgrade Script

Verify optional Python packages and run the upgrade script:

```no-highlight
sudo ./upgrade.sh
```

If Python version is below 3.10, specify the path:

```no-highlight
sudo PYTHON=/usr/bin/python3.10 ./upgrade.sh
```

The script performs various tasks including rebuilding the Python virtual environment and applying database migrations.

## 5. Restart the NetBox Services

For installations prior to v2.7.9, update systemd service files before restarting:

```no-highlight
sudo systemctl restart netbox netbox-rq
```

## 6. Verify Housekeeping Scheduling

For upgrades from versions prior to v3.0, ensure a cron task is set for nightly housekeeping:

```shell
sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping
```

Refer to the [housekeeping documentation](../administration/housekeeping.md) for more details.
=== END FILE ===

**Getting Started**
**Planning**
URL: https://netboxlabs.com/docs/netbox/en/stable/getting-started/planning/
=== BEGIN FILE ===
# Planning Your Move

This guide provides steps for planning a migration to NetBox, applicable for new installations or adding data to existing deployments.

## Identify Current Sources of Truth

Understand existing authoritative data repositories, termed "sources of truth." These must be agreed upon and well-defined. Challenges may include:

* **Multiple conflicting sources**
* **Sources with no domain defined**
* **Inaccessible data formatting**
* **No source of truth**

Identify infrastructure data domains and their sources to determine what belongs in NetBox.

## Determine What to Move

Data should be moved to NetBox if a model exists for it. NetBox supports custom fields and plugins for extending its data model. Weigh the benefits of migrating data against the effort required. NetBox is continually developed, so future support for additional objects may be possible.

## Validate Existing Data

Validation is crucial before migration. Follow the GIGO principle. Tips for ensuring valid data include:

* Start with complete, well-formatted data (JSON or CSV recommended).
* Define custom validation rules in NetBox prior to import.
* Use custom scripts for patterned data population.

## Order of Operations

A recommended order for creating or importing NetBox objects is as follows:

1. Tenant groups and tenants
2. Regions, site groups, sites, and locations
3. Rack roles and racks
4. Manufacturers, device types, and module types
5. Platforms and device roles
6. Devices and modules
7. Providers, provider accounts, and provider networks
8. Circuit types and circuits
9. Wireless LAN groups and wireless LANs
10. Route targets and VRFs
11. RIRs and aggregates
12. IP/VLAN roles
13. Prefixes, IP ranges, and IP addresses
14. VLAN groups and VLANs
15. Cluster types, cluster groups, and clusters
16. Virtual machines and VM interfaces

This order aids in a smooth workflow, though not strictly required.
=== END FILE ===

**Populating Data**
URL: https://netboxlabs.com/docs/netbox/en/stable/getting-started/populating-data/
=== BEGIN FILE ===
# Populating Data

This section discusses methods to populate data in NetBox.

## Manual Object Creation

- Use object creation forms in the user interface.
- Not ideal for large imports; better to use other methods.
- To create a new object, find the type in the navigation menu and click the "Add" button.
- If the "add" button is missing, check permissions with your NetBox administrator.
- Some object types must be created within a parent object context.

## Bulk Import (CSV/YAML)

- Supports bulk import and updating of objects using CSV data.
- CSV can be imported as raw text or by uploading a file.
- Required columns are pre-populated in the import form.
- "id" field updates existing records.
- Some models require YAML-formatted data instead of CSV.

## Scripting

- Use scripts to automate data population based on patterns.
- Scripts ensure data validity and can reconstruct existing data without manual verification.

## REST API

- The REST API allows programmatic control over object creation.
- Supports bulk creation with a single request.
- Refer to the REST API documentation for more details.
=== END FILE ===

**Configuration**
**Configuring NetBox**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/index/
=== BEGIN FILE ===
# NetBox Configuration

NetBox's configuration file controls its functionality, including database settings, security controls, and user preferences. The default configuration is generally sufficient, but certain [required parameters](./required-parameters.md) must be defined during installation. The configuration file is located at `$INSTALL_ROOT/netbox/netbox/configuration.py`, with an example provided in `configuration_example.py`. A custom configuration can be specified using the `NETBOX_CONFIGURATION` environment variable.

Some parameters can be defined in either `configuration.py` or the admin UI, with hard-coded settings in the configuration file taking precedence. Dynamic configuration parameters can be managed via the admin interface (Admin > Extras > Configuration Revisions) and may also be overridden in `configuration.py`. Supported parameters include:

* [`ALLOWED_URL_SCHEMES`](./security.md#allowed_url_schemes)
* [`BANNER_BOTTOM`](./miscellaneous.md#banner_bottom)
* [`BANNER_LOGIN`](./miscellaneous.md#banner_login)
* [`BANNER_TOP`](./miscellaneous.md#banner_top)
* [`CHANGELOG_RETENTION`](./miscellaneous.md#changelog_retention)
* [`CUSTOM_VALIDATORS`](./data-validation.md#custom_validators)
* [`DEFAULT_USER_PREFERENCES`](./default-values.md#default_user_preferences)
* [`ENFORCE_GLOBAL_UNIQUE`](./miscellaneous.md#enforce_global_unique)
* [`GRAPHQL_ENABLED`](./graphql-api.md#graphql_enabled)
* [`JOB_RETENTION`](./miscellaneous.md#job_retention)
* [`MAINTENANCE_MODE`](./miscellaneous.md#maintenance_mode)
* [`MAPS_URL`](./miscellaneous.md#maps_url)
* [`MAX_PAGE_SIZE`](./miscellaneous.md#max_page_size)
* [`PAGINATE_COUNT`](./default-values.md#paginate_count)
* [`POWERFEED_DEFAULT_AMPERAGE`](./default-values.md#powerfeed_default_amperage)
* [`POWERFEED_DEFAULT_MAX_UTILIZATION`](./default-values.md#powerfeed_default_max_utilization)
* [`POWERFEED_DEFAULT_VOLTAGE`](./default-values.md#powerfeed_default_voltage)
* [`PREFER_IPV4`](./miscellaneous.md#prefer_ipv4)
* [`RACK_ELEVATION_DEFAULT_UNIT_HEIGHT`](./default-values.md#rack_elevation_default_unit_height)
* [`RACK_ELEVATION_DEFAULT_UNIT_WIDTH`](./default-values.md#rack_elevation_default_unit_width)

The configuration file can be modified at any time, but the WSGI service must be restarted for changes to take effect:

```
$ sudo systemctl restart netbox
```

Dynamic parameters take effect immediately upon modification via the UI.
=== END FILE ===

**Required Parameters**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/required-parameters/
=== BEGIN FILE ===
# Required Configuration Settings

## ALLOWED_HOSTS

A list of valid fully-qualified domain names (FQDNs) and/or IP addresses for accessing the NetBox service. Must be defined as a list or tuple. This setting also configures `CSRF_TRUSTED_ORIGINS`. Example:

```
ALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']
```

Wildcard option:

```
ALLOWED_HOSTS = ['*']
```

---

## DATABASE

NetBox requires a PostgreSQL 12 or later database. The `DATABASE` dictionary must include:

* `NAME` - Database name
* `USER` - PostgreSQL username
* `PASSWORD` - PostgreSQL password
* `HOST` - Database server address
* `PORT` - TCP port (default is 5432)
* `CONN_MAX_AGE` - Persistent connection lifetime (default is 300)
* `ENGINE` - PostgreSQL-compatible backend

Example:

```python
DATABASE = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': 'netbox',
    'USER': 'netbox',
    'PASSWORD': 'J5brHrAXFLQSif0K',
    'HOST': 'localhost',
    'PORT': '',
    'CONN_MAX_AGE': 300,
}
```

---

## REDIS

NetBox uses Redis for background task queuing. Configuration includes:

* `HOST` - Redis server address
* `PORT` - TCP port (default is 6379)
* `USERNAME` - Redis username (if set)
* `PASSWORD` - Redis password (if set)
* `DATABASE` - Numeric database ID
* `SSL` - Use SSL connection
* `INSECURE_SKIP_TLS_VERIFY` - Disable TLS verification (not recommended)

Example:

```python
REDIS = {
    'tasks': {
        'HOST': 'redis.example.com',
        'PORT': 1234,
        'USERNAME': 'netbox',
        'PASSWORD': 'foobar',
        'DATABASE': 0,
        'SSL': False,
    },
    'caching': {
        'HOST': 'localhost',
        'PORT': 6379,
        'USERNAME': '',
        'PASSWORD': '',
        'DATABASE': 1,
        'SSL': False,
    }
}
```

### UNIX Socket Support

Example for UNIX socket connection:

```python
REDIS = {
    'tasks': {
        'URL': 'unix:///run/redis-netbox/redis.sock?db=0'
    },
    'caching': {
        'URL': 'unix:///run/redis-netbox/redis.sock?db=1'
    },
}
```

### Using Redis Sentinel

Configuration for Redis Sentinel includes:

* `SENTINELS`: List of sentinel instances
* `SENTINEL_SERVICE`: Master/service name
* `SENTINEL_TIMEOUT`: Connection timeout

Example:

```python
REDIS = {
    'tasks': {
        'SENTINELS': [('mysentinel.redis.example.com', 6379)],
        'SENTINEL_SERVICE': 'netbox',
        'SENTINEL_TIMEOUT': 10,
        'PASSWORD': '',
        'DATABASE': 0,
        'SSL': False,
    },
    'caching': {
        'SENTINELS': [
            ('mysentinel.redis.example.com', 6379),
            ('othersentinel.redis.example.com', 6379)
        ],
        'SENTINEL_SERVICE': 'netbox',
        'PASSWORD': '',
        'DATABASE': 1,
        'SSL': False,
    }
}
```

---

## SECRET_KEY

A secret string for cryptographic hashes, at least 50 characters long. Should be unique across multiple nodes. Use `$INSTALL_ROOT/netbox/generate_secret_key.py` to generate a key. Changing this key invalidates existing user sessions.
=== END FILE ===

**System**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/system/
=== BEGIN FILE ===
# System Parameters

## BASE_PATH
Default: None  
The base URL path to use when accessing NetBox. Example:  
```python
BASE_PATH = 'netbox/'
```

## DEFAULT_LANGUAGE
Default: `en-us`  
Defines the default preferred language/locale for requests.

## DOCS_ROOT
Default: `$INSTALL_ROOT/docs/`  
The filesystem path to NetBox's documentation.

## EMAIL
Configuration items for sending email:  
* `SERVER` - Email server hostname or IP  
* `PORT` - TCP port (default: `25`)  
* `USERNAME` - Authentication username  
* `PASSWORD` - Authentication password  
* `USE_SSL` - Use SSL (default: `False`)  
* `USE_TLS` - Use TLS (default: `False`)  
* `SSL_CERTFILE` - Path to SSL certificate file (optional)  
* `SSL_KEYFILE` - Path to SSL private key file (optional)  
* `TIMEOUT` - Connection timeout in seconds (default: `10`)  
* `FROM_EMAIL` - Sender address  

Note: `USE_SSL` and `USE_TLS` are mutually exclusive.  
Test email configuration:  
```no-highlight
# python ./manage.py nbshell
>>> from django.core.mail import send_mail
>>> send_mail(
  'Test Email Subject',
  'Test Email Body',
  'noreply-netbox@example.com',
  ['users@example.com'],
  fail_silently=False
)
```

## HTTP_PROXIES
Default: None  
Dictionary of HTTP proxies for outbound requests:  
```python
HTTP_PROXIES = {
    'http': 'http://10.10.1.10:3128',
    'https': 'http://10.10.1.10:1080',
}
```

## INTERNAL_IPS
Default: `('127.0.0.1', '::1')`  
List of internal IP addresses for debugging output.

## ISOLATED_DEPLOYMENT
Default: False  
Set to True for deployments without Internet access.

## JINJA2_FILTERS
Default: `{}`  
Dictionary of custom jinja2 filters. Example:  
```python
def uppercase(x):
    return str(x).upper()

JINJA2_FILTERS = {
    'uppercase': uppercase,
}
```

## LOGGING
Default logging configuration logs INFO severity or higher. Example:  
```python
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/var/log/netbox.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
        },
    },
}
```
### Available Loggers
* `netbox.<app>.<model>` - Model-specific log messages  
* `netbox.auth.*` - Authentication events  
* `netbox.api.views.*` - REST API views  
* `netbox.reports.*` - Report execution  
* `netbox.scripts.*` - Custom script execution  
* `netbox.views.*` - Web UI views  

## MEDIA_ROOT
Default: `$INSTALL_ROOT/netbox/media/`  
File path for media files storage.

## REPORTS_ROOT
Default: `$INSTALL_ROOT/netbox/reports/`  
File path for custom reports storage.

## SCRIPTS_ROOT
Default: `$INSTALL_ROOT/netbox/scripts/`  
File path for custom scripts storage.

## SEARCH_BACKEND
Default: `'netbox.search.backends.CachedValueSearchBackend'`  
Path to the desired search backend class.

## STORAGE_BACKEND
Default: None  
Backend storage engine for uploaded files. Supports integration with `django-storages` and `django-storage-swift`.

## STORAGE_CONFIG
Default: Empty  
Configuration parameters for the storage backend.

## TIME_ZONE
Default: UTC  
Time zone for dates and times.

## TRANSLATION_ENABLED
Default: True  
Enables language translation for the user interface.
=== END FILE ===

**Security**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/security/
=== BEGIN FILE ===
# Security & Authentication Parameters

## ALLOW_TOKEN_RETRIEVAL
Default: True  
If disabled, API token values will not be displayed after creation. Users must record token values beforehand.

---

## ALLOWED_URL_SCHEMES
Default: `('file', 'ftp', 'ftps', 'http', 'https', 'irc', 'mailto', 'sftp', 'ssh', 'tel', 'telnet', 'tftp', 'vnc', 'xmpp')`  
Permitted URL schemes for rendering links in NetBox. Custom schemes must include all default values.

---

## AUTH_PASSWORD_VALIDATORS  
Configures Django's password validators for local user accounts. Default configuration:

```python
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,
        },
    },
    {
        "NAME": "utilities.password_validation.AlphanumericPasswordValidator",
    },
]
```

Criteria:
* Minimum length of 12 characters.
* At least one uppercase letter, one lowercase letter, and one numeric digit.

---

## CORS_ORIGIN_ALLOW_ALL  
Default: False  
If True, accepts CORS requests from all origins.

---

## CORS_ORIGIN_WHITELIST  
## CORS_ORIGIN_REGEX_WHITELIST  
Define authorized origins for cross-site API requests. Example:

```python
CORS_ORIGIN_WHITELIST = [
    'https://example.com',
]
```

---

## CSRF_COOKIE_NAME  
Default: `csrftoken`  
Name of the cookie for CSRF authentication token.

---

## CSRF_COOKIE_SECURE  
Default: False  
If true, CSRF protection cookie is marked secure for HTTPS only.

---

## CSRF_TRUSTED_ORIGINS  
Default: `[]`  
List of trusted origins for unsafe requests. Example:

```python
CSRF_TRUSTED_ORIGINS = (
    'http://netbox.local',
    'https://netbox.local',
)
```

---

## DEFAULT_PERMISSIONS  
Default:

```python
{
    'users.view_token': ({'user': '$user'},),
    'users.add_token': ({'user': '$user'},),
    'users.change_token': ({'user': '$user'},),
    'users.delete_token': ({'user': '$user'},),
}
```

Defines object permissions for authenticated users. Custom values overwrite defaults.

---

## EXEMPT_VIEW_PERMISSIONS  
Default: Empty list  
Models exempt from view permissions. Example:

```python
EXEMPT_VIEW_PERMISSIONS = [
    'dcim.site',
    'dcim.region',
    'ipam.prefix',
]
```

---

## LOGIN_PERSISTENCE  
Default: False  
If true, resets user's authentication session lifetime upon each valid request.

---

## LOGIN_REQUIRED  
Default: True  
Only authenticated users can access NetBox.

---

## LOGIN_TIMEOUT  
Default: 1209600 seconds (14 days)  
Lifetime of the authentication cookie.

---

## LOGOUT_REDIRECT_URL  
Default: `'home'`  
Redirect URL after logout.

---

## SECURE_HSTS_INCLUDE_SUBDOMAINS  
Default: False  
If true, applies HSTS policy to all subdomains.

---

## SECURE_HSTS_PRELOAD  
Default: False  
If true, includes preload directive in HSTS header.

---

## SECURE_HSTS_SECONDS  
Default: 0  
Sets HSTS header if non-zero value is specified.

---

## SECURE_SSL_REDIRECT  
Default: False  
If true, redirects non-HTTPS requests to HTTPS.

---

## SESSION_COOKIE_NAME  
Default: `sessionid`  
Name for the session cookie.

---

## SESSION_COOKIE_SECURE  
Default: False  
If true, session cookie is marked secure for HTTPS only.

---

## SESSION_FILE_PATH  
Default: None  
Specifies local file path for session data storage instead of the database.
=== END FILE ===

**GraphQL API**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/graphql-api/
=== BEGIN FILE ===
# GraphQL API Parameters

## GRAPHQL_ENABLED

Default: True  
Setting this to False will disable the GraphQL API.

## GRAPHQL_MAX_ALIASES

Default: 10  
The maximum number of queries that a GraphQL API request may contain.
=== END FILE ===

**Remote Authentication**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/remote-authentication/
=== BEGIN FILE ===
# Remote Authentication Settings

The document outlines configuration parameters for remote authentication in NetBox, requiring `REMOTE_AUTH_ENABLED` to be true for effectiveness.

- **REMOTE_AUTH_AUTO_CREATE_GROUPS**: Default `False`. Automatically creates groups from `REMOTE_AUTH_GROUP_HEADER` if they don't exist.
  
- **REMOTE_AUTH_AUTO_CREATE_USER**: Default `False`. Automatically creates local accounts for users authenticated via a remote service.

- **REMOTE_AUTH_BACKEND**: Default `'netbox.authentication.RemoteUserBackend'`. Specifies the Django authentication backend for external user authentication. Options include:
  * `netbox.authentication.RemoteUserBackend`
  * `netbox.authentication.LDAPBackend`

- **REMOTE_AUTH_DEFAULT_GROUPS**: Default `[]`. Groups assigned to new user accounts created via remote authentication.

- **REMOTE_AUTH_DEFAULT_PERMISSIONS**: Default `{}`. Permissions mapping for new user accounts created via remote authentication.

- **REMOTE_AUTH_ENABLED**: Default `False`. Enables remote user authentication through HTTP headers.

- **REMOTE_AUTH_GROUP_HEADER**: Default `'HTTP_REMOTE_USER_GROUP'`. Name of the HTTP header for authenticated user groups.

- **REMOTE_AUTH_GROUP_SEPARATOR**: Default `|`. Separator for splitting `REMOTE_AUTH_GROUP_HEADER` into individual groups.

- **REMOTE_AUTH_GROUP_SYNC_ENABLED**: Default `False`. Enables syncing of remote user groups.

- **REMOTE_AUTH_HEADER**: Default `'HTTP_REMOTE_USER'`. Name of the HTTP header for the authenticated user.

- **REMOTE_AUTH_USER_EMAIL**: Default `'HTTP_REMOTE_USER_EMAIL'`. Header for the authenticated user's email.

- **REMOTE_AUTH_USER_FIRST_NAME**: Default `'HTTP_REMOTE_USER_FIRST_NAME'`. Header for the authenticated user's first name.

- **REMOTE_AUTH_USER_LAST_NAME**: Default `'HTTP_REMOTE_USER_LAST_NAME'`. Header for the authenticated user's last name.

- **REMOTE_AUTH_SUPERUSER_GROUPS**: Default `[]`. Groups that promote a remote user to Superuser on login.

- **REMOTE_AUTH_SUPERUSERS**: Default `[]`. Users promoted to Superuser on login.

- **REMOTE_AUTH_STAFF_GROUPS**: Default `[]`. Groups that promote a remote user to Staff on login.

- **REMOTE_AUTH_STAFF_USERS**: Default `[]`. Users promoted to Staff on login.
=== END FILE ===

**Data & Validation**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/data-validation/
=== BEGIN FILE ===
# Data & Validation Parameters

## CUSTOM_VALIDATORS

This section describes a mapping of models to custom validators defined locally for custom validation logic. An example configuration is provided:

```python
CUSTOM_VALIDATORS = {
    "dcim.site": [
        {
            "name": {
                "min_length": 5,
                "max_length": 30
            }
        },
        "my_plugin.validators.Validator1"
    ],
    "dim.device": [
        "my_plugin.validators.Validator1"
    ]
}
```

---

## FIELD_CHOICES

Static choice fields on models can be configured with custom values by defining `FIELD_CHOICES` as a dictionary mapping model fields to their choices. Each choice includes a database value, a human-friendly label, and may specify a color. Choices can replace or append to existing choices. Examples include:

To replace choices:

```python
FIELD_CHOICES = {
    'dcim.Site.status': (
        ('foo', 'Foo', 'red'),
        ('bar', 'Bar', 'green'),
        ('baz', 'Baz', 'blue'),
    )
}
```

To append choices:

```python
FIELD_CHOICES = {
    'dcim.Site.status+': (
        ...
    )
}
```

Supported model fields include:

* `circuits.Circuit.status`
* `dcim.Device.status`
* `dcim.Location.status`
* `dcim.Module.status`
* `dcim.PowerFeed.status`
* `dcim.Rack.status`
* `dcim.Site.status`
* `dcim.VirtualDeviceContext.status`
* `extras.JournalEntry.kind`
* `ipam.IPAddress.status`
* `ipam.IPRange.status`
* `ipam.Prefix.status`
* `ipam.VLAN.status`
* `virtualization.Cluster.status`
* `virtualization.VirtualMachine.status`
* `wireless.WirelessLAN.status`

Supported colors include:

* `blue`
* `indigo`
* `purple`
* `pink`
* `red`
* `orange`
* `yellow`
* `green`
* `teal`
* `cyan`
* `gray`
* `black`
* `white`

---

## PROTECTION_RULES

This section outlines a mapping of models to custom validators that evaluate an object before its deletion. If validation fails, the object is not deleted. An example configuration is:

```python
PROTECTION_RULES = {
    "dcim.site": [
        {
            "status": {
                "eq": "decommissioning"
            }
        },
        "my_plugin.validators.Validator1",
    ]
}
```
=== END FILE ===

**Default Values**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/default-values/
=== BEGIN FILE ===
# Default Value Parameters

## DEFAULT_DASHBOARD

This parameter controls the content and layout of the user's default dashboard, allowing customization of widgets. It must specify an iterable of dictionaries for each widget with the following attributes:

* `widget`: Dotted path to the Python class (required)
* `width`: Default widget width (1 to 12)
* `height`: Default widget height, in rows
* `title`: Widget title
* `color`: Color of the widget's title bar
* `config`: Dictionary of widget configuration parameters

Example configuration:

```python
DEFAULT_DASHBOARD = [
    {
        'widget': 'extras.ObjectCountsWidget',
        'width': 4,
        'height': 3,
        'title': 'Organization',
        'config': {
            'models': [
                'dcim.site',
                'tenancy.tenant',
                'tenancy.contact',
            ]
        }
    },
    {
        'widget': 'extras.ObjectCountsWidget',
        'width': 4,
        'height': 3,
        'title': 'IPAM',
        'color': 'blue',
        'config': {
            'models': [
                'ipam.prefix',
                'ipam.iprange',
                'ipam.ipaddress',
            ]
        }
    },
]
```

## DEFAULT_USER_PREFERENCES

This is a dictionary for default preferences for new user accounts. Example to set default page size:

```python
DEFAULT_USER_PREFERENCES = {
    "pagination": {
        "per_page": 100
    }
}
```

For a complete list of preferences, check `/user/preferences/`.

---

## PAGINATE_COUNT

Default: 50

Maximum number of objects to display per page.

---

## POWERFEED_DEFAULT_AMPERAGE

Default: 15

Default value for the `amperage` field when creating new power feeds.

---

## POWERFEED_DEFAULT_MAX_UTILIZATION

Default: 80

Default percentage for the `max_utilization` field when creating new power feeds.

---

## POWERFEED_DEFAULT_VOLTAGE

Default: 120

Default value for the `voltage` field when creating new power feeds.

---

## RACK_ELEVATION_DEFAULT_UNIT_HEIGHT

Default: 22

Default height (in pixels) of a unit within a rack elevation.

---

## RACK_ELEVATION_DEFAULT_UNIT_WIDTH

Default: 220

Default width (in pixels) of a unit within a rack elevation.
=== END FILE ===

**Error Reporting**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/error-reporting/
=== BEGIN FILE ===
# Error Reporting Settings

## SENTRY_DSN

Defines a Sentry data source name (DSN) for automated error reporting. `SENTRY_ENABLED` must be True for this parameter to take effect. For example:

```
SENTRY_DSN = "https://examplePublicKey@o0.ingest.sentry.io/0"
```

---

## SENTRY_ENABLED

Set to True to enable automatic error reporting via Sentry. The `sentry-sdk` Python package is required for integration.

---

## SENTRY_SAMPLE_RATE

The sampling rate for errors, must be a value between 0 (disabled) and 1.0 (report on all errors).

---

## SENTRY_SEND_DEFAULT_PII

Maps to the Sentry SDK's `send_default_pii` parameter. If enabled, certain personally identifiable information (PII) is added. Enabling this option may log sensitive data such as cookies and authentication tokens.

---

## SENTRY_TAGS

An optional dictionary of tag names and values for Sentry error reports. For example:

```
SENTRY_TAGS = {
    "custom.foo": "123",
    "custom.bar": "abc",
}
```

Avoid using tag names that begin with `netbox.`, as this prefix is reserved.

---

## SENTRY_TRACES_SAMPLE_RATE

The sampling rate for transactions, must be a value between 0 (disabled) and 1.0 (report on all transactions). A high sampling rate can induce performance penalties; a low sample rate of 10% to 20% is recommended for transaction reporting.
=== END FILE ===

**Plugins**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/plugins/
=== BEGIN FILE ===
# Plugin Parameters

## PLUGINS

Default: Empty

A list of installed NetBox plugins to enable. Plugins will not take effect unless they are listed here.

Warning: Plugins extend NetBox by allowing external code to run with the same access and privileges as NetBox itself. Only install plugins from trusted sources. The NetBox maintainers make no guarantees about the integrity or security of your installation with plugins enabled.

---

## PLUGINS_CONFIG

Default: Empty

This parameter holds configuration settings for individual NetBox plugins, defined as a dictionary with each key using the name of an installed plugin. The specific parameters supported are unique to each plugin. An example configuration is shown below:

```python
PLUGINS_CONFIG = {
    'plugin1': {
        'foo': 123,
        'bar': True
    },
    'plugin2': {
        'foo': 456,
    },
}
```

Note that a plugin must be listed in `PLUGINS` for its configuration to take effect.
=== END FILE ===

**Miscellaneous**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/miscellaneous/
=== BEGIN FILE ===
# Miscellaneous Parameters

## ADMINS
NetBox will email details about critical errors to the administrators listed here. This should be a list of (name, email) tuples. For example:
```python
ADMINS = [
    ['Hank Hill', 'hhill@example.com'],
    ['Dale Gribble', 'dgribble@example.com'],
]
```

## BANNER_BOTTOM
Sets content for the bottom banner in the user interface.

## BANNER_LOGIN
This defines custom content to be displayed on the login page above the login form. HTML is allowed.

## BANNER_MAINTENANCE
This adds a banner to the top of every page when maintenance mode is enabled. HTML is allowed.

## BANNER_TOP
Sets content for the top banner in the user interface.
If you'd like the top and bottom banners to match, set the following:
```python
BANNER_TOP = 'Your banner text'
BANNER_BOTTOM = BANNER_TOP
```

## CENSUS_REPORTING_ENABLED
Default: True. Enables anonymous census reporting. To opt out, set this to False.

## CHANGELOG_RETENTION
Default: 90. The number of days to retain logged changes. Set to `0` for indefinite retention.

## CHANGELOG_SKIP_EMPTY_CHANGES
Default: True. If enabled, a change log record will not be created when an object is updated without changes.

## DATA_UPLOAD_MAX_MEMORY_SIZE
Default: `2621440` (2.5 MB). The maximum size of an incoming HTTP request.

## DJANGO_ADMIN_ENABLED
Default: False. Setting this to True installs the `django.contrib.admin` app.

## ENFORCE_GLOBAL_UNIQUE
Default: True. Prevents the creation of duplicate prefixes and IP addresses globally.

## FILE_UPLOAD_MAX_MEMORY_SIZE
Default: `2621440` (2.5 MB). The maximum amount of uploaded data held in memory.

## JOB_RETENTION
Default: 90. The number of days to retain job results. Set to `0` for indefinite retention.

## MAINTENANCE_MODE
Default: False. Setting this to True displays a maintenance mode banner and stops updating user activity.

## MAPS_URL
Default: `https://maps.google.com/?q=`. Specifies the URL for presenting a map.

## MAX_PAGE_SIZE
Default: 1000. Defines the maximum acceptable limit for objects requested via URL.

## METRICS_ENABLED
Default: False. Toggle the availability of Prometheus-compatible metrics.

## PREFER_IPV4
Default: False. Set to True to prefer IPv4 over IPv6 when determining the primary IP address.

## QUEUE_MAPPINGS
Allows changing which queues are used internally for background tasks.
```python
QUEUE_MAPPINGS = {
    'webhook': 'low',
    'report': 'high',
    'script': 'high',
}
```

## RELEASE_CHECK_URL
Default: None. Defines the URL for checking new NetBox releases.

## RQ_DEFAULT_TIMEOUT
Default: `300`. The maximum execution time of a background task in seconds.

## RQ_RETRY_INTERVAL
Default: `60`. Controls how frequently a failed job is retried.

## RQ_RETRY_MAX
Default: `0` (retries disabled). The maximum number of times a background task will be retried.
=== END FILE ===

**Development**
URL: https://netboxlabs.com/docs/netbox/en/stable/configuration/development/
=== BEGIN FILE ===
# Development Parameters

## DEBUG

Default: False

This setting enables debugging, which should only be used during development or troubleshooting. Only clients accessing NetBox from a recognized internal IP address will see debugging tools.

!!! warning
    Never enable debugging on a production system, as it can expose sensitive data and impact performance.

---

## DEVELOPER

Default: False

This parameter prevents potentially dangerous actions, such as generating new database schema migrations. Enabling this setting also disables the debug warning banner in the UI. Set this to `True` only if actively developing the NetBox code base.
=== END FILE ===

**Customization**
**Custom Fields**
URL: https://netboxlabs.com/docs/netbox/en/stable/customization/custom-fields/
=== BEGIN FILE ===
# Custom Fields

Each model in NetBox is represented in the database as a discrete table, with attributes as columns. Custom fields allow users to store additional attributes that are not part of the core schema, stored as JSON data alongside each object.

## Creating Custom Fields

Custom fields can be created via Customization > Custom Fields. Supported types include:

* Text
* Long text
* Integer
* Decimal
* Boolean
* Date
* Date & time
* URL
* JSON
* Selection
* Multiple selection
* Object
* Multiple object

Each custom field requires a name, a human-friendly label, a weight, and can have a description. Fields can be marked as required and can have default values. Custom fields must be assigned to one or more object types.

### Filtering

Filter logic can be set to loose (default) or exact matching, with an option to disable filtering.

### Grouping

Custom fields can be grouped by assigning the same group name, appearing under a single heading in the UI.

### Visibility & Editing

Display conditions include:

* **Always** (default)
* **If Set**
* **Hidden**

Editing conditions include:

* **Yes** (default)
* **No**
* **Hidden**

### Validation

Limited validation types include:

* Text: Regular expression
* Integer: Min/max value
* Selection: Must match prescribed choices

### Custom Selection Fields

Selection fields require a choice set with at least two choices, and default values must match provided choices.

### Custom Object Fields

These fields refer to specific NetBox objects and must define an `object_type`. Filtering can be applied using `query_params`.

## Custom Fields in Templates

Custom field data can be accessed in Jinja2 templates via the `cf` property.

## Custom Fields and the REST API

Custom data is included in the `custom_fields` attribute when retrieving objects via the REST API. To set or change values, include nested JSON data.
=== END FILE ===

**Custom Links**
URL: https://netboxlabs.com/docs/netbox/en/stable/customization/custom-links/
=== BEGIN FILE ===
# Custom Links

Custom links enable users to display hyperlinks to external content within NetBox object views, facilitating cross-referencing with external systems. They are created via Customization > Custom Links and are associated with specific NetBox object types. Each link includes display text and a URL, with the option to incorporate data from the viewed NetBox item using Jinja2 template code.

Example link definition:
* Text: `View NMS`
* URL: `https://nms.example.com/nodes/?name={{ object.name }}`

For a device named Router4, the rendered link would be:

```no-highlight
<a href="https://nms.example.com/nodes/?name=Router4">View NMS</a>
```

Links appear as buttons in the top right corner, can be ordered using numeric weighting, and can be individually enabled or disabled. 

**Warning:** Custom links rely on user-created code for HTML output, which can pose security risks. Only trusted users should be allowed to create or modify them.

## Context Data

Available context data for rendering custom links includes:

| Variable  | Description                                                                                                       |
|-----------|-------------------------------------------------------------------------------------------------------------------|
| `object`  | The NetBox object being displayed                                                                                 |
| `debug`   | A boolean indicating whether debugging is enabled                                                                 |
| `request` | The current WSGI request                                                                                          |
| `user`    | The current user (if authenticated)                                                                               |
| `perms`   | The permissions assigned to the user                                                                              |

The `object` variable will be an instance of the specific object being viewed, and its attributes can be determined through the REST API representation or the NetBox source code.

## Conditional Rendering

Links with non-empty text are included on the page. Conditional Jinja2 logic can be used to control link rendering. For example, to display a link for active devices:

```jinja2
{% if object.status == 'active' %}View NMS{% endif %}
```

Or to show links for devices from a specific manufacturer:

```jinja2
{% if object.device_type.manufacturer.name == 'Cisco' %}View NMS{% endif %}
```

## Link Groups

Links can be organized into groups, rendering as a dropdown menu under a single button with the group's name.

## Table Columns

Custom links can be included in object tables by selecting them in the table configuration. Each link will render as a hyperlink, and when exported (e.g., as CSV), only the URL will be displayed.
=== END FILE ===

**Custom Validation**
URL: https://netboxlabs.com/docs/netbox/en/stable/customization/custom-validation/
=== BEGIN FILE ===
# Custom Validation

NetBox validates objects before database entry to ensure data integrity, but custom validation rules can be added. Custom validation rules map object attributes to specific rules. For example:

```json
{
  "name": {
    "min_length": 5,
    "max_length": 30
  }
}
```

This checks that the `name` attribute is between 5 and 30 characters long, executed after NetBox's internal validation.

### Validation Types

The `CustomValidator` class supports several validation types:

* `min`: Minimum value
* `max`: Maximum value
* `min_length`: Minimum string length
* `max_length`: Maximum string length
* `regex`: Regular expression application
* `required`: Value must be specified
* `prohibited`: Value must not be specified
* `eq`: Value must equal specified value
* `neq`: Value must not equal specified value

### Custom Validation Logic

For more complex validation, extend the `CustomValidator` class and override the `validate()` method:

```python
from extras.validators import CustomValidator

class MyValidator(CustomValidator):

    def validate(self, instance, request):
        if instance.status == 'active' and not instance.description:
            self.fail("Active sites must have a description set!", field='status')
```

### Assigning Custom Validators

Custom validators are linked to NetBox models via the `CUSTOM_VALIDATORS` configuration parameter. They can be defined in three ways:

1. Plain JSON mapping
2. Dotted path to a custom validator class
3. Direct reference to a custom validator class

#### Plain Data

For simple rules, use JSON-compatible objects:

```python
CUSTOM_VALIDATORS = {
    "dcim.site": [
        {
            "name": {
                "min_length": 5,
                "max_length": 30,
            }
        }
    ],
    "dcim.device": [
        {
            "platform": {
                "required": True,
            }
        }
    ]
}
```

#### Referencing Related Object Attributes

Attributes of related objects can be referenced using a dotted path:

```python
CUSTOM_VALIDATORS = {
    "dcim.site": [
        {
            "region.name": {
                "neq": "New York"
            }
        }
    ]
}
```

#### Validating Request Parameters

Custom validators can also validate request parameters:

```json
{
  "request.user.username": {
    "eq": "admin"
  }
}
```

### Dotted Path to Class

Custom validator classes can be referenced by their Python path:

```python
CUSTOM_VALIDATORS = {
    'dcim.site': (
        'my_validators.Validator1',
        'my_validators.Validator2',
    ),
    'dcim.device': (
        'my_validators.Validator3',
    )
}
```

### Direct Class Reference

Classes can be imported directly in the configuration file:

```python
from my_validators import Validator1, Validator2, Validator3

CUSTOM_VALIDATORS = {
    'dcim.site': (
        Validator1(),
        Validator2(),
    ),
    'dcim.device': (
        Validator3(),
    )
}
```
=== END FILE ===

**Export Templates**
URL: https://netboxlabs.com/docs/netbox/en/stable/customization/export-templates/
=== BEGIN FILE ===
# Export Templates

NetBox allows users to create custom export templates for various object types via Customization > Export Templates. Each template must have a name and can optionally specify a MIME type and/or file extension. Templates are written in Jinja2.

- The name `table` is reserved for internal use.
- Export templates may pose security risks; only trusted users should modify them.

The `queryset` variable contains the list of objects for rendering, typically iterated with a `for` loop. Object properties can be accessed by name:

```jinja2
{% for rack in queryset %}
Rack: {{ rack.name }}
Site: {{ rack.site.name }}
Height: {{ rack.u_height }}U
{% endfor %}
```

Custom fields are accessed using the `cf` attribute, e.g., `{{ obj.cf.color }}`. To use config context data, utilize `get_config_context`:

```
{% for server in queryset %}
{% set data = server.get_config_context() %}
{{ data.syslog }}
{% endfor %}
```

The `as_attachment` attribute determines if the content is downloadable or displayed in the browser, with a default MIME type of `text/plain`.

## REST API Integration

For authentication, export templates should be rendered via the REST API when `LOGIN_REQUIRED` is enabled. Use a `GET` request with the `export` parameter:

```
GET /api/dcim/sites/?export=MyTemplateName
```

The response will contain only the rendered content.

## Example

An example device export template for Nagios configuration:

```
{% for device in queryset %}{% if device.status and device.primary_ip %}define host{
        use                     generic-switch
        host_name               {{ device.name }}
        address                 {{ device.primary_ip.address.ip }}
}
{% endif %}{% endfor %}
```

Generated output:

```
define host{
        use                     generic-switch
        host_name               switch1
        address                 192.0.2.1
}
define host{
        use                     generic-switch
        host_name               switch2
        address                 192.0.2.2
}
define host{
        use                     generic-switch
        host_name               switch3
        address                 192.0.2.3
}
```
=== END FILE ===

**Reports**
URL: https://netboxlabs.com/docs/netbox/en/stable/customization/reports/
=== BEGIN FILE ===
# NetBox Reports

Reports are deprecated starting with NetBox v4.0, merging functionality with [custom scripts](./custom-scripts.md). Users should convert legacy reports to custom scripts soon, as support for legacy reports will be removed in future releases.

## Converting Reports to Scripts

### Step 1: Update Class Definition

Change the parent class from `Report` to `Script`:

```python title="Old code"
from extras.reports import Report

class MyReport(Report):
```

```python title="New code"
from extras.scripts import Script

class MyReport(Script):
```

### Step 2: Update Logging Calls

Logging methods differ between reports and scripts. Replace the generic `log()` method with `log_info()`. Use the following table for reference:

| Report (old)                  | Script (New)                |
|-------------------------------|-----------------------------|
| `log(message)`                | `log_info(message)`         |
| `log_debug(obj, message)`[^1] | `log_debug(message, obj)`   |
| `log_info(obj, message)`      | `log_info(message, obj)`    |
| `log_success(obj, message)`   | `log_success(message, obj)` |
| `log_warning(obj, message)`   | `log_warning(message, obj)` |
| `log_failure(obj, message)`   | `log_failure(message, obj)` |

[^1]: `log_debug()` was added to the Report class in v4.0 to avoid confusion with the same method on Script.

Example update:

```python title="Old code"
self.log_failure(
    console_port.device,
    f"No console connection defined for {console_port.name}"
)
```

```python title="New code"
self.log_failure(
    f"No console connection defined for {console_port.name}",
    obj=console_port.device,
)
```

### Other Notes

Reports will convert to scripts automatically upon upgrading to NetBox v4.0, retaining previous job history. Users should convert legacy reports into custom scripts as soon as possible. The `pre_run()` and `post_run()` methods from Report are carried over to Script and called automatically. The `is_valid()` method on Report has been removed.
=== END FILE ===

**Custom Scripts**
URL: https://netboxlabs.com/docs/netbox/en/stable/customization/custom-scripts/
=== BEGIN FILE ===
# Custom Scripts

Custom scripting in NetBox allows users to execute custom logic within the UI, enabling data manipulation for various tasks such as:

* Automatically populating devices and cables for new site deployments
* Creating reserved prefixes or IP addresses
* Importing external data into NetBox
* Updating invalid or incomplete data

Scripts can validate data integrity by checking conditions like:

* Console connections for top-of-rack switches
* Loopback interfaces for routers
* Interface description formats
* Minimum VLANs for sites
* Parent prefixes for IP addresses

Custom scripts are Python code outside the NetBox code base, allowing updates without affecting the core installation. They have unrestricted access to the database, so only trusted scripts should be installed.

## Writing Custom Scripts

Scripts must inherit from the `extras.scripts.Script` base class, which provides form generation and logging functionality.

```python
from extras.scripts import Script

class MyScript(Script):
    ...
```

Scripts consist of variables and a `run()` method, which contains the execution logic. The `run()` method accepts:

* `data` - Dictionary of variable data
* `commit` - Boolean for database changes

Output appears under the "output" tab in the UI. Scripts can be ordered using the `script_order` variable.

```python
script_order = (MyCustomScript, AnotherCustomScript)
```

## Script Attributes

Attributes are defined in a `Meta` class and include:

### `name`
Human-friendly script name.

### `description`
Description of script functionality.

### `field_order`
Defines the order of script variables in the form.

### `fieldsets`
Groups and orders variables in the form.

```python
class MyScript(Script):
    class Meta:
        fieldsets = (
            ('First group', ('field1', 'field2', 'field3')),
            ('Second group', ('field4', 'field5')),
        )
```

### `commit_default`
Sets default state of the commit checkbox.

### `scheduling_enabled`
Enables or disables script scheduling.

### `job_timeout`
Sets maximum runtime for the script.

## Accessing Request Data

Current HTTP request details are available via `self.request`, allowing access to the executing user and client IP address.

## Reading Data from Files

Use `load_yaml` and `load_json` methods to read data from files.

## Logging

Logging functions include:

* `log_debug(message=None, obj=None)`
* `log_success(message=None, obj=None)`
* `log_info(message=None, obj=None)`
* `log_warning(message=None, obj=None)`
* `log_failure(message=None, obj=None)`

## Test Methods

Define test methods prefixed with `test_` to check conditions during script execution.

### Example

```python
class DeviceConnectionsReport(Script):
    description = "Validate the minimum physical connections for each device"

    def test_console_connection(self):
        ...
```

## Change Logging

Take a snapshot of an object before editing to generate change log data.

```python
if obj.pk and hasattr(obj, 'snapshot'):
    obj.snapshot()
```

## Error Handling

Use `AbortScript` to cleanly abort execution without a stack trace.

```python
from utilities.exceptions import AbortScript

if some_error:
    raise AbortScript("Some meaningful error message")
```

## Variable Reference

### Default Options

All script variables support options like `default`, `description`, `label`, `required`, and `widget`.

### Variable Types

* `StringVar`
* `TextVar`
* `IntegerVar`
* `BooleanVar`
* `ChoiceVar`
* `MultiChoiceVar`
* `ObjectVar`
* `MultiObjectVar`
* `FileVar`
* `IPAddressVar`
* `IPAddressWithMaskVar`
* `IPNetworkVar`
* `DateVar`
* `DateTimeVar`

## Running Custom Scripts

Users must have specific permissions to run scripts.

### Via the Web UI

Run scripts through the UI by completing the form and clicking "run script".

### Via the API

Use a POST request to run a script via the API.

```no-highlight
curl -X POST \
-H "Authorization: Token $TOKEN" \
-H "Content-Type: application/json" \
-H "Accept: application/json; indent=4" \
http://netbox/api/extras/scripts/example.MyReport/ \
--data '{"data": {"foo": "somevalue", "bar": 123}, "commit": true}'
```

### Via the CLI

Invoke scripts using the management command.

```
python3 manage.py runscript [--commit] [--loglevel {debug,info,warning,error,critical}] [--data "<data>"] <module>.<script>
```

## Example

An example script for creating new objects for a planned site prompts for:

* Site name
* Device model
* Number of access switches

```python
class NewBranchScript(Script):
    ...
```
=== END FILE ===

**Integrations**
**REST API**
URL: https://netboxlabs.com/docs/netbox/en/stable/integrations/rest-api/
=== BEGIN FILE ===
# REST API Overview

## What is a REST API?

REST stands for representational state transfer. It's a type of API that uses HTTP requests and JSON for CRUD operations on application objects. The operations correspond to HTTP verbs:

* `GET`: Retrieve an object or list of objects
* `POST`: Create an object
* `PUT` / `PATCH`: Modify an existing object
* `DELETE`: Delete an existing object

The `OPTIONS` verb can inspect a REST API endpoint for supported actions and parameters.

A key benefit of REST APIs is their ease of use, allowing interaction with data via command-line tools. For example, to request an IP address from NetBox:

```no-highlight
curl -s http://netbox/api/ipam/ip-addresses/2954/ | jq '.'
```

```json
{
  "id": 2954,
  ...
}
```

## Interactive Documentation

Interactive documentation for all REST API endpoints is available at `/api/schema/swagger-ui/` on a running NetBox instance.

## Endpoint Hierarchy

NetBox's REST API is structured under `https://<hostname>/api/`, divided by application. Each application has paths for its models:

* `/api/circuits/providers/`
* `/api/dcim/sites/`

Each model has a list view and a detail view, referenced by their numeric primary key (`id`).

* `/api/dcim/devices/` - List or create devices
* `/api/dcim/devices/123/` - Retrieve, update, or delete device with ID 123

Query parameters can filter and order lists of objects.

## Serialization

Objects are represented in two ways: complete or brief. The base serializer presents a complete view, while brief representations include only essential attributes.

```json
{
    "id": 1048,
    ...
}
```

### Related Objects

Related objects are included using nested brief representations. When performing write actions, related objects can be specified by numeric ID or unique attributes.

### Generic Relations

Some objects reference multiple types, requiring both `assigned_object_type` and `assigned_object_id` to identify a unique object.

```no-highlight
curl -X POST \
-H "Authorization: Token $TOKEN" \
http://netbox/api/ipam/ip-addresses/ \
--data '{
    "address": "192.0.2.1/24",
    "assigned_object_type": "dcim.interface",
    "assigned_object_id": 69023
}'
```

### Brief Format

Most endpoints support a "brief" format, returning minimal representations of objects.

### Excluding Config Contexts

To improve performance, context data can be excluded from responses by adding `?exclude=config_context`.

## Pagination

Responses containing lists of objects are paginated. The root JSON object includes:

* `count`: Total number of objects
* `next`: Link to the next page
* `previous`: Link to the previous page
* `results`: Current page objects

Example of a paginated response:

```json
{
    "count": 2861,
    "next": "http://netbox/api/dcim/devices/?limit=50&offset=50",
    ...
}
```

## Interacting with Objects

### Retrieving Multiple Objects

Make a `GET` request to the model's list endpoint.

```no-highlight
curl -s -X GET http://netbox/api/ipam/ip-addresses/ | jq '.'
```

### Retrieving a Single Object

Make a `GET` request to the model's detail endpoint with its ID.

```no-highlight
curl -s -X GET http://netbox/api/ipam/ip-addresses/5618/ | jq '.'
```

### Creating a New Object

Make a `POST` request to the model's list endpoint with JSON data.

```no-highlight
curl -s -X POST \
-H "Authorization: Token $TOKEN" \
http://netbox/api/ipam/prefixes/ \
--data '{"prefix": "192.0.2.0/24", "site": 6}' | jq '.'
```

### Creating Multiple Objects

Make a `POST` request with a list of JSON objects.

```no-highlight
curl -X POST -H "Authorization: Token $TOKEN" \
http://netbox/api/dcim/sites/ \
--data '[
{"name": "Site 1", ...},
{"name": "Site 2", ...}
]'
```

### Updating an Object

Make a `PATCH` request to the model's detail endpoint.

```no-highlight
curl -s -X PATCH \
-H "Authorization: Token $TOKEN" \
http://netbox/api/ipam/prefixes/18691/ \
--data '{"status": "reserved"}' | jq '.'
```

### Updating Multiple Objects

Issue a `PATCH` request to the model's list endpoint.

```no-highlight
curl -s -X PATCH \
-H "Authorization: Token $TOKEN" \
http://netbox/api/dcim/sites/ \
--data '[{"id": 10, "status": "active"}, ...]'
```

### Deleting an Object

Make a `DELETE` request to the model's detail endpoint.

```no-highlight
curl -s -X DELETE \
-H "Authorization: Token $TOKEN" \
http://netbox/api/ipam/prefixes/18691/
```

### Deleting Multiple Objects

Issue a `DELETE` request to the model's list endpoint.

```no-highlight
curl -s -X DELETE \
-H "Authorization: Token $TOKEN" \
http://netbox/api/dcim/sites/ \
--data '[{"id": 10}, ...]'
```

## Authentication

The NetBox REST API uses token-based authentication. Tokens are unique identifiers for user accounts.

### Tokens

Users can create and manage their own tokens. Each token has a 160-bit key and can be set to expire.

### Restricting Write Operations

Tokens can be restricted to read operations only.

#### Client IP Restriction

Tokens can be restricted by client IP address.

#### Creating Tokens for Other Users

Tokens can be provisioned for other users with appropriate permissions.

### Authenticating to the API

Attach the token to requests using the `Authorization` header.

```
$ curl -H "Authorization: Token $TOKEN" ...
```

### Initial Token Provisioning

Tokens can be created via the REST API using valid username and password.

## HTTP Headers

### `API-Version`

Specifies the API version in use.

### `X-Request-ID`

Specifies a unique ID for the API request, useful for correlating requests with change records.
=== END FILE ===

**GraphQL API**
URL: https://netboxlabs.com/docs/netbox/en/stable/integrations/graphql-api/
=== BEGIN FILE ===
# GraphQL API Overview

NetBox offers a read-only GraphQL API alongside its REST API, powered by Strawberry Django.

## Queries

- Queries are made to the `/graphql` endpoint.
- Example request to get circuit ID and provider name for active circuits:

```
curl -H "Authorization: Token $TOKEN" \
-H "Content-Type: application/json" \
-H "Accept: application/json" \
http://netbox/graphql/ \
--data '{"query": "query {circuit_list(status:\"active\") {cid provider {name}}}"}'
```

- Example JSON response:

```json
{
  "data": {
    "circuits": [
      {
        "cid": "1002840283",
        "provider": {
          "name": "CenturyLink"
        }
      },
      {
        "cid": "1002840457",
        "provider": {
          "name": "CenturyLink"
        }
      }
    ]
  }
}
```

- Recommended to use a JSON parser like `jq` for readability.
- Query types:
  * `$OBJECT`: Returns a single object by ID.
  * `$OBJECT_list`: Returns a list of objects with optional filters.

## Filtering

- Filters are key-value pairs in parentheses after the query name.
- Example to get active sites in North Carolina:

```
query {
  site_list(filters: {region: "us-nc", status: "active"}) {
    name
  }
}
```

- Filtering on related objects:

```
{
  device_list {
    id
    name
    interfaces(filters: {enabled: true}) {
      name
    }
  }
}
```

## Multiple Return Types

- Queries can return multiple object types using inline fragments:

```
{
    cable_list {
      id
      a_terminations {
        ... on CircuitTerminationType {
          id
          class_type
        }
        ... on ConsolePortType {
          id
          class_type
        }
        ... on ConsoleServerPortType {
          id
          class_type
        }
      }
    }
}
```

## Authentication

- Uses the same authentication tokens as the REST API, included in requests as:

```
Authorization: Token $TOKEN
```

## Disabling the GraphQL API

- Can be disabled by setting the `GRAPHQL_ENABLED` configuration parameter to False and restarting NetBox.
=== END FILE ===

**Webhooks**
URL: https://netboxlabs.com/docs/netbox/en/stable/integrations/webhooks/
=== BEGIN FILE ===
# Webhooks

NetBox allows configuration of outgoing webhooks via [Event Rules](../features/event-rules.md) to respond to internal object changes. This enables automation, such as configuring monitoring systems based on device status changes. Webhooks are sent automatically when conditions are met.

**Security Notice**: User-submitted code can be included in webhooks, posing security risks. Only trusted users should be allowed to create or modify webhooks.

## Jinja2 Template Support

[Jinja2 templating](https://jinja.palletsprojects.com/) is available for `URL`, `additional_headers`, and `body_template` fields, allowing customization of request headers and body. For example, to trigger a Slack message when an IP address is created:

* Object type: IPAM > IP address
* HTTP method: `POST`
* URL: Slack incoming webhook URL
* HTTP content type: `application/json`
* Body template: `{"text": "IP address {{ data['address'] }} was created by {{ username }}!"}`

### Available Context

Available context for Jinja2 templates includes:

* `event`: Type of event (created, updated, deleted)
* `model`: NetBox model that triggered the change
* `timestamp`: Event occurrence time (ISO 8601 format)
* `username`: User account name associated with the change
* `request_id`: Unique request ID
* `data`: Current state representation of the object
* `snapshots`: Minimal object state snapshots before and after the change

### Default Request Body

If no body template is specified, the request body defaults to a JSON object with context data. For example, a newly created site might look like:

```json
{
    "event": "created",
    "timestamp": "2021-03-09 17:55:33.968016+00:00",
    "model": "site",
    "username": "jstretch",
    "request_id": "fdbca812-3142-4783-b364-2e2bd5c16c6a",
    "data": {
        "id": 19,
        "name": "Site 1",
        "slug": "site-1",
        "status": {
            "value": "active",
            "label": "Active",
            "id": 1
        },
        "region": null
    },
    "snapshots": {
        "prechange": null,
        "postchange": {
            "created": "2021-03-09",
            "last_updated": "2021-03-09T17:55:33.851Z",
            "name": "Site 1",
            "slug": "site-1",
            "status": "active"
        }
    }
}
```

**Note**: Conditional webhooks have been moved to [Event Rules](../features/event-rules.md) since NetBox 3.7.

## Webhook Processing

Webhooks are processed using [Event Rules](../features/event-rules.md) and placed into a Redis queue, allowing user requests to complete without delay. The `rqworker` process extracts webhooks from the queue and sends HTTP requests. Successful requests receive a 2XX status code; failed requests can be requeued.

## Troubleshooting

To verify outgoing webhook content, modify the target URL to `http://localhost:9000/` and start the webhook receiver service:

```no-highlight
$ python netbox/manage.py webhook_receiver
Listening on port http://localhost:9000. Stop with CONTROL-C.
```

Test the receiver with:

```no-highlight
$ curl -X POST http://localhost:9000 --data '{"foo": "bar"}'
```

The server will print request details. If no output appears, ensure the `rqworker` process is running and events are queued. Webhook results are available in the NetBox admin UI under Background Tasks.
=== END FILE ===

**Synchronized Data**
URL: https://netboxlabs.com/docs/netbox/en/stable/integrations/synchronized-data/
=== BEGIN FILE ===
# Synchronized Data

Some NetBox models allow automatic synchronization of attributes from remote data sources, such as a git repository on GitHub or GitLab. This data is synchronized locally in NetBox as data files.

!!! note "Permissions"
    A user must have the `core.sync_datasource` permission to synchronize local files from a remote data source, which involves creating a permission for the "Core > Data Source" object type with the `sync` action and assigning it to the user or group.

The following features support synchronized data:

* [Configuration templates](../features/configuration-rendering.md)
* [Configuration context data](../features/context-data.md)
* [Export templates](../customization/export-templates.md)
=== END FILE ===

**Prometheus Metrics**
URL: https://netboxlabs.com/docs/netbox/en/stable/integrations/prometheus-metrics/
=== BEGIN FILE ===
# Prometheus Metrics

NetBox can expose native Prometheus metrics via the `/metrics` HTTP endpoint, configurable with the `METRICS_ENABLED` setting, which is off by default. Prometheus is a widely used time series metric platform for monitoring.

## Metric Types

NetBox utilizes the django-prometheus library to export various metrics, including:

- Per model insert, update, and delete counters
- Per view request counters
- Per view request latency histograms
- Request body size histograms
- Response body size histograms
- Response code counters
- Database connection, execution, and error counters
- Cache hit, miss, and invalidation counters
- Django middleware latency histograms
- Other Django related metadata metrics

For a complete list of metrics, visit the `/metrics` endpoint on your NetBox instance.

## Multi Processing Notes

In a multiprocess deployment (e.g., multiple Gunicorn workers), a shared directory is needed for the Prometheus client library to collect metrics. Create a local directory with read and write access for worker processes and set the `prometheus_multiproc_dir` environment variable in your WSGI service.

!!! warning
    For accurate long-term metrics in a multiprocess environment, using the `uwsgi` library is recommended over `gunicorn` due to differences in how they manage worker processes. If using NetBox with gunicorn in a containerized environment with one process per container, switching to `uwsgi` may not be necessary. More details are available in [issue #3779](https://github.com/netbox-community/netbox/issues/3779#issuecomment-590547562).
=== END FILE ===

**Plugins**
**About Plugins**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/index/
=== BEGIN FILE ===
# Plugins

Plugins are packaged Django apps that enhance NetBox with custom functionality. Users can install community plugins or create their own. 

## Capabilities

The NetBox plugin architecture allows for the following:

* **Add new data models.** Introduce models to hold data.
* **Add new URLs and views.** Register URLs under the `/plugins` path.
* **Add content to existing model templates.** Inject custom HTML content in core model views.
* **Add navigation menu items.** Register new links in the navigation menu with action buttons.
* **Add custom middleware.** Register custom Django middleware.
* **Declare configuration parameters.** Define configuration parameters in `PLUGINS_CONFIG` in `configuration.py`.
* **Limit installation by NetBox version.** Specify compatible NetBox versions.

## Limitations

Plugins have restrictions in their interaction with NetBox core:

* **Modify core models.** Cannot alter or override core models.
* **Register URLs outside the `/plugins` root.** All URLs must be within this path.
* **Override core templates.** Cannot manipulate or remove core content.
* **Modify core settings.** Cannot alter or delete core configuration.
* **Disable core components.** Cannot disable or hide core components.
=== END FILE ===

**Installing a Plugin**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/installation/
=== BEGIN FILE ===
# Installing a Plugin

The document outlines the general process for installing and configuring a NetBox plugin, emphasizing the need to consult specific plugin documentation. 

## Install the Python Package

Install the plugin's Python package using `pip` within NetBox's virtual environment:

```no-highlight
$ source /opt/netbox/venv/bin/activate
(venv) $ pip install <package>
```

Alternatively, use:

```no-highlight
python setup.py install
```

For temporary development installation:

```no-highlight
python setup.py develop
```

## Enable the Plugin

Add the plugin's name to the `PLUGINS` list in `configuration.py`:

```python
PLUGINS = [
    # ...
    'plugin_name',
]
```

## Configure the Plugin

Define any required configuration in `configuration.py` under `PLUGINS_CONFIG`:

```no-highlight
PLUGINS_CONFIG = {
    'plugin_name': {
        'foo': 'bar',
        'buzz': 'bazz'
    }
}
```

## Run Database Migrations

Run schema migrations if new database models are introduced:

```no-highlight
(venv) $ cd /opt/netbox/netbox/
(venv) $ python3 manage.py migrate
```

## Collect Static Files

Copy static resources to the static root directory:

```no-highlight
(venv) $ cd /opt/netbox/netbox/
(venv) $ python3 manage.py collectstatic
```

### Restart WSGI Service

Restart the WSGI service and RQ workers:

```no-highlight
# sudo systemctl restart netbox netbox-rq
```
=== END FILE ===

**Removing a Plugin**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/removal/
=== BEGIN FILE ===
# Removing a Plugin

The document outlines the process for removing a NetBox plugin, emphasizing that specific plugins may have unique requirements. 

## Disable the Plugin

- Remove the plugin from the `PLUGINS` list in `configuration.py`.

## Remove its Configuration

- Delete the plugin's entry in the `PLUGINS_CONFIG` dictionary in `configuration.py`.
- Tip: Consider commenting out configuration parameters instead of deleting them if reinstallation is possible.

## Re-index Search Entries

Run the following commands to reindex the global search engine:

```no-highlight
$ cd /opt/netbox/netbox/
$ source /opt/netbox/venv/bin/activate
(venv) $ python3 manage.py reindex
```

## Uninstall its Python Package

Use `pip` to remove the installed plugin:

```no-highlight
$ source /opt/netbox/venv/bin/activate
(venv) $ pip uninstall <package>
```

## Restart WSGI Service

Restart the WSGI service:

```no-highlight
# sudo systemctl restart netbox
```

## Drop Database Tables

- Check for any SQL tables created by the plugin in the PostgreSQL database shell:

```no-highlight
netbox=> \dt pluginname_*
```

- Warning: Backup the database before removing tables. Drop each table as follows:

```no-highlight
netbox=> DROP TABLE pluginname_foo;
netbox=> DROP TABLE pluginname_bar;
```

### Remove the Django Migration Records

- After dropping the tables, remove the migration records from Django's history:

```no-highlight
netbox=> DELETE FROM django_migrations WHERE app='pluginname';
```

- Warning: Backup the database before altering Django system tables.
=== END FILE ===

**Developing Plugins**
**Getting Started**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/index/
=== BEGIN FILE ===
# Plugins Development

NetBox allows for extension through plugins, which are self-contained Django apps. Developers can refer to the [NetBox Plugin Tutorial](https://github.com/netbox-community/netbox-plugin-tutorial) for guidance on creating plugins, and the [Plugin Certification Program](https://github.com/netbox-community/netbox/wiki/Plugin-Certification-Program) for establishing co-maintainer relationships.

Plugins can:

* Create Django models
* Provide custom web pages
* Inject template content
* Extend REST and GraphQL APIs
* Load additional Django apps
* Add custom middleware

The plugins API is limited, and developers should only use supported components to avoid breaking changes.

## Plugin Structure

A typical plugin structure includes:

```
project-name/
  - plugin_name/
    - api/
      - __init__.py
      - serializers.py
      - urls.py
      - views.py
    - migrations/
      - __init__.py
      - 0001_initial.py
    - templates/
      - plugin_name/
        - *.html
    - __init__.py
    - filtersets.py
    - graphql.py
    - jobs.py
    - models.py
    - middleware.py
    - navigation.py
    - signals.py
    - tables.py
    - template_content.py
    - urls.py
    - views.py
  - pyproject.toml
  - README.md
```

Key files include `pyproject.toml` for configuration and `README.md` for documentation. The source directory must contain an `__init__.py` file with an instance of `PluginConfig`.

## PluginConfig

The `PluginConfig` class is used to declare plugin functionality. An example subclass is:

```python
from netbox.plugins import PluginConfig

class FooBarConfig(PluginConfig):
    name = 'foo_bar'
    verbose_name = 'Foo Bar'
    description = 'An example NetBox plugin'
    version = '0.1'
    author = 'Jeremy Stretch'
    author_email = 'author@example.com'
    base_url = 'foo-bar'
    required_settings = []
    default_settings = {
        'baz': True
    }
    django_apps = ["foo", "bar", "baz"]

config = FooBarConfig
```

### PluginConfig Attributes

| Name                  | Description                                                                                                              |
|-----------------------|--------------------------------------------------------------------------------------------------------------------------|
| `name`                | Raw plugin name                                                                                                         |
| `verbose_name`        | Human-friendly name                                                                                                     |
| `version`             | Current release                                                                                                         |
| `description`         | Brief description of the plugin's purpose                                                                              |
| `author`              | Name of plugin's author                                                                                                 |
| `author_email`        | Author's public email address                                                                                           |
| `base_url`            | Base path for plugin URLs                                                                                               |
| `required_settings`   | List of configuration parameters that must be defined by the user                                                      |
| `default_settings`    | Dictionary of configuration parameters and their default values                                                        |
| `django_apps`         | List of additional Django apps to load                                                                                 |

Accessing config parameters can be done using `get_plugin_config()`.

## Create pyproject.toml

`pyproject.toml` is used for packaging and installing the plugin. It includes:

* `[build-system]` for declaring build backend
* `[project]` for basic metadata
* `[tool]` for tool-specific configurations

Example:

```
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name =  "my-example-plugin"
version = "0.1.0"
authors = [
    {name = "John Doe", email = "test@netboxlabs.com"},
]
description = "An example NetBox plugin."
readme = "README.md"
```

## Create a Virtual Environment

Creating a Python virtual environment is recommended for plugin development:

```shell
python3 -m venv ~/.virtualenvs/my_plugin
```

Add NetBox to the Python path:

```shell
echo /opt/netbox/netbox > $VENV/lib/python3.10/site-packages/netbox.pth
```

## Development Installation

Install the plugin in editable mode:

```shell
$ pip install -e .
```

## Configure NetBox

To enable the plugin, add it to the `PLUGINS` parameter in `configuration.py`:

```python
PLUGINS = [
    'my_plugin',
]
```
=== END FILE ===

**Models**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/models/
=== BEGIN FILE ===
# Database Models

## Creating Models

To create a new object type in NetBox, define a [Django model](https://docs.djangoproject.com/en/stable/topics/db/models/) in a `models.py` file. Models represent database tables with attributes for columns. Example model:

```python
from django.db import models

class MyModel(models.Model):
    foo = models.CharField(max_length=50)
    bar = models.CharField(max_length=50)

    def __str__(self):
        return f'{self.foo} {self.bar}'
```

Models have a numeric primary key, accessible as `pk` or `id`. Model names should follow [PEP8](https://www.python.org/dev/peps/pep-0008/#class-names) standards.

## Enabling NetBox Features

Models can inherit from `NetBoxModel` to utilize NetBox features like:

* Bookmarks
* Change logging
* Cloning
* Custom fields
* Custom links
* Custom validation
* Export templates
* Journaling
* Tags
* Webhooks

Subclassing `NetBoxModel` allows access to these features:

```python
# models.py
from django.db import models
from netbox.models import NetBoxModel

class MyModel(NetBoxModel):
    foo = models.CharField()
    ...
```

### NetBoxModel Properties

#### `docs_url`

Specifies the documentation URL for the model, defaulting to `/static/docs/models/<app_label>/<model_name>/`.

#### `_netbox_private`

Set to True to hide the model from end-user lists if it's for internal use only.

### Enabling Features Individually

To enable specific features, subclass individual mix-ins along with Django's `Model` class:

```python
# models.py
from django.db import models
from netbox.models.features import ExportTemplatesMixin, TagsMixin

class MyModel(ExportTemplatesMixin, TagsMixin, models.Model):
    foo = models.CharField()
    ...
```

## Database Migrations

After defining models, create database schema migrations using Django's `makemigrations` command:

```no-highlight
$ ./manage.py makemigrations my_plugin 
```

Apply migrations with:

```no-highlight
$ ./manage.py migrate my_plugin
```

Enable Developer Mode by setting `DEVELOPER=True` in `configuration.py`.

## Feature Mixins Reference

Only classes listed in this documentation are supported. Examples include:

::: netbox.models.features.BookmarksMixin

::: netbox.models.features.ChangeLoggingMixin

::: netbox.models.features.CloningMixin

::: netbox.models.features.CustomLinksMixin

::: netbox.models.features.CustomFieldsMixin

::: netbox.models.features.CustomValidationMixin

::: netbox.models.features.EventRulesMixin

::: netbox.models.features.ExportTemplatesMixin

::: netbox.models.features.JobsMixin

::: netbox.models.features.JournalingMixin

::: netbox.models.features.TagsMixin

## Choice Sets

Use the `ChoiceSet` class for model fields with predefined choices. Define choices in a subclass:

```python
from utilities.choices import ChoiceSet

class StatusChoices(ChoiceSet):
    key = 'MyModel.status'
    CHOICES = [
        (STATUS_FOO, 'Foo', 'red'),
        (STATUS_BAR, 'Bar', 'green'),
        (STATUS_BAZ, 'Baz', 'blue'),
    ]
```

Dynamic configuration allows administrators to customize choices. Example:

```python
FIELD_CHOICES = {
    'my_plugin.MyModel.status': (
        # Custom choices
    )
}
```

### Example

```python
# choices.py
from utilities.choices import ChoiceSet

class StatusChoices(ChoiceSet):
    key = 'MyModel.status'
    STATUS_FOO = 'foo'
    CHOICES = [
        (STATUS_FOO, 'Foo', 'red'),
        ...
    ]
```

```python
# models.py
from django.db import models
from .choices import StatusChoices

class MyModel(models.Model):
    status = models.CharField(
        max_length=50,
        choices=StatusChoices,
        default=StatusChoices.STATUS_FOO
    )
```
=== END FILE ===

**Views**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/views/
=== BEGIN FILE ===
# Views

## Writing Views

To create custom pages in the NetBox UI, define views in `views.py` and URL patterns in `urls.py`. A view executes business logic and renders HTML using a template.

Example of a view displaying a random animal:

```python
from django.shortcuts import render
from django.views.generic import View
from .models import Animal

class RandomAnimalView(View):
    """
    Display a randomly-selected animal.
    """
    def get(self, request):
        animal = Animal.objects.order_by('?').first()
        return render(request, 'netbox_animal_sounds/animal.html', {
            'animal': animal,
        })
```

Views can return various content types, including HTML, CSV, or images. For more details, refer to the [Django documentation](https://docs.djangoproject.com/en/stable/topics/class-based-views/).

### URL Registration

Register the view in `urls.py`:

```python
from django.urls import path
from . import views

urlpatterns = [
    path('random/', views.RandomAnimalView.as_view(), name='random_animal'),
]
```

Components of a URL pattern:

* `route` - Unique URL portion for the view
* `view` - The view itself
* `name` - Identifier for the URL path

This makes the view accessible at `/plugins/animal-sounds/random/`.

### View Classes

NetBox provides generic view classes for common operations:

| View Class           | Description                                            |
|----------------------|--------------------------------------------------------|
| `ObjectView`         | View a single object                                   |
| `ObjectEditView`     | Create or edit a single object                         |
| `ObjectDeleteView`   | Delete a single object                                 |
| `ObjectChildrenView` | List child objects of a parent                         |
| `ObjectListView`     | View a list of objects                                 |
| `BulkImportView`     | Import a set of new objects                            |
| `BulkEditView`       | Edit multiple objects                                  |
| `BulkDeleteView`     | Delete multiple objects                                |

!!! warning
    Only the classes in this documentation are supported for plugins.

#### Example Usage

```python
# views.py
from netbox.views.generic import ObjectEditView
from .models import Thing

class ThingEditView(ObjectEditView):
    queryset = Thing.objects.all()
    template_name = 'myplugin/thing.html'
    ...
```

## Object Views

Class definitions for NetBox's object views handling CRUD actions:

::: netbox.views.generic.base.BaseObjectView
    options:
      members:
        - get_queryset
        - get_object
        - get_extra_context

::: netbox.views.generic.ObjectView
    options:
      members:
        - get_template_name

::: netbox.views.generic.ObjectEditView
    options:
      members:
        - alter_object

::: netbox.views.generic.ObjectDeleteView
    options:
      members: false

::: netbox.views.generic.ObjectChildrenView
    options:
      members:
        - get_children
        - prep_table_data

## Multi-Object Views

Class definitions for multi-object views handling simultaneous actions:

::: netbox.views.generic.base.BaseMultiObjectView
    options:
      members:
        - get_queryset
        - get_extra_context

::: netbox.views.generic.ObjectListView
    options:
      members:
        - get_table
        - export_table
        - export_template

::: netbox.views.generic.BulkImportView
    options:
      members:
        - save_object

::: netbox.views.generic.BulkEditView
    options:
      members: false

::: netbox.views.generic.BulkDeleteView
    options:
      members:
        - get_form

## Feature Views

Views for enabling or enhancing NetBox model features:

::: netbox.views.generic.ObjectChangeLogView
    options:
      members:
        - get_form

::: netbox.views.generic.ObjectJournalView
    options:
      members:
        - get_form

## Extending Core Views

### Additional Tabs

Plugins can attach custom views to core NetBox models using `register_model_view()`. Declare a `TabView` instance for UI integration:

```python
from dcim.models import Site
from myplugin.models import Stuff
from netbox.views import generic
from utilities.views import ViewTab, register_model_view

@register_model_view(Site, name='myview', path='some-other-stuff')
class MyView(generic.ObjectView):
    ...
    tab = ViewTab(
        label='Other Stuff',
        badge=lambda obj: Stuff.objects.filter(site=obj).count(),
        permission='myplugin.view_stuff'
    )

    def get(self, request, pk):
        ...
        return render(
            request,
            "myplugin/mytabview.html",
            context={
                "tab": self.tab,
            },
        )
```

### Extra Template Content

Plugins can inject custom content into NetBox views by subclassing `PluginTemplateExtension`. Available methods:

| Method              | View        | Description                                         |
|---------------------|-------------|-----------------------------------------------------|
| `navbar()`          | All         | Inject content in the top navigation bar            |
| `list_buttons()`    | List view   | Add buttons to the top of the page                  |
| `buttons()`         | Object view | Add buttons to the top of the page                  |
| `alerts()`          | Object view | Inject content at the top of the page               |
| `left_page()`       | Object view | Inject content on the left side of the page         |
| `right_page()`      | Object view | Inject content on the right side of the page        |
| `full_width_page()` | Object view | Inject content across the entire bottom of the page |

!!! info "The `navbar()` and `alerts()` methods were introduced in NetBox v4.1."

A `render()` method is also available for convenience. Context data includes:

* `object` - The object being viewed
* `model` - The model of the list view
* `request` - The current request
* `settings` - Global NetBox settings
* `config` - Plugin-specific configuration parameters

Example of a custom extension:

```python
from netbox.plugins import PluginTemplateExtension
from .models import Animal

class SiteAnimalCount(PluginTemplateExtension):
    models = ['dcim.site']

    def right_page(self):
        return self.render('netbox_animal_sounds/inc/animal_count.html', extra_context={
            'animal_count': Animal.objects.count(),
        })

template_extensions = [SiteAnimalCount]
```
=== END FILE ===

**Navigation**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/navigation/
=== BEGIN FILE ===
# Navigation

## Menus

A plugin can register its own submenu in NetBox's navigation by defining a `menu` variable in `navigation.py`, pointing to a `PluginMenu` instance. Each menu requires a label and grouped menu items, with an optional icon. Example:

```python title="navigation.py"
from netbox.plugins import PluginMenu

menu = PluginMenu(
    label='My Plugin',
    groups=(
        ('Foo', (item1, item2, item3)),
        ('Bar', (item4, item5)),
    ),
    icon_class='mdi mdi-router'
)
```

Each group is a two-tuple with a label and an iterable of menu items. A group label is mandatory.

A `PluginMenu` has the following attributes:

| Attribute    | Required | Description                                       |
|--------------|----------|---------------------------------------------------|
| `label`      | Yes      | The text displayed as the menu heading            |
| `groups`     | Yes      | An iterable of named groups containing menu items |
| `icon_class` | -        | The CSS name of the icon for the heading          |

### The Default Menu

For a small number of menu items, use NetBox's shared "Plugins" menu by declaring `menu_items` as a list of `PluginMenuItems` in `navigation.py`:

```python title="navigation.py"
menu_items = (item1, item2, item3)
```

## Menu Items

Menu items are defined as `PluginMenuItem` instances. Example:

```python title="navigation.py"
from netbox.choices import ButtonColorChoices
from netbox.plugins import PluginMenuButton, PluginMenuItem

item1 = PluginMenuItem(
    link='plugins:myplugin:myview',
    link_text='Some text',
    buttons=(
        PluginMenuButton('home', 'Button A', 'fa fa-info', ButtonColorChoices.BLUE),
        PluginMenuButton('home', 'Button B', 'fa fa-warning', ButtonColorChoices.GREEN),
    )
)
```

A `PluginMenuItem` has the following attributes:

| Attribute     | Required | Description                                                                                              |
|---------------|----------|----------------------------------------------------------------------------------------------------------|
| `link`        | Yes      | Name of the URL path to which this menu item links                                                       |
| `link_text`   | Yes      | The text presented to the user                                                                           |
| `permissions` | -        | A list of permissions required to display this link                                                      |
| `staff_only`  | -        | Display only for users with `is_staff` set to true                                                       |
| `buttons`     | -        | An iterable of `PluginMenuButton` instances to include                                                   |

## Menu Buttons

Each menu item can include buttons for shortcuts. A `PluginMenuButton` has the following attributes:

| Attribute     | Required | Description                                                        |
|---------------|----------|--------------------------------------------------------------------|
| `link`        | Yes      | Name of the URL path to which this button links                    |
| `title`       | Yes      | Tooltip text displayed on hover                                    |
| `icon_class`  | Yes      | Button icon CSS class                                              |
| `color`       | -        | One of the choices from `ButtonColorChoices`                      |
| `permissions` | -        | A list of permissions required to display this button              |

Buttons will only show if the user has permission to view the link.
=== END FILE ===

**Templates**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/templates/
=== BEGIN FILE ===
# Templates

Templates in NetBox are used to render HTML content from context data, with built-in templates available for plugin views. Plugin authors can extend these templates to align with NetBox's layout and style, using the Django Template Language (DTL).

## Template File Structure

Plugin templates should be located in `templates/<plugin-name>/`. For example, `templates/my_plugin/foo.html`.

## Standard Blocks

Available template blocks:

| Name           | Required | Description                                                         |
|----------------|----------|---------------------------------------------------------------------|
| `title`        | Yes      | Page title                                                          |
| `content`      | Yes      | Page content                                                        |
| `head`         | -        | Content for the HTML `<head>` element                               |
| `footer`       | -        | Page footer content                                                 |
| `footer_links` | -        | Links section of the page footer                                    |
| `javascript`   | -        | Javascript content at the end of the HTML `<body>` element         |

## Base Templates

### layout.html

Path: `base/layout.html`

A base template for a consistent user experience, extendable by plugins.

#### Blocks

| Name      | Required | Description                |
|-----------|----------|----------------------------|
| `header`  | -        | Page header                |
| `tabs`    | -        | Horizontal navigation tabs |
| `modals`  | -        | Bootstrap 5 modal elements |

#### Example

```jinja2
{% extends 'base/layout.html' %}

{% block header %}
  <h1>My Custom Header</h1>
{% endblock header %}

{% block content %}
  <p>{{ some_plugin_context_var }}</p>
{% endblock content %}
```

## Generic View Templates

### object.html

Path: `generic/object.html`

Used by `ObjectView` to display a single object.

#### Blocks

| Name                | Required | Description                                  |
|---------------------|----------|----------------------------------------------|
| `breadcrumbs`       | -        | Breadcrumb list items                        |
| `object_identifier` | -        | Unique identifier for the object            |
| `extra_controls`    | -        | Additional action buttons                    |

#### Context

| Name     | Required | Description                      |
|----------|----------|----------------------------------|
| `object` | Yes      | The object instance being viewed |

### object_edit.html

Path: `generic/object_edit.html`

Used by `ObjectEditView` to create or modify an object.

#### Blocks

| Name             | Required | Description                                           |
|------------------|----------|-------------------------------------------------------|
| `form`           | -        | Custom form content                                   |
| `buttons`        | -        | Form submission buttons                               |

#### Context

| Name         | Required | Description                                                     |
|--------------|----------|-----------------------------------------------------------------|
| `object`     | Yes      | The object instance being modified (or none, if creating)       |
| `form`       | Yes      | The form class for creating/modifying the object                |
| `return_url` | Yes      | Redirect URL after form submission                             |

### object_delete.html

Path: `generic/object_delete.html`

Used by `ObjectDeleteView` to delete an object.

#### Context

| Name         | Required | Description                                                     |
|--------------|----------|-----------------------------------------------------------------|
| `object`     | Yes      | The object instance being deleted                               |
| `form`       | Yes      | Form class for confirming deletion                             |
| `return_url` | Yes      | Redirect URL after form submission                             |

### object_list.html

Path: `generic/object_list.html`

Used by `ObjectListView` to display a list of objects.

#### Blocks

| Name             | Required | Description                                                        |
|------------------|----------|--------------------------------------------------------------------|
| `extra_controls` | -        | Additional action buttons                                          |
| `bulk_buttons`   | -        | Bulk action buttons beneath the objects list                      |

#### Context

| Name          | Required | Description                                                                                 |
|---------------|----------|---------------------------------------------------------------------------------------------|
| `model`       | Yes      | The object class                                                                            |
| `table`       | Yes      | Table class for rendering the list of objects                                              |
| `permissions` | Yes      | Mapping of permissions for the current user                                                |
| `actions`     | Yes      | List of buttons to display (`add`, `import`, `export`, `bulk_edit`, `bulk_delete`)        |
| `filter_form` | -        | Bound filterset form for filtering the objects list                                        |
| `return_url`  | -        | Return URL for bulk operation form submission                                              |

### bulk_import.html

Path: `generic/bulk_import.html`

Used by `BulkImportView` to import multiple objects from CSV data.

#### Context

| Name         | Required | Description                                                  |
|--------------|----------|--------------------------------------------------------------|
| `model`      | Yes      | The object class                                             |
| `form`       | Yes      | CSV import form class                                        |
| `return_url` | -        | Return URL for bulk operation form submission                |
| `fields`     | -        | Dictionary of form fields for import options                |

### bulk_edit.html

Path: `generic/bulk_edit.html`

Used by `BulkEditView` to modify multiple objects.

#### Context

| Name         | Required | Description                                                     |
|--------------|----------|-----------------------------------------------------------------|
| `model`      | Yes      | The object class                                                |
| `form`       | Yes      | Bulk edit form class                                           |
| `table`      | Yes      | Table class for rendering the list of objects                  |
| `return_url` | Yes      | Redirect URL after form submission                             |

### bulk_delete.html

Path: `generic/bulk_delete.html`

Used by `BulkDeleteView` to delete multiple objects.

#### Blocks

| Name            | Required | Description                           |
|-----------------|----------|---------------------------------------|
| `message_extra` | -        | Supplementary warning message content |

#### Context

| Name         | Required | Description                                                     |
|--------------|----------|-----------------------------------------------------------------|
| `model`      | Yes      | The object class                                                |
| `form`       | Yes      | Bulk delete form class                                          |
| `table`      | Yes      | Table class for rendering the list of objects                  |
| `return_url` | Yes      | Redirect URL after form submission                             |

## Tags

Custom template tags available in NetBox are loaded automatically.

## Filters

Custom template filters available in NetBox are also loaded automatically.
=== END FILE ===

**Tables**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/tables/
=== BEGIN FILE ===
# Tables

NetBox uses the [`django-tables2`](https://django-tables2.readthedocs.io/) library for dynamic object tables that can be sorted and filtered.

## NetBoxTable

The `NetBoxTable` class extends the `Table` class in `django-tables2`, offering:

* User-configurable column display and ordering
* Custom field & custom link columns
* Automatic prefetching of related objects

Default columns include:

* `pk` - Checkbox for selecting the object
* `id` - Object's numeric database ID, linked to the object's view (hidden by default)
* `actions` - Dropdown menu for object-specific actions

### Example

```python
# tables.py
import django_tables2 as tables
from netbox.tables import NetBoxTable
from .models import MyModel

class MyModelTable(NetBoxTable):
    name = tables.Column(
        linkify=True
    )
    ...

    class Meta(NetBoxTable.Meta):
        model = MyModel
        fields = ('pk', 'id', 'name', ...)
        default_columns = ('pk', 'name', ...)
```

### Table Configuration

To configure a table for a specific request, use the `configure()` method with the current HTTPRequest object:

```python
table = MyModelTable(data=MyModel.objects.all())
table.configure(request)
```

## Columns

Supported column classes for plugins can be imported from `netbox.tables.columns`:

::: netbox.tables.BooleanColumn
    options:
      members: false

::: netbox.tables.ChoiceFieldColumn
    options:
      members: false

::: netbox.tables.ColorColumn
    options:
      members: false

::: netbox.tables.ColoredLabelColumn
    options:
      members: false

::: netbox.tables.ContentTypeColumn
    options:
      members: false

::: netbox.tables.ContentTypesColumn
    options:
      members: false

::: netbox.tables.MarkdownColumn
    options:
      members: false

::: netbox.tables.TagColumn
    options:
      members: false

::: netbox.tables.TemplateColumn
    options:
      members:
        - __init__

## Extending Core Tables

Plugins can add custom columns to core tables using `register_table_column()`:

```python
import django_tables2
from django.utils.translation import gettext_lazy as _

from dcim.tables import SiteTable
from utilities.tables import register_table_column

mycol = django_tables2.Column(
    verbose_name=_('My Column'),
    accessor=django_tables2.A('description')
)

register_table_column(mycol, 'foo', SiteTable)
```

Define an accessor for the desired model field or relationship when creating a custom column. Refer to the [django-tables2 documentation](https://django-tables2.readthedocs.io/) for more details. 

::: utilities.tables.register_table_column
=== END FILE ===

**Forms**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/forms/
=== BEGIN FILE ===
# Forms

## Form Classes

NetBox provides several base form classes for use by plugins.

| Form Class                 | Purpose                              |
|----------------------------|--------------------------------------|
| `NetBoxModelForm`          | Create/edit individual objects       |
| `NetBoxModelImportForm`    | Bulk import objects from CSV data    |
| `NetBoxModelBulkEditForm`  | Edit multiple objects simultaneously |
| `NetBoxModelFilterSetForm` | Filter objects within a list view   |

### `NetBoxModelForm`

This is the base form for creating and editing NetBox models. It extends Django's ModelForm to add support for tags and custom fields.

| Attribute   | Description                                                                           |
|-------------|---------------------------------------------------------------------------------------|
| `fieldsets` | A tuple of `FieldSet` instances which control how form fields are rendered (optional) |

**Example**

```python
from django.utils.translation import gettext_lazy as _
from dcim.models import Site
from netbox.forms import NetBoxModelForm
from utilities.forms.fields import CommentField, DynamicModelChoiceField
from utilities.forms.rendering import FieldSet
from .models import MyModel

class MyModelForm(NetBoxModelForm):
    site = DynamicModelChoiceField(
        queryset=Site.objects.all()
    )
    comments = CommentField()
    fieldsets = (
        FieldSet('name', 'status', 'site', 'tags', name=_('Model Stuff')),
        FieldSet('tenant_group', 'tenant', name=_('Tenancy')),
    )

    class Meta:
        model = MyModel
        fields = ('name', 'status', 'site', 'comments', 'tags')
```

### `NetBoxModelImportForm`

This form facilitates the bulk import of new objects from CSV, JSON, or YAML data. As with model forms, you'll need to declare a `Meta` subclass specifying the associated `model` and `fields`. NetBox also provides several form fields suitable for importing various types of CSV data.

**Example**

```python
from django.utils.translation import gettext_lazy as _
from dcim.models import Site
from netbox.forms import NetBoxModelImportForm
from utilities.forms import CSVModelChoiceField
from .models import MyModel

class MyModelImportForm(NetBoxModelImportForm):
    site = CSVModelChoiceField(
        queryset=Site.objects.all(),
        to_field_name='name',
        help_text=_('Assigned site')
    )

    class Meta:
        model = MyModel
        fields = ('name', 'status', 'site', 'comments')
```

### `NetBoxModelBulkEditForm`

This form facilitates editing multiple objects in bulk. Unlike a model form, this form does not have a child `Meta` class and must explicitly define each field. All fields in a bulk edit form are generally declared with `required=False`.

| Attribute         | Description                                                                                 |
|-------------------|---------------------------------------------------------------------------------------------|
| `model`           | The model of object being edited                                                            |
| `fieldsets`       | A tuple of `FieldSet` instances which control how form fields are rendered (optional)       |
| `nullable_fields` | A tuple of fields which can be nullified (set to empty) using the bulk edit form (optional) |

**Example**

```python
from django import forms
from django.utils.translation import gettext_lazy as _
from dcim.models import Site
from netbox.forms import NetBoxModelBulkEditForm
from utilities.forms import CommentField, DynamicModelChoiceField
from utilities.forms.rendering import FieldSet
from .models import MyModel, MyModelStatusChoices

class MyModelBulkEditForm(NetBoxModelBulkEditForm):
    name = forms.CharField(
        required=False
    )
    status = forms.ChoiceField(
        choices=MyModelStatusChoices,
        required=False
    )
    site = DynamicModelChoiceField(
        queryset=Site.objects.all(),
        required=False
    )
    comments = CommentField()

    model = MyModel
    fieldsets = (
        FieldSet('name', 'status', 'site', name=_('Model Stuff')),
    )
    nullable_fields = ('site', 'comments')
```

### `NetBoxModelFilterSetForm`

This form class is used to render a form expressly for filtering a list of objects. Its fields should correspond to filters defined on the model's filter set.

| Attribute   | Description                                                                           |
|-------------|---------------------------------------------------------------------------------------|
| `model`     | The model of object being edited                                                      |
| `fieldsets` | A tuple of `FieldSet` instances which control how form fields are rendered (optional) |

**Example**

```python
from dcim.models import Site
from netbox.forms import NetBoxModelFilterSetForm
from utilities.forms import DynamicModelMultipleChoiceField, MultipleChoiceField
from .models import MyModel, MyModelStatusChoices

class MyModelFilterForm(NetBoxModelFilterSetForm):
    site_id = DynamicModelMultipleChoiceField(
        queryset=Site.objects.all(),
        required=False
    )
    status = MultipleChoiceField(
        choices=MyModelStatusChoices,
        required=False
    )

    model = MyModel
```

## General Purpose Fields

NetBox provides several field classes for use within forms to handle specific types of data. These can be imported from `utilities.forms.fields`.

- `ColorField`
- `CommentField`
- `JSONField`
- `MACAddressField`
- `SlugField`

## Dynamic Object Fields

- `DynamicModelChoiceField`
- `DynamicModelMultipleChoiceField`

## Content Type Fields

- `ContentTypeChoiceField`
- `ContentTypeMultipleChoiceField`

## CSV Import Fields

- `CSVChoiceField`
- `CSVMultipleChoiceField`
- `CSVModelChoiceField`
- `CSVContentTypeField`
- `CSVMultipleContentTypeField`

## Form Rendering

- `FieldSet`
- `InlineFields`
- `TabbedGroups`
- `ObjectAttribute`
=== END FILE ===

**Filters & Filter Sets**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/filtersets/
=== BEGIN FILE ===
# Filters & Filter Sets

Filter sets in NetBox allow for filtering or searching through objects, such as sites by parent region, status, or facility ID. The same filter set is used across the UI, REST API, and GraphQL API, utilizing the [django-filters2](https://django-tables2.readthedocs.io/en/latest/) library.

## FilterSet Classes

The `NetBoxModelFilterSet` class is designed for plugins to add functionality like tag assignment and custom fields. Filters can be declared as per the `django-filters` documentation. Example:

```python
# filtersets.py
import django_filters
from netbox.filtersets import NetBoxModelFilterSet
from .models import MyModel

class MyFilterSet(NetBoxModelFilterSet):
    status = django_filters.MultipleChoiceFilter(
        choices=(
            ('foo', 'Foo'),
            ('bar', 'Bar'),
            ('baz', 'Baz'),
        ),
        null_value=None
    )

    class Meta:
        model = MyModel
        fields = ('some', 'other', 'fields')
```

### Declaring Filter Sets

To use a filter set in a NetBox generic view, set the `filterset` attribute:

```python
# views.py
from netbox.views.generic import ObjectListView
from .filtersets import MyModelFilterSet
from .models import MyModel

class MyModelListView(ObjectListView):
    queryset = MyModel.objects.all()
    filterset = MyModelFilterSet
```

For REST API endpoints, set the `filterset_class` attribute:

```python
# api/views.py
from myplugin import models, filtersets
from . import serializers

class MyModelViewSet(...):
    queryset = models.MyModel.objects.all()
    serializer_class = serializers.MyModelSerializer
    filterset_class = filtersets.MyModelFilterSet
```

## Filter Classes

### TagFilter

The `TagFilter` class is for models supporting tag assignment, inheriting from `NetBoxModel` or `TagsMixin`, and subclasses `ModelMultipleChoiceFilter`:

```python
from django_filters import FilterSet
from extras.filters import TagFilter

class MyModelFilterSet(FilterSet):
    tag = TagFilter()
```
=== END FILE ===

**Search**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/search/
=== BEGIN FILE ===
# Search

Plugins can define and register their own models to extend NetBox's core search functionality. Typically, a plugin will include a file named `search.py`, which holds all search indexes for its models.

```python
# search.py
from netbox.search import SearchIndex
from .models import MyModel

class MyModelIndex(SearchIndex):
    model = MyModel
    fields = (
        ('name', 100),
        ('description', 500),
        ('comments', 5000),
    )
    display_attrs = ('site', 'device', 'status', 'description')
```

Fields listed in `display_attrs` will not be cached for search, but will be displayed alongside the object in global search results, providing additional information to the user.

To register indexes with NetBox, define a list named `indexes` at the end of this file:

```python
indexes = [MyModelIndex]
```

The path to the list of search indexes can be modified by setting `search_indexes` in the PluginConfig instance.
=== END FILE ===

**Event Types**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/event-types/
=== BEGIN FILE ===
# Event Types

Plugins can register custom event types for NetBox event rules by using the `register()` method on an `EventType` instance. This can be done anywhere within the plugin. An example of this process is shown below:

```python
from django.utils.translation import gettext_lazy as _
from netbox.events import EventType, EVENT_TYPE_KIND_SUCCESS

EventType(
    name='ticket_opened',
    text=_('Ticket opened'),
    kind=EVENT_TYPE_KIND_SUCCESS
).register()
```

This feature was introduced in NetBox v4.1.
=== END FILE ===

**Data Backends**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/data-backends/
=== BEGIN FILE ===
# Data Backends

Data sources can reference external systems of record like git repositories or Amazon S3 buckets. Plugins can introduce new backend classes by subclassing NetBox's `DataBackend` class.

```python title="data_backends.py"
from netbox.data_backends import DataBackend

class MyDataBackend(DataBackend):
    name = 'mybackend'
    label = 'My Backend'
    ...
```

To register data backends with NetBox, define a list named `backends`:

```python title="data_backends.py"
backends = [MyDataBackend]
```

Tip: The path to the list of search indexes can be modified by setting `data_backends` in the PluginConfig instance.
=== END FILE ===

**REST API**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/rest-api/
=== BEGIN FILE ===
# REST API

Plugins can declare custom endpoints on NetBox's REST API to retrieve or manipulate models or other data, returning data in JSON format using a serializer. NetBox uses the Django REST Framework (DRF), allowing plugin authors to replicate patterns from NetBox's implementation.

## Code Layout

Separate API serializers, views, and URLs into the `api/` directory for organization. The structure is as follows:

```
project-name/
  - plugin_name/
    - api/
      - __init__.py
      - serializers.py
      - urls.py
      - views.py
    ...
```

## Serializers

### Model Serializers

Serializers convert Python objects to JSON and vice versa. Use `NetBoxModelSerializer` for handling tags and custom fields. Define the nested representation in the `brief_fields` attributes of the serializer's `Meta` class.

#### Example

```python
# api/serializers.py
from rest_framework import serializers
from netbox.api.serializers import NetBoxModelSerializer
from my_plugin.models import MyModel

class MyModelSerializer(NetBoxModelSerializer):
    foo = SiteSerializer(nested=True, allow_null=True)

    class Meta:
        model = MyModel
        fields = ('id', 'foo', 'bar', 'baz')
        brief_fields = ('id', 'url', 'display', 'bar')
```

## Viewsets

A REST API view handles the logic for displaying and interacting with NetBox objects. Use `NetBoxModelViewSet` for bulk operations and validation.

### Example

```python
# api/views.py
from netbox.api.viewsets import NetBoxModelViewSet
from my_plugin.models import MyModel
from .serializers import MyModelSerializer

class MyModelViewSet(NetBoxModelViewSet):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer
```

## Routers

Routers map URLs to REST API views. Use the `DefaultRouter` class from DRF, and define `urlpatterns` in `api/urls.py`.

### Example

```python
# api/urls.py
from netbox.api.routers import NetBoxRouter
from .views import MyModelViewSet

router = NetBoxRouter()
router.register('my-model', MyModelViewSet)
urlpatterns = router.urls
```

This makes the plugin's view accessible at `/api/plugins/my-plugin/my-model/`.

!!! warning
    The examples provided here are intended to serve as a minimal reference implementation only. This documentation does not address authentication, performance, or myriad other concerns that plugin authors may need to address.
=== END FILE ===

**GraphQL API**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/graphql-api/
=== BEGIN FILE ===
# GraphQL API

## Defining the Schema Class

A plugin can extend NetBox's GraphQL API by registering its own schema class. By default, NetBox will attempt to import `graphql.schema` from the plugin, if it exists. This path can be overridden by defining `graphql_schema` on the PluginConfig instance as the dotted path to the desired Python class.

### Example

```python
# graphql.py
import strawberry
import strawberry_django

from . import models


@strawberry_django.type(
    models.MyModel,
    fields='__all__',
)
class MyModelType:
    pass


@strawberry.type
class MyQuery:
    @strawberry.field
    def dummymodel(self, id: int) -> DummyModelType:
        return None
    dummymodel_list: list[DummyModelType] = strawberry_django.field()


schema = [
    MyQuery,
]
```

## GraphQL Objects

NetBox provides two object type classes for use by plugins.

- `netbox.graphql.types.BaseObjectType`
- `netbox.graphql.types.NetBoxObjectType`
=== END FILE ===

**Background Jobs**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/background-jobs/
=== BEGIN FILE ===
# Background Jobs

NetBox plugins can use [background jobs](../../features/background-jobs.md) to execute operations asynchronously, improving user experience by decoupling long-running tasks from immediate requests. 

## Job Runners

A background job uses a basic [Job](../../models/core/job.md) executor for various tasks, managing job objects, rescheduling, and error handling. Custom jobs are created by subclassing `JobRunner`.

```python title="jobs.py"
from netbox.jobs import JobRunner

class MyTestJob(JobRunner):
    class Meta:
        name = "My Test Job"

    def run(self, *args, **kwargs):
        obj = self.job.object
        # your logic goes here
```

Schedule jobs using `MyTestJob.enqueue()`, without passing a `name` argument.

### Attributes

`JobRunner` attributes are defined in a `Meta` class.

#### `name`

A human-friendly name for the job; defaults to the class name if omitted.

### Scheduled Jobs

Jobs can be scheduled immediately or later with `enqueue()`. Use `enqueue_once()` to avoid duplicates. 

```python title="jobs.py"
from netbox.jobs import JobRunner

class MyHousekeepingJob(JobRunner):
    class Meta:
        name = "Housekeeping"

    def run(self, *args, **kwargs):
        # your logic goes here
```

```python title="__init__.py"
from netbox.plugins import PluginConfig

class MyPluginConfig(PluginConfig):
    def ready(self):
        from .jobs import MyHousekeepingJob
        MyHousekeepingJob.setup(interval=60)
```

## Task queues

Three default task queues exist:

* High
* Default
* Low

Plugins can create custom queues by setting the `queues` attribute in `PluginConfig`.

```python
class MyPluginConfig(PluginConfig):
    name = 'myplugin'
    ...
    queues = [
        'foo',
        'bar',
    ]
```

Custom queues are named `my_plugin.foo` and `my_plugin.bar`.

!!! warning "Configuring the RQ worker process"
By default, the RQ worker only services the high, default, and low queues. Custom queues require reconfiguration or a dedicated worker:

```
python manage.py rqworker my_plugin.foo my_plugin.bar
```
=== END FILE ===

**Dashboard Widgets**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/dashboard-widgets/
=== BEGIN FILE ===
# Dashboard Widgets

NetBox users can customize their dashboards by adding, removing, and adjusting widgets. Plugins can also introduce new widgets.

## The DashboardWidget Class

Widgets must inherit from the `DashboardWidget` base class and implement a `render()` method. If user configuration is needed, a `ConfigForm` child class must be included.

## Widget Registration

Use the `register_widget()` decorator to register a widget:

```python
from extras.dashboard.widgets import DashboardWidget, register_widget

@register_widget
class MyWidget1(DashboardWidget):
    ...

@register_widget
class MyWidget2(DashboardWidget):
    ...
```

## Example

```python
from django import forms
from extras.dashboard.utils import register_widget
from extras.dashboard.widgets import DashboardWidget, WidgetConfigForm

@register_widget
class ReminderWidget(DashboardWidget):
    default_title = 'Reminder'
    description = 'Add a virtual sticky note'

    class ConfigForm(WidgetConfigForm):
        content = forms.CharField(
            widget=forms.Textarea()
        )

    def render(self, request):
        return self.config.get('content')
```

## Initialization

Import the widget module in the `ready` method of your `PluginConfig`:

```python
class FooBarConfig(PluginConfig):
    def ready(self):
        super().ready()
        from . import widgets  # point this to the above widget module you created
```
=== END FILE ===

**Staged Changes**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/staged-changes/
=== BEGIN FILE ===
# Staged Changes

This document discusses an experimental feature in NetBox that allows users to stage changes to objects without committing them to the active database. This is useful for dry runs or preparing changes for approval.

To stage changes, create a branch:

```python
from extras.models import Branch

branch1 = Branch.objects.create(name='branch1')
```

Activate the branch with the `checkout()` context manager to start making changes:

```python
from extras.models import Branch
from netbox.staging import checkout

branch1 = Branch.objects.get(name='branch1')
with checkout(branch1):
    Site.objects.create(name='New Site', slug='new-site')
    # ...
```

Exiting the context rolls back the transaction and records the changes as staged changes. Re-entering the branch applies any staged changes.

To commit the changes, use the branch's `commit()` method:

```python
from extras.models import Branch

branch1 = Branch.objects.get(name='branch1')
branch1.commit()
```

Committing is an all-or-none operation; exceptions will revert all changes. After a successful commit, associated StagedChange objects are deleted, but the branch remains for future use.
=== END FILE ===

**Exceptions**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/exceptions/
=== BEGIN FILE ===
# Exceptions

The exception classes listed here may be raised by a plugin to alter NetBox's default behavior in various scenarios.

## `AbortRequest`

NetBox provides several generic views and REST API viewsets which facilitate the creation, modification, and deletion of objects, either individually or in bulk. Under certain conditions, it may be desirable for a plugin to interrupt these actions and cleanly abort the request, reporting an error message to the end user or API consumer.

For example, a plugin may prohibit the creation of a site with a prohibited name by connecting a receiver to Django's `pre_save` signal for the Site model:

```python
from django.db.models.signals import pre_save
from django.dispatch import receiver
from dcim.models import Site
from utilities.exceptions import AbortRequest

PROHIBITED_NAMES = ('foo', 'bar', 'baz')

@receiver(pre_save, sender=Site)
def test_abort_request(instance, **kwargs):
    if instance.name.lower() in PROHIBITED_NAMES:
        raise AbortRequest(f"Site name can't be {instance.name}!")
```

An error message must be supplied when raising `AbortRequest`. This will be conveyed to the user and should clearly explain the reason for which the request was aborted, as well as any potential remedy.

Tip: Consider custom validation rules. This exception is intended to be used for handling complex evaluation logic and should be used sparingly. For simple object validation, consider using custom validation rules instead.
=== END FILE ===

**Migrating to v4.0**
URL: https://netboxlabs.com/docs/netbox/en/stable/plugins/development/migration-v4/
=== BEGIN FILE ===
# Migrating Your Plugin to NetBox v4.0

This document outlines the necessary changes for plugin maintainers to ensure compatibility with NetBox v4.0 and later.

## General

### Python support

NetBox v4.0 supports Python 3.12 and drops support for Python 3.8 and 3.9. Update CI/CD processes accordingly.

### Plugin resources relocated

All plugin resources moved from `extras.plugins` to `netbox.plugins`.

```python
# Old
from extras.plugins import PluginConfig

# New
from netbox.plugins import PluginConfig
```

### ContentType renamed to ObjectType

The ContentType model is now referred to as ObjectType. Use ObjectType for referencing content types, except for generic foreign keys.

```python
# Old
content_types = models.ManyToManyField(
    to='contenttypes.ContentType',
    related_name='event_rules'
)

# New
object_types = models.ManyToManyField(
    to='core.ObjectType',
    related_name='event_rules'
)
```

## Views

### View actions must be dictionaries

View actions must now be declared as a dictionary.

```python
# Old
actions = ('add', 'import', 'export', 'bulk_edit', 'bulk_delete')
action_perms = defaultdict(set, **{
    'add': {'add'},
    'import': {'add'},
    'bulk_edit': {'change'},
    'bulk_delete': {'delete'},
})

# New
actions = {
    'add': {'add'},
    'import': {'add'},
    'export': set(),
    'bulk_edit': {'change'},
    'bulk_delete': {'delete'},
}
```

## Forms

### Remove `BootstrapMixin`

The `BootstrapMixin` class is no longer needed.

```python
# Old
from utilities.forms import BootstrapMixin

class MyForm(BootstrapMixin, forms.Form):

# New
class MyForm(forms.Form):
```

### Update Fieldset definitions

Use the new FieldSet class for fieldset definitions.

```python
# Old
fieldsets = (
    (_('Circuit'), ('cid', 'type', 'status', 'description', 'tags')),
    ...
)

# New
fieldsets = (
    FieldSet('cid', 'type', 'status', 'description', 'tags', name=_('Circuit')),
    ...
)
```

## Navigation

### Remove button colors

Remove color from buttons in navigation for design consistency.

```python
# Old
PluginMenuButton(
    link='myplugin:foo_add',
    title='Add a new Foo',
    color=ButtonColorChoices.GREEN
)

# New
PluginMenuButton(
    link='myplugin:foo_add',
    title='Add a new Foo'
)
```

## UI Layout

### Renamed template blocks

| Template            | Old name          | New name                  |
|---------------------|-------------------|---------------------------|
| generic/object.html | `header`          | `page-header`             |
| generic/object.html | `controls`        | `control-buttons`         |
| base/layout.html    | `content-wrapper` | _Removed_ (use `content`) |

### Utilize flex controls

Use Bootstrap's flex behaviors instead of legacy float controls.

```html
<div class="d-flex justify-content-between">
    <h3>Title text</h3>
    <i class="mdi mdi-close"></i>
</div>
```

### Check column offsets

Ensure column width is set when using offset columns.

### Tables inside cards

Embed tables directly inside cards.

```html
# Old
<div class="card">
    <div class="card-body">
        <table class="table table-hover attr-table">
            ...
        </table>
    </div>
</div>

# New
<div class="card">
    <table class="table table-hover attr-table">
        ...
    </table>
</div>
```

### Remove `btn-sm` class from buttons

The `btn-sm` class is no longer needed.

```html
# Old
<a href="#" class="btn btn-sm btn-primary">Text</a>

# New
<a href="#" class="btn btn-primary">Text</a>
```

### Update `bg-$color` classes

Use `text-bg-$color` for sufficient contrast.

```html
# Old
<span class="badge bg-primary">Text</span>

# New
<span class="badge text-bg-primary">Text</span>
```

### Obsolete custom CSS classes

Removed custom CSS classes include `object-subtitle`.

## REST API

### Extend serializer for brief mode

Define `brief_fields` in the serializer's `Meta` class.

```python
# Old
class SiteSerializer(NetBoxModelSerializer):
    region = NestedRegionSerializer(required=False, allow_null=True)

# New
class SiteSerializer(NetBoxModelSerializer):
    region = RegionSerializer(nested=True, required=False, allow_null=True)

    class Meta:
        brief_fields = ('id', 'url', 'display', 'name', 'description', 'slug')
```

### Include description fields in brief mode

Optionally include the `description` field in brief mode for consistency.

## GraphQL

NetBox replaces Graphene-Django with Strawberry, requiring updates to GraphQL code.

### Change schema.py

Refactor schema definition for Strawberry.

```python
# Old
import graphene

class CircuitsQuery(graphene.ObjectType):
    ...

# New
import strawberry

@strawberry.type
class CircuitsQuery:
    ...
```

### Change types.py

Explicitly define FK and M2M references.

```python
# New
@strawberry_django.type(
    models.CircuitType,
    fields='__all__',
    filters=CircuitTypeFilter
)
class CircuitTypeType:
    ...
```

### Change filters.py

Create an explicit filters.py file using `autotype_decorator`.

```python
# New
@strawberry_django.filter(models.Circuit, lookups=True)
@autotype_decorator(filtersets.CircuitFilterSet)
class CircuitFilter(BaseFilterMixin):
    pass
```
=== END FILE ===

**Administration**
**Authentication**
**Overview**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/overview/
=== BEGIN FILE ===
# Authentication

## Local Authentication

Local user accounts and groups can be created in NetBox under the "Authentication" section in the "Admin" menu, accessible only to users with the "staff" permission. Each user account requires a username and password, with optional fields for first name, last name, and email address. Permissions can be assigned to users and groups.

## Remote Authentication

NetBox can also authenticate users via a remote backend by setting the `REMOTE_AUTH_BACKEND` configuration parameter.

### LDAP Authentication

```python
REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'
```

NetBox supports LDAP authentication. Refer to the LDAP installation docs for more details.

### HTTP Header Authentication

```python
REMOTE_AUTH_BACKEND = 'netbox.authentication.RemoteUserBackend'
```

This method allows HTTP header-based user assignment, where the front-end server handles client authentication and passes user info via headers. The default user header is `REMOTE_USER`, customizable through `REMOTE_AUTH_HEADER`. Additional profile info can be supplied via `REMOTE_USER_FIRST_NAME`, `REMOTE_USER_LAST_NAME`, and `REMOTE_USER_EMAIL` headers.

!!! warning Verify Header Compatibility
    Some WSGI servers may drop headers with unsupported characters. For example, gunicorn v22.0 and later drops HTTP headers containing underscores, which can be disabled by changing gunicorn's `header_map` setting.

### Single Sign-On (SSO)

```python
REMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'
```

NetBox supports SSO via the python-social-auth library. To enable SSO, specify the backend path within the `social_core` package. Most backends require additional configuration prefixed with `SOCIAL_AUTH_`, imported from NetBox's `configuration.py`. The authentication pipeline can be customized via `SOCIAL_AUTH_PIPELINE`.

#### Configuring the SSO module's appearance

The display of remote authentication backends on the login page can be adjusted using the `SOCIAL_AUTH_BACKEND_ATTRS` parameter, which maps a backend's name to `(display_name, icon)`.

For example, to customize the OIDC backend:

```python
SOCIAL_AUTH_BACKEND_ATTRS = {
    'oidc': ("My awesome SSO", "login"),
}
```
=== END FILE ===

**Google**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/google/
=== BEGIN FILE ===
# Google

This guide explains how to configure single sign-on (SSO) support for NetBox using Google OAuth2 as an authentication backend.

## Google OAuth2 Configuration

1. Log into console.cloud.google.com.
2. Create new project for NetBox.
3. Under "APIs and Services" click "OAuth consent screen" and enter the required information.
4. Under "Credentials," click "Create Credentials" and select "OAuth 2.0 Client ID." Select type "Web application."
    - "Authorized JavaScript origins" should follow the format `http[s]://<netbox>[:<port>]`
    - "Authorized redirect URIs" should follow the format `http[s]://<netbox>[:<port>]/oauth/complete/google-oauth2/`
5. Copy the "Client ID" and "Client Secret" values somewhere convenient.

Note: Google requires the NetBox hostname to use a public top-level-domain (e.g. `.com`, `.net`). The use of IP addresses is not permitted (except `127.0.0.1`).

For more information, consult Google's documentation.

## NetBox Configuration

### 1. Enter configuration parameters

Enter the following configuration parameters in `configuration.py`, substituting your own values:

```python
REMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '{CLIENT_ID}'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '{CLIENT_SECRET}'
```

### 2. Restart NetBox

Restart the NetBox services so that the new configuration takes effect. This is typically done with the command below:

```no-highlight
sudo systemctl restart netbox
```

## Testing

Log out of NetBox if already authenticated, and click the "Log In" button at top right. You should see the normal login form as well as an option to authenticate using Google. Click that link.

You should be redirected to Google's authentication portal. Enter the username/email and password of your test account to continue. You may also be prompted to grant this application access to your account.

If successful, you will be redirected back to the NetBox UI, and will be logged in as the Google user. You can verify this by navigating to your profile. This user account has been replicated locally to NetBox, and can now be assigned groups and permissions.
=== END FILE ===

**Microsoft Entra ID**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/microsoft-entra-id/
=== BEGIN FILE ===
# Microsoft Entra ID

This guide details the configuration of single sign-on (SSO) for NetBox using Microsoft Entra ID as an authentication backend.

## Entra ID Configuration

### 1. Create a test user (optional)

Create a new user in AD for testing, or skip if an account exists.

### 2. Create an app registration

Navigate to **Add > App registration** in Azure Active Directory. Enter a name (e.g., "NetBox"), select "single tenant," and set the "Redirect URI" to your NetBox installation path ending with `/oauth/complete/azuread-oauth2/`. Ensure the URI starts with `https://`.

!!! tip "Multitenant authentication"
    NetBox supports multitenant authentication via Azure AD with different backend and configuration. Refer to the [`python-social-auth` documentation](https://python-social-auth.readthedocs.io/en/latest/backends/azuread.html#tenant-support) for details.

### 3. Create a secret

In the app registration, click "Add a certificate or secret" under "Client credentials." Create a new client secret and note the secret value for NetBox configuration.

## NetBox Configuration

### 1. Enter configuration parameters

Add the following to `configuration.py`, replacing with your values:

```python
REMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2'
SOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}'
SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}'
```

### 2. Restart NetBox

Restart NetBox services with:

```no-highlight
sudo systemctl restart netbox
```

## Testing

Log out of NetBox and click "Log In." Select the Azure AD authentication option, enter your test account credentials, and grant access if prompted. Successful authentication redirects to the NetBox UI, where you can verify your profile.

## Troubleshooting

### Redirect URI does not Match

Ensure the redirect URI matches the app configuration and starts with `https://`. If using `http://`, configure `SOCIAL_AUTH_REDIRECT_IS_HTTPS = True` in `configuration.py`.

### Not Logged in After Authenticating

If redirected but not logged in, verify the backend and app registration settings, ensuring they align with the `azuread.AzureADOAuth2` backend for single-tenant registration.
=== END FILE ===

**Okta**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/authentication/okta/
=== BEGIN FILE ===
# Okta

This guide explains how to configure single sign-on (SSO) support for NetBox using Okta as an authentication backend.

## Okta Configuration

Okta offers free developer accounts at https://developer.okta.com/.

### 1. Create a test user (optional)

Create a new user in the Okta admin portal for testing. This step can be skipped if a suitable account already exists.

### 2. Create an app registration

In the Okta administration dashboard, navigate to **Applications > Applications**, and click "Create App Integration." Select "OIDC" as the sign-in method and "Web application" for the application type.

On the next page, name the app integration (e.g., "NetBox") and specify the sign-in and sign-out URIs:

* Sign-in URI: `https://{netbox}/oauth/complete/okta-openidconnect/`
* Sign-out URI: `https://{netbox}/oauth/disconnect/okta-openidconnect/`

Under "Assignments," select the appropriate controlled access setting and click "Save."

Note the following parameters for NetBox configuration:

* Client ID
* Client secret
* Okta domain

## NetBox Configuration

### 1. Enter configuration parameters

In `configuration.py`, enter the following parameters, substituting your values:

```python
REMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect'
SOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}'
SOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}'
SOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/'
```

### 2. Restart NetBox

Restart the NetBox services with the command:

```no-highlight
sudo systemctl restart netbox
```

## Testing

Log out of NetBox if authenticated, and click the "Log In" button. You should see the login form and an option to authenticate using Okta. Click that link.

You will be redirected to Okta's authentication portal. Enter the username/email and password of your test account. You may need to grant this application access to your account.

If successful, you will be redirected back to the NetBox UI, logged in as the Okta user. This user account is replicated locally to NetBox and can now be assigned groups and permissions.
=== END FILE ===

**Permissions**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/permissions/
=== BEGIN FILE ===
# Object-Based Permissions

NetBox uses an object-based permissions framework that replaces Django's built-in model. This allows administrators to grant users or groups permissions to perform actions on specific subsets of objects. A permission consists of:

* Object type(s)
* User(s)/Group(s)
* Action(s)
* Constraints

At least one object type, user/group, and action must be specified for a permission. Constraints are optional and can limit actions to specific object instances.

## Actions

Four core actions are permitted for each object type:

* **View** - Retrieve an object
* **Add** - Create a new object
* **Change** - Modify an existing object
* **Delete** - Delete an existing object

Custom actions can also be defined, such as the `run` permission for scripts.

## Constraints

Constraints are defined as a JSON object or list, similar to Django query filters. All attributes in a JSON object are combined with a logical AND. For example:

```json
{
  "status": "active",
  "region__name": "Americas"
}
```

For logical OR, multiple objects can be defined in a list:

```json
[
  {
    "vid__gte": 100,
    "vid__lt": 200
  },
  {
    "status": "reserved"
  }
]
```

### User Token

The `$user` token can reference the current user in constraints, e.g.:

```json
{
  "created_by": "$user"
}
```

### Default Permissions

Default permissions can be set for all authenticated users using the `DEFAULT_PERMISSIONS` configuration parameter.

### Example Constraint Definitions

| Constraints | Description |
| ----------- | ----------- |
| `{"status": "active"}` | Status is active |
| `{"status__in": ["planned", "reserved"]}` | Status is active **OR** reserved |
| `{"status": "active", "role": "testing"}` | Status is active **AND** role is testing |
| `{"name__startswith": "Foo"}` | Name starts with "Foo" |
| `{"name__iendswith": "bar"}` | Name ends with "bar" |
| `{"vid__gte": 100, "vid__lt": 200}` | VLAN ID is between 100 and 199 |
| `[{"vid__lt": 200}, {"status": "reserved"}]` | VLAN ID is less than 200 **OR** status is reserved |

## Permissions Enforcement

### Viewing Objects

Permissions filter database queries based on user requests. If a user lacks the necessary permission, a 403 response is returned. If granted, constraints are compiled for the model and action.

### Creating and Modifying Objects

When creating or modifying an object, NetBox starts a transaction. After the object is created, a second query checks if it matches the permission constraints. If not, the transaction is rolled back.
=== END FILE ===

**Error Reporting**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/error-reporting/
=== BEGIN FILE ===
# Error Reporting

## Sentry

### Enabling Error Reporting

NetBox integrates with [Sentry](https://sentry.io/) for automatic error reporting. Enable it by setting `SENTRY_ENABLED` to True and defining your unique [data source name (DSN)](https://docs.sentry.io/product/sentry-basics/concepts/dsn-explainer/) in `configuration.py`.

```python
SENTRY_ENABLED = True
SENTRY_DSN = "https://examplePublicKey@o0.ingest.sentry.io/0"
```

Setting `SENTRY_ENABLED` to False will disable the integration.

### Assigning Tags

You can attach tags to outgoing error reports by setting the `SENTRY_TAGS` parameter:

```python
SENTRY_TAGS = {
    "custom.foo": "123",
    "custom.bar": "abc",
}
```

!!! warning "Reserved tag prefixes"
    Avoid using tag names that begin with `netbox.`, as this prefix is reserved.

### Testing

After saving the configuration, restart the NetBox service. To test Sentry, generate a 404 error by navigating to an invalid URL, such as `https://netbox/404-error-testing`, ensuring debug mode is disabled. The issue should appear in Sentry shortly after.
=== END FILE ===

**Housekeeping**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/housekeeping/
=== BEGIN FILE ===
# Housekeeping

NetBox includes a `housekeeping` management command that should be run nightly. This command handles:

* Clearing expired authentication sessions from the database
* Deleting changelog records older than the configured [retention time](../configuration/miscellaneous.md#changelog_retention)
* Deleting job result records older than the configured [retention time](../configuration/miscellaneous.md#job_retention)
* Check for new NetBox releases (if [`RELEASE_CHECK_URL`](../configuration/miscellaneous.md#release_check_url) is set)

This command can be invoked directly, or by using the shell script provided at `/opt/netbox/contrib/netbox-housekeeping.sh`.

## Scheduling

### Using Cron

This script can be linked from your cron scheduler's daily jobs directory (e.g. `/etc/cron.daily`) or referenced directly within the cron configuration file.

```shell
sudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping
```

Note: On Debian-based systems, be sure to omit the `.sh` file extension when linking to the script from within a cron directory. Otherwise, the task may not run.

### Using Systemd

First, create symbolic links for the systemd service and timer files. Link the existing service and timer files from the `/opt/netbox/contrib/` directory to the `/etc/systemd/system/` directory:

```bash
sudo ln -s /opt/netbox/contrib/netbox-housekeeping.service /etc/systemd/system/netbox-housekeeping.service
sudo ln -s /opt/netbox/contrib/netbox-housekeeping.timer /etc/systemd/system/netbox-housekeeping.timer
```

Then, reload the systemd configuration and enable the timer to start automatically at boot:

```bash
sudo systemctl daemon-reload
sudo systemctl enable --now netbox-housekeeping.timer
```

Check the status of your timer by running:

```bash
sudo systemctl list-timers --all
```

This command will show a list of all timers, including your `netbox-housekeeping.timer`. Make sure the timer is active and properly scheduled. 

Your NetBox housekeeping service is now configured to run daily using systemd.
=== END FILE ===

**Replicating NetBox**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/replicating-netbox/
=== BEGIN FILE ===
# Replicating NetBox

## Replicating the Database

NetBox uses a PostgreSQL database, and general PostgreSQL best practices apply. The database can be exported and restored using `pg_dump` and `psql`.

### Export the Database

Use `pg_dump` to export the database:

```no-highlight
pg_dump --username netbox --password --host localhost netbox > netbox.sql
```

To exclude changelog data, use:

```no-highlight
pg_dump ... --exclude-table-data=extras_objectchange netbox > netbox.sql
```

### Load an Exported Database

To restore a database, delete any existing instance first:

```no-highlight
psql -c 'drop database netbox'
psql -c 'create database netbox'
psql netbox < netbox.sql
```

PostgreSQL user accounts and permissions are not included in the dump and must be created manually.

### Export the Database Schema

To export only the schema:

```no-highlight
pg_dump --username netbox --password --host localhost -s netbox > netbox_schema.sql
```

---

## Replicating Uploaded Media

NetBox stores uploaded files in its media directory. To replicate NetBox, copy both the database and media files.

### Archive the Media Directory

From the NetBox installation path, run:

```no-highlight
tar -czf netbox_media.tar.gz netbox/media/
```

### Restore the Media Directory

To extract the archive:

```no-highlight
tar -xf netbox_media.tar.gz
```
=== END FILE ===

**NetBox Shell**
URL: https://netboxlabs.com/docs/netbox/en/stable/administration/netbox-shell/
=== BEGIN FILE ===
# The NetBox Python Shell

NetBox provides a Python management shell for querying, creating, modifying, and deleting objects. To access the shell, use:

```
./manage.py nbshell
```

This launches a customized Django shell with NetBox models pre-loaded. The command `lsmodels()` lists available models.

!!! warning
    The shell allows direct access to NetBox data with minimal validation. Ensure only authorized users have access and always maintain a full backup.

## Querying Objects

Objects are retrieved using a Django queryset, typically in the form `<model>.objects.all()`. For example:

```
>>> Device.objects.all()
```

To iterate through objects:

```
>>> for device in Device.objects.all():
...   print(device.name, device.device_type)
```

To count objects:

```
>>> Device.objects.count()
```

To retrieve a specific object:

```
>>> Site.objects.get(pk=7)
```

### Filtering Querysets

Use `filter()` to retrieve specific subsets:

```
>>> Device.objects.filter(status="active")
```

Querysets can be sliced:

```
>>> Device.objects.filter(status="active")[:3]
```

To count filtered objects:

```
>>> Device.objects.filter(status="active").count()
```

Relationships can be traversed using double-underscore:

```
>>> Device.objects.filter(tenant__name="Pied Piper")
```

Reverse relationships can also be queried:

```
>>> Device.objects.filter(interfaces__name="em0")
```

Character fields can use `contains` or `icontains`:

```
>>> Device.objects.filter(name__icontains="testdevice")
```

Numeric fields can be filtered by comparison:

```
>>> VLAN.objects.filter(vid__gt=2000)
```

Multiple filters can be combined:

```
>>> VLAN.objects.filter(vid__gt=2000, name__icontains="engineering")
```

To exclude a filtered queryset:

```
>>> Device.objects.exclude(status="active").count()
```

!!! info
    For comprehensive filtering options, refer to the Django queryset API documentation.

## Creating and Updating Objects

Create new objects by instantiating the model and calling `save()`:

```
>>> lab1 = Site.objects.get(pk=7)
>>> myvlan = VLAN(vid=123, name='MyNewVLAN', site=lab1)
>>> myvlan.full_clean()
>>> myvlan.save()
```

To update an object:

```
>>> vlan = VLAN.objects.get(pk=1280)
>>> vlan.name = 'BetterName'
>>> vlan.full_clean()
>>> vlan.save()
```

!!! warning
    Avoid using `bulk_create()` and `update()` as they bypass validation.

## Deleting Objects

To delete an object, call `delete()`:

```
>>> vlan.delete()
```

To delete multiple objects:

```
>>> Device.objects.filter(name__icontains='test').delete()
```

!!! warning
    Deletions are immediate and irreversible; consider the impact carefully before proceeding.
=== END FILE ===

**Data Model**
**Circuits**
**Circuit**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuit/
=== BEGIN FILE ===
# Circuits

A circuit is a physical point-to-point data connection used for interconnecting sites over long distances, such as for Internet connectivity.

## Fields

### Provider

The provider to which this circuit belongs.

### Provider Account

Circuits can be assigned to a specific provider account.

### Circuit ID

A unique identifier for the circuit, specific to the assigned provider.

### Circuit Type

Each circuit is classified by a user-defined circuit type, such as "Internet access" or "MPLS/VPN."

### Status

The operational status of the circuit, with default statuses including:

| Name           |
|----------------|
| Planned        |
| Provisioning   |
| Active         |
| Offline        |
| Deprovisioning |
| Decommissioned |

Custom circuit statuses can be defined by setting `Circuit.status` under the `FIELD_CHOICES` configuration parameter.

### Description

A brief description of the circuit.

### Installation Date

The date the circuit was installed.

### Termination Date

The date the circuit is scheduled to be disconnected.

### Commit Rate

The committed rate (throughput) of the circuit, measured in kilobits per second.
=== END FILE ===

**CircuitGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuitgroup/
=== BEGIN FILE ===
# Circuit Groups

This feature was introduced in NetBox v4.1. Circuits can be arranged into administrative groups for organization. The assignment of a circuit to a group is optional.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)
=== END FILE ===

**CircuitGroupAssignment**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuitgroupassignment/
=== BEGIN FILE ===
# Circuit Group Assignments

Circuits can be assigned to circuit groups for correlation purposes, allowing multiple circuits from different providers to share the same group. Each assignment can include an optional priority designation.

## Fields

### Group

The circuit group being assigned.

### Circuit

The circuit that is being assigned to the group.

### Priority

The circuit's operation priority relative to its peers within the group. The assignment of a priority is optional. Choices include:

* Primary
* Secondary
* Tertiary
* Inactive

Additional priority choices may be defined by setting `CircuitGroupAssignment.priority` under the `FIELD_CHOICES` configuration parameter.
=== END FILE ===

**Circuit Termination**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuittermination/
=== BEGIN FILE ===
# Circuit Terminations

Each circuit may have up to two terminations, designated A and Z, connecting to a site, device interface, or provider network. Circuits must connect to a physical interface, not virtual ones like LAG interfaces, requiring separate physical circuits for each LAG member.

A circuit in NetBox represents a physical link with a maximum of two endpoints. Multi-point topologies must be modeled as discrete circuits, with one end in the provider's infrastructure.

## Fields

### Circuit

The [circuit](./circuit.md) to which this termination belongs.

### Termination Side

Designates the termination as forming either the A or Z end of the circuit.

### Mark Connected

If selected, the circuit termination will be considered "connected" even if no cable has been connected to it in NetBox.

### Site

The [site](../dcim/site.md) associated with this circuit termination, allowing cable connections to device interfaces.

### Provider Network

Circuits not connecting to a NetBox site can terminate to a [provider network](./providernetwork.md) representing an unknown network operated by a [provider](./provider.md).

### Port Speed

The operating speed of the terminated interface in kilobits per second.

### Upstream Speed

The upstream speed of the terminated interface in kilobits per second, if different from downstream speed.

### Cross-connect ID

In data centers, circuits are often delivered via a local cross-connect; recording its ID is advisable.

### Patch Panel & Port(s)

Used to track physical connection details outside the scope of what is modeled in NetBox.
=== END FILE ===

**Circuit Type**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/circuittype/
=== BEGIN FILE ===
# Circuit Types

Circuits are classified by functional type, which are customizable and indicate the type of service delivered. Examples of circuit types include:

* Internet transit
* Out-of-band connectivity
* Peering
* Private backhaul

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier, useful for filtering.
=== END FILE ===

**Provider**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/provider/
=== BEGIN FILE ===
# Providers

A provider is any entity that offers connectivity among sites or organizations. This includes carriers providing Internet and private transit services, Internet exchange points, and direct peering organizations. Each circuit within NetBox must be assigned a provider and a unique circuit ID.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### ASNs

The AS numbers assigned to this provider (optional).

### Portal URL

The URL for the provider's customer service portal.

### NOC Contact

Contact details for the provider's network operations center (NOC).

### Admin Contact

Administrative contact details for the provider.
=== END FILE ===

**Provider Account**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/provideraccount/
=== BEGIN FILE ===
# Provider Accounts

This model represents individual accounts associated with a provider.

## Fields

### Provider

The provider the account belongs to.

### Name

A unique, human-friendly name for the provider.

### Account Number

The administrative account identifier for this provider within your organization.
=== END FILE ===

**Provider Network**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/circuits/providernetwork/
=== BEGIN FILE ===
# Provider Networks

This model represents the boundary of a provider network, which may include details that are not relevant to the NetBox user, such as a provider's regional MPLS network with multiple circuits.

## Fields

### Provider

The [provider](./provider.md) responsible for the operation of this network.

### Name

A human-friendly name, unique to the provider.

### Service ID

An arbitrary identifier used as an alternate reference for the type of connectivity or service being delivered.
=== END FILE ===

**Core**
**DataFile**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/core/datafile/
=== BEGIN FILE ===
# Data Files

A data file object in NetBox represents a file from a remote data source. These files are synchronized automatically and cannot be modified locally, though they can be deleted.

## Fields

### Source

The data source to which this file belongs.

### Path

The relative path to the file based on its source's URL. For example, a file at `/opt/config-data/routing/bgp/peer.yaml` with a source URL of `file:///opt/config-data/` would have its path set to `routing/bgp/peer.yaml`.

### Last Updated

The date and time when the file was last updated from its source. This attribute updates only when the file's contents change, not during re-synchronization if the upstream file remains unchanged.

### Size

The file's size in bytes.

### Hash

A SHA256 hash of the file's data, which can be compared to the original file's hash to check for changes.
=== END FILE ===

**DataSource**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/core/datasource/
=== BEGIN FILE ===
# Data Sources

A data source is an external repository of data that NetBox can consume, such as a git repository. Files within the data source are synchronized to NetBox by saving them in the database as data file objects.

## Fields

### Name

The data source's human-friendly name.

### Type

The type of data source. Supported options include:

* Local directory
* git repository
* Amazon S3 bucket

### URL

The URL identifying the remote source. Examples include:

| Type      | Example URL                                        |
|-----------|----------------------------------------------------|
| Local     | file:///path/to/my/data/                           |
| git       | https://github.com/my-organization/my-repo         |
| Amazon S3 | https://s3.us-east-2.amazonaws.com/my-bucket-name/ |

### Status

The source's current synchronization status, updated automatically when synchronized.

### Enabled

If false, synchronization will be disabled.

### Ignore Rules

A set of rules identifying filenames to ignore during synchronization. Examples include:

| Rule           | Description                              |
|----------------|------------------------------------------|
| `README`       | Ignore any files named `README`          |
| `*.txt`        | Ignore any files with a `.txt` extension |
| `data???.json` | Ignore e.g. `data123.json`               |

### Last Synced

The date and time at which the source was most recently synchronized successfully.
=== END FILE ===

**Job**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/core/job/
=== BEGIN FILE ===
# Jobs

The Job model is utilized for scheduling and recording the execution of background tasks.

## Fields

### Name
Identifier of the NetBox object associated with the job.

## Object Type
Type of object (model) linked to this job.

### Created
Date and time when the job was created.

### Scheduled
Date and time when the job is scheduled to execute.

### Interval
Interval (in minutes) for re-execution of a scheduled job.

### Completed
Date and time when the job was completed.

### User
User who created the job.

### Status
Current status of the job, with potential values:

| Value    | Description                                         |
|----------|-----------------------------------------------------|
| Pending  | Awaiting execution by an RQ worker process          |
| Scheduled| Scheduled for a future date/time                    |
| Running  | Currently executing                                  |
| Completed| Successfully completed                               |
| Failed   | The job did not complete successfully                |
| Errored  | An unexpected error was encountered during execution |

### Data
Data associated with the job's execution, such as log output.

### Job ID
UUID for unique identification of the job within a queue.
=== END FILE ===

**DCIM**
**Cable**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/cable/
=== BEGIN FILE ===
# Cables

All connections between device components in NetBox are represented using cables, which signify a direct physical connection between two endpoints (A and B). Cables can connect to various objects, including:

* Network interfaces
* Console ports
* Console server ports
* Pass-through ports (front and rear)
* Circuit terminations
* Power ports
* Power outlets
* Power feeds

## Fields

### Status

The cable's operational status includes:

* Active (default)
* Planned
* Decommissioning

### Type

The cable's physical medium or classification.

### Label

An arbitrary label used to identify the cable.

### Color

The color of the cable.

### Length

The numeric length of the cable, including a unit designation (e.g. 100 meters or 25 feet).

## Tracing Cables

Cables can be traced from any endpoint by clicking the "trace" button or via a REST API endpoint. NetBox follows the path of connected cables from the termination across to the far-end termination, continuing through pass-through ports until it reaches a non-pass-through or unconnected termination point, displaying the entire path to the user.
=== END FILE ===

**ConsolePort**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleport/
=== BEGIN FILE ===
# Console Ports

A console port provides connectivity to the physical console of a device, used for temporary access by someone nearby or for remote out-of-band access via a networked console server.

Tip: Console ports are instantiated automatically from console port templates assigned to the selected device type when a device is created.

## Fields

- **Device**: The device to which this console port belongs.
- **Module**: The installed module within the assigned device to which this console port belongs (optional).
- **Name**: The name of the console port, which must be unique to the parent device.
- **Label**: An alternative physical label identifying the console port.
- **Type**: The type of console port.
- **Speed**: Operating speed, in bits per second (bps).
- **Mark Connected**: If selected, this component will be treated as if a cable has been connected.
=== END FILE ===

**ConsolePortTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleporttemplate/
=== BEGIN FILE ===
# Console Port Templates

A template for a console port that will be created on all instantiations of the parent device type. See the console port documentation for more detail.
=== END FILE ===

**ConsoleServerPort**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleserverport/
=== BEGIN FILE ===
# Console Server Ports

A console server provides remote access to local consoles of connected devices, mainly for out-of-band access to network devices, connecting to console ports.

Tip: Console server ports are automatically instantiated from console server port templates assigned to the device type upon device creation.

## Fields

- **Device**: The device to which this console server port belongs.
- **Module**: The installed module within the assigned device (optional).
- **Name**: Must be unique to the parent device.
- **Label**: An alternative physical label for the console server port.
- **Type**: The type of console server port.
- **Speed**: Operating speed in bits per second (bps).
- **Mark Connected**: If selected, treats the component as if a cable is connected.
=== END FILE ===

**ConsoleServerPortTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/consoleserverporttemplate/
=== BEGIN FILE ===
# Console Server Port Templates

A template for a console server port that will be created on all instantiations of the parent device type. See the console server port documentation for more detail.
=== END FILE ===

**Device**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/device/
=== BEGIN FILE ===
# Devices

Devices in NetBox represent hardware installed within a site or rack, measured in rack units (U), and can be full depth or half depth. A device can have a height of 0U, meaning it does not occupy vertical rack space, such as a vertically-mounted PDU. Multi-U devices are mounted in the lowest-numbered rack unit they occupy. Full-depth devices prevent the installation of other devices on the opposite rack face.

Devices must be instantiated from a pre-created device type, which automatically creates default components. Device names must be unique within a site unless assigned to a tenant, and devices can also be unnamed. A primary IP can be designated for devices with interfaces that have IP addresses assigned.

## Fields

### Name
- Configured name of the device (optional, must be unique).

### Role
- Functional device role assigned.

### Device Type
- Defines the device's make & model, with templated components replicated upon creation.

### Airflow
- Direction of air circulation for cooling.

### Serial Number
- Unique physical serial number from the manufacturer.

### Asset Tag
- Unique label for identifying hardware resources.

### Site
- Location of the device.

### Location
- Specific location within the site (optional).

### Rack
- Rack in which the device is installed (optional).

### Rack Face
- Primary face on which the device is mounted.

### Position
- Base rack unit where the device is mounted.

### Latitude & Longitude
- GPS coordinates for geolocation.

### Status
- Operational status of the device.

### Platform
- Associated operating system platform.

### Configuration Template
- Template for rendering device configuration, overriding role or platform templates.

### Primary IPv4 & IPv6 Addresses
- Designation of primary management IP addresses.

### Out-of-band (OOB) IP Address
- IP address for accessing network infrastructure via a separate management network.

### Cluster
- Assignment for virtualization cluster hosting.

### Virtual Chassis
- Membership in a virtual chassis.

### VC Position
- Member position in a virtual chassis.

### VC Priority
- Priority for master election in a virtual chassis.

### Local Config Context Data
- Unique context data associated with the device.
=== END FILE ===

**DeviceBay**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicebay/
=== BEGIN FILE ===
# Device Bays

Device bays are slots within a parent device for installing child devices, such as blade servers in a 2U chassis. The chassis appears as a 2U device with four device bays, while each server is a 0U device in a bay. Child devices are independent entities with their own platform, role, tags, and components, and they do not count as consuming rack units.

Device bays are not suitable for line cards, which rely on the parent device's control plane; these should be modeled as modules in module bays. Device bays are created automatically from device bay templates assigned to the device type.

## Fields

### Device

The device to which this device bay belongs.

### Name

The device bay's name, which must be unique to the parent device.

### Label

An alternative physical label identifying the device bay.
=== END FILE ===

**DeviceBayTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicebaytemplate/
=== BEGIN FILE ===
# Device Bay Templates

A template for a device bay will be created for all instantiations of the parent device type. Refer to the device bay documentation for further details.
=== END FILE ===

**DeviceRole**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicerole/
=== BEGIN FILE ===
# Device Roles

Devices can be organized by functional roles, which are customizable by the user. Examples include roles for core switches, distribution switches, and access switches.

## Fields

### Name

- A unique human-friendly name.

### Slug

- A unique URL-friendly identifier. (This value can be used for filtering.)

### Color

- The color used when displaying the role in the NetBox UI.

### VM Role

- If selected, this role may be assigned to [virtual machines](../virtualization/virtualmachine.md).

### Configuration Template

- The default [configuration template](../extras/configtemplate.md) for devices assigned to this role.
=== END FILE ===

**DeviceType**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/devicetype/
=== BEGIN FILE ===
# Device Types

A device type represents a specific make and model of hardware, defining its physical attributes and components. Device types can be instantiated as devices within sites or equipment racks, allowing for multiple instances of a type, such as a Juniper EX4300-48T network switch. Instances inherit components from their device type, but changes to the type do not retroactively affect instances.

Note: The parent/child relationship is not suitable for chassis-based devices, which should be modeled as modules or inventory items.

## Fields

### Manufacturer
The manufacturer producing this device type.

### Model
The unique model number assigned by the manufacturer.

### Slug
A unique URL-friendly representation of the model identifier.

### Default Platform
Automatically inherited platform for instantiated devices, changeable post-creation.

### Part Number
An alternative part number for unique identification.

### Height
Physical height in rack units; `0` for non-rack-mountable devices.

### Is Full Depth
Indicates if the device occupies both front and rear faces of a rack.

### Parent/Child Status
Indicates if the type is a parent, child, or neither.

### Airflow
Default airflow direction within the device chassis.

### Weight
Numeric weight of the device with unit designation.

### Front & Rear Images
Users can upload images of the device's front and rear panels for rendering in rack elevation diagrams.
=== END FILE ===

**FrontPort**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/frontport/
=== BEGIN FILE ===
# Front Ports

Front ports are pass-through ports representing physical cable connections in a longer path, such as those on a UTP patch panel modeled in NetBox. Each port has a physical type and must map to a specific rear port on the same device, with a single rear port potentially mapping to multiple front ports using numeric positions.

!!! tip  
Like most device components, front ports are instantiated automatically from front port templates assigned to the selected device type when a device is created.

## Fields

### Device

The device to which this port belongs.

### Module

The installed module within the assigned device to which this port belongs (optional).

### Name

The port's name. Must be unique to the parent device.

### Label

An alternative physical label identifying the port.

### Type

The port's termination type.

### Rear Ports

The rear port and position to which this front port maps.

!!! tip  
When creating multiple front ports using a patterned name (e.g. `Port [1-12]`), you may select the equivalent number of rear port-position mappings from the list.

### Color

The port's color (optional).

### Mark Connected

If selected, this component will be treated as if a cable has been connected.
=== END FILE ===

**FrontPortTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/frontporttemplate/
=== BEGIN FILE ===
# Front Port Templates

A template for a front-facing pass-through port that will be created on all instantiations of the parent device type. See the front port documentation for more detail.
=== END FILE ===

**Interface**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/interface/
=== BEGIN FILE ===
# Interfaces

Interfaces in NetBox represent network interfaces for data exchange with devices, primarily Ethernet but also other types. IP addresses and VLANs can be assigned to interfaces. 

- Interfaces are automatically instantiated from [interface templates](./interfacetemplate.md) during device creation.
- Devices and virtual machines use separate models for interfaces, leading to different properties.

## Fields

- **Device:** The device to which the interface belongs.
- **Module:** The installed module within the device (optional).
- **Name:** Unique name of the interface as reported by the OS.
- **Label:** Alternative physical label for the interface.
- **Type:** Physical or virtual interface; only physical can connect via cables.
- **Speed:** Operating speed in kilobits per second (kbps).
- **Duplex:** Operation duplex (full, half, or auto).
- **VRF:** [Virtual routing and forwarding](../ipam/vrf.md) instance assigned to the interface.
- **MAC Address:** 48-bit MAC address for Ethernet interfaces.
- **WWN:** 64-bit world-wide name for Fibre Channel interfaces.
- **MTU:** Configured maximum transmissible unit.
- **Transmit Power:** Configured output power in dBm for optical interfaces.
- **Enabled:** Interface status (enabled or disabled).
- **Management Only:** Designates interface for management traffic only.
- **Mark Connected:** Treats the component as if a cable is connected.
- **Parent Interface:** Virtual interfaces can bind to a physical parent interface.
- **Bridged Interface:** Interfaces can be bridged symmetrically or grouped.
  - **Symmetric:** Point-to-point bridge between two interfaces.
  - **Grouped:** Multiple interfaces bridged to a common virtual bridge.
- **LAG Interface:** Physical interfaces in link aggregation groups (LAGs).
- **PoE Mode:** Power over Ethernet mode (PD or PSE).
- **PoE Type:** Classification of PoE transmission supported.
- **802.1Q Mode:** Identifies 802.1Q encapsulation strategy.
  - **Access:** Single VLAN with no tagging.
  - **Tagged:** One untagged VLAN and multiple tagged VLANs.
  - **Tagged (all):** All VLANs carried by the interface.
- **Untagged VLAN:** The native VLAN for the interface.
- **Tagged VLANs:** Configured tagged VLANs for the interface.
- **Wireless Role:** Configured role for wireless interfaces (access point or station).
- **Wireless Channel:** Configured channel for wireless interfaces.
- **Channel Frequency:** Operating frequency of a wireless interface in MHz.
- **Channel Width:** Configured channel width of a wireless interface in MHz.
- **Wireless LANs:** [Wireless LANs](../wireless/wirelesslan.md) for which the interface carries traffic.
=== END FILE ===

**InterfaceTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/interfacetemplate/
=== BEGIN FILE ===
# Interface Templates

A template for a network interface that will be created on all instantiations of the parent device type. See the interface documentation for more detail.
=== END FILE ===

**InventoryItem**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/inventoryitem/
=== BEGIN FILE ===
# Inventory Items

Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card, primarily for inventory purposes. They are hierarchical, allowing individual items to be designated as parents for other items. For instance, a line card can house several SFP optics as child items. Inventory items can also be associated with specific components within the same device, like a transceiver with an interface.

Tip: Inventory items can be instantiated automatically from [templates](./inventoryitemtemplate.md) assigned to the selected device type when a device is created.

## Fields

### Device
The device in which the inventory item is installed.

### Parent
The parent inventory item to which this item is assigned (optional).

### Name
The inventory item's name, which must be unique among its siblings if assigned to a parent item.

### Label
An alternative physical label identifying the inventory item.

### Role
The functional [role](./inventoryitemrole.md) assigned to this inventory item.

### Manufacturer
The [manufacturer](./manufacturer.md) that produced the item.

### Part ID
The part identification or model number assigned by the manufacturer.

### Serial Number
The serial number assigned by the manufacturer.

### Asset Tag
A unique, locally-administered label used to identify hardware resources.
=== END FILE ===

**InventoryItemRole**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/inventoryitemrole/
=== BEGIN FILE ===
# Inventory Item Roles

Inventory items can be organized by customizable functional roles. Examples include power supplies, fans, and interface optics.

## Fields

### Name

- A unique human-friendly name.

### Slug

- A unique URL-friendly identifier (used for filtering).

### Color

- The color used for displaying the role in the NetBox UI.
=== END FILE ===

**InventoryItemTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/inventoryitemtemplate/
=== BEGIN FILE ===
# Inventory Item Templates

A template for an inventory item is created automatically when a new device is instantiated. All attributes, including associations with a parent item and assigned component, are copied to the new inventory item. For more details, refer to the inventory item documentation.
=== END FILE ===

**Location**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/location/
=== BEGIN FILE ===
# Locations

Racks and devices can be grouped by location within a site. A location may represent a floor, room, cage, or similar organizational unit and can be nested to form a hierarchy.

## Fields

### Site

The parent site to which this location belongs.

### Parent

The parent location of which this location is a child (optional).

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### Status

The location's operational status.

!!! tip
    Additional statuses may be defined by setting `Location.status` under the `FIELD_CHOICES` configuration parameter.

### Facility

Data center or facility designation for identifying the location.
=== END FILE ===

**Manufacturer**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/manufacturer/
=== BEGIN FILE ===
# Manufacturers

A manufacturer represents the "make" of a device, such as Cisco or Dell. Each device type must be assigned to a manufacturer. Inventory items and platforms may also be associated with manufacturers.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. This value can be used for filtering.
=== END FILE ===

**Module**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/module/
=== BEGIN FILE ===
# Modules

A module is a field-replaceable hardware component within a device, commonly seen in chassis-based routers or switches. Modules are instantiated from [module types](./moduletype.md), with associated components automatically instantiated. Each module is installed in a [module bay](./modulebay.md) on a [device](./device.md), with one module per bay.

## Fields

### Device

The parent [device](./device.md) for the module.

### Module Bay

The [module bay](./modulebay.md) for the module.

### Module Type

The [module type](./moduletype.md) representing the hardware's make & model, with components instantiated from the module type by default.

### Status

The module's operational status.

!!! tip
    Additional statuses may be defined by setting `Module.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.

### Serial Number

The unique serial number assigned by the manufacturer.

### Asset Tag

A unique label for identifying hardware resources.

### Replicate Components

Controls automatic addition of template module type components when creating a new module.

### Adopt Components

Controls assignment of pre-existing components with matching names to the new module.
=== END FILE ===

**ModuleBay**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/modulebay/
=== BEGIN FILE ===
# Module Bays

Module bays are slots within a device for installing field-replaceable modules, such as in chassis-based switches like Cisco Nexus 9000 or Juniper EX9200. Modules contain components that enhance the parent device.

If modeling child devices, use a device bay instead.

Module bays are automatically instantiated from module bay templates assigned to the device type upon device creation.

## Fields

### Device

The device to which this module bay belongs.

### Module

This feature was introduced in NetBox v4.1. The module to which this bay belongs (optional).

### Name

The module bay's name, which must be unique to the parent device.

### Label

An alternative physical label for identifying the module bay.

### Position

The numeric position of the module bay, such as the slot number in a chassis-based switch.
=== END FILE ===

**ModuleBayTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/modulebaytemplate/
=== BEGIN FILE ===
# Module Bay Templates

A template for a module bay that will be created on all instantiations of the parent device type. See the module bay documentation for more detail.
=== END FILE ===

**ModuleType**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/moduletype/
=== BEGIN FILE ===
# Module Types

A module type represents a specific make and model of hardware component installable within a device's module bay, having its own child components. Examples include chassis-based switches or routers with field-replaceable line cards, each with a model number and specific components.

Each module type can have associated component templates, including:

* Interfaces
* Console ports
* Console server ports
* Power ports
* Power Outlets
* Front pass-through ports
* Rear pass-through ports

Device bays and module bays may not be added to modules.

## Automatic Component Renaming

The string `{module}` can reference the `position` field of the module bay for automatic component naming. For instance, a module type with interface templates named `Gi{module}/0/[1-48]` will be renamed to `Gi3/0/[1-48]` if installed in position "3". This feature applies to all modular component types.

## Fields

### Manufacturer

The manufacturer producing this type of module.

### Model

The unique model number assigned by the manufacturer.

### Part Number

An alternative part number for unique identification.

### Weight

The numeric weight of the module, including a unit designation (e.g., 3 kilograms or 1 pound).

### Airflow

The direction of air circulation through the device chassis for cooling, introduced in NetBox v4.1.
=== END FILE ===

**Platform**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/platform/
=== BEGIN FILE ===
# Platforms

A platform defines the type of software running on a device or virtual machine, useful for distinguishing between different versions or feature sets. Devices of the same type may have different platforms, e.g., a Juniper MX240 running different versions of Junos.

Platforms can be limited by manufacturer, meaning a platform assigned to a manufacturer can only be used on devices of that manufacturer. Assigning platforms to devices is optional.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### Manufacturer

If designated, this platform will be available only for devices assigned to this manufacturer, useful for limiting network operating systems to specific hardware.

### Configuration Template

The default configuration template for devices assigned to this platform.
=== END FILE ===

**PowerFeed**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerfeed/
=== BEGIN FILE ===
# Power Feed

A power feed is the distribution of power from a power panel to a device, typically a power distribution unit (PDU). It connects via a cable to a power port on the device and may be assigned to a rack for easier tracking of power distribution.

## Fields

### Power Panel

The power panel supplying upstream power to this feed.

### Rack

The rack within which this feed delivers power (optional).

### Name

The feed's unique name or identifier associated with the power panel.

### Status

The operational status of the feed.

Additional statuses can be defined by setting `PowerFeed.status` under the `FIELD_CHOICES` configuration parameter.

### Type

In redundant environments, power feeds can be designated as primary or redundant. In single-source environments, all feeds should be primary.

### Mark Connected

If selected, the feed will be treated as if a cable is connected.

### Supply

Type of electrical current (AC or DC).

### Voltage

Operating circuit voltage in volts.

### Amperage

Operating circuit amperage in amperes.

### Phase

Indicates single- or three-phase power.

### Max Utilization

Maximum safe utilization of the feed, expressed as a percentage of total available power, typically set around 80% to avoid tripping a breaker during heavy spikes.

The power utilization of a rack is calculated when one or more power feeds are assigned and connected to power-drawing devices.
=== END FILE ===

**PowerOutlet**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/poweroutlet/
=== BEGIN FILE ===
# Power Outlets

Power outlets are components on a power distribution unit (PDU) that supply power to devices. Each outlet can be assigned a physical type and associated with a specific feed leg or upstream power port, modeling power distribution.

For example, a PDU with one power port drawing from a three-phase feed may have 48 outlets divided into three banks of 16, with each bank linked to a different leg.

!!! tip
    Power outlets are created automatically from [power outlet templates](./poweroutlettemplate.md) when a device is set up.

## Fields

### Device

The device to which this power outlet belongs.

### Module

The installed module within the assigned device (optional).

### Name

The unique name of the power outlet within the parent device.

### Label

An alternative physical label for the power outlet.

### Type

The type of power outlet.

### Power Port

Maps each power outlet to the respective [power port](./powerport.md) on the device supplying power.

### Feed Leg

Indicates the leg of the three-phase power circuit for the outlet (leave blank for single-phase).

### Mark Connected

Indicates if a cable is considered connected to this component.
=== END FILE ===

**PowerOutletTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/poweroutlettemplate/
=== BEGIN FILE ===
# Power Outlet Templates

A template for a power outlet that will be created on all instantiations of the parent device type. See the power outlet documentation for more detail.
=== END FILE ===

**PowerPanel**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerpanel/
=== BEGIN FILE ===
# Power Panel

A power panel is the origin point in NetBox for electrical power distributed by one or more [power feeds](./powerfeed.md). In data centers, a power panel typically serves multiple racks, with individual power feeds extending to each rack. Redundant power is often provided by two sets of panels and feeds arranged in parallel.

!!! note  
    NetBox does not model how power is delivered to a power panel. Power panels define the root level of the power distribution hierarchy in NetBox.

## Fields

### Site

The [site](./site.md) where the power panel is located.

### Location

A specific [location](./location.md) within the assigned site for the power panel.

### Name

The power panel's name, which must be unique to the assigned site.
=== END FILE ===

**PowerPort**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerport/
=== BEGIN FILE ===
# Power Ports

A power port is a device component that draws power from an external source, typically representing a power supply within a device. 

- Power ports are instantiated from power port templates assigned to the device type during device creation.

## Fields

### Device
The device to which this power port belongs.

### Module
The installed module within the assigned device to which this power port belongs (optional).

### Name
The name of the power port, which must be unique to the parent device.

### Label
An alternative physical label identifying the power port.

### Type
The type of power port.

### Maximum Draw
The maximum amount of power this port consumes (in watts).

- When creating a power port on a device mapped to outlets supplying power to downstream devices, leave maximum and allocated draw numbers blank. Utilization will be calculated by summing all power ports of connected downstream devices.

### Allocated Draw
The budgeted amount of power this port consumes (in watts).

### Mark Connected
If selected, this component will be treated as if a cable has been connected.
=== END FILE ===

**PowerPortTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/powerporttemplate/
=== BEGIN FILE ===
# Power Port Templates

A template for a power port that will be created on all instantiations of the parent device type. See the power port documentation for more detail.
=== END FILE ===

**Rack**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rack/
=== BEGIN FILE ===
# Racks

The rack model represents a physical two- or four-post equipment rack for installing devices. Each rack must be assigned to a site and may optionally have a location within that site. Racks can be organized by user-defined functional roles, and each rack's name and facility ID within a location must be unique.

Rack height is measured in *rack units* (U), typically between 42U and 48U, but arbitrary heights can be defined. Racks can be configured to display rack units in ascending or descending order.

Each rack has a name and an optional facility ID, useful for tracking in data centers. A unique serial number and asset tag may also be associated with each rack.

## Fields

### Site

The site to which the rack is assigned.

### Location

The location within a site where the rack is installed (optional).

### Name

The rack's name or identifier, which must be unique to its location.

### Rack Type

The physical type of the rack, defining attributes like height and weight.

### Status

Operational status. Additional statuses can be defined by setting `Rack.status` under the `FIELD_CHOICES` configuration parameter.

### Role

The functional role fulfilled by the rack.

### Facility ID

An alternative identifier assigned by the facility operator for tracking purposes.

### Serial Number

The unique physical serial number assigned to the rack.

### Asset Tag

A unique label used to identify hardware resources.

Some additional fields for physical attributes like height and weight can be defined on each rack, but are generally defined on the rack type.
=== END FILE ===

**RackReservation**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rackreservation/
=== BEGIN FILE ===
# Rack Reservations

Users can reserve specific units within a [rack](./rackreservation.md) for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, and reservations may optionally be associated with a specific tenant.

## Fields

### Rack

The [rack](./rack.md) being reserved.

### Units

The rack unit or units being reserved. Multiple units can be expressed using commas and/or hyphens. For example, `1,3,5-7` specifies units 1, 3, 5, 6, and 7.

### User

The NetBox user account associated with the reservation. Note that users with sufficient permission can make rack reservations for other users.

### Description

Every rack reservation must include a description of its purpose.
=== END FILE ===

**RackRole**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rackrole/
=== BEGIN FILE ===
# Rack Roles

Each rack can have a user-defined functional role, such as compute, storage, or colocated customer devices.

## Fields

### Name

- A unique human-friendly name.

### Slug

- A unique URL-friendly identifier (used for filtering).

### Color

- The color used for displaying the role in the NetBox UI.
=== END FILE ===

**RackType**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/racktype/
=== BEGIN FILE ===
# Rack Types

A rack type defines the physical characteristics of a particular model of rack.

## Fields

### Manufacturer

The manufacturer which produces this type of rack.

### Model

The model number assigned to this rack type by its manufacturer. Must be unique to the manufacturer.

### Slug

A unique URL-friendly representation of the model identifier. (This value can be used for filtering.)

### Form Factor

A rack can be designated as one of the following form factors:

* 2-post frame
* 4-post frame
* 4-post cabinet
* Wall-mounted frame
* Wall-mounted cabinet

### Width

The canonical distance between the two vertical rails on a face. (Typically 19 inches, but other standard widths exist.)

### Height

The height of the rack, measured in units.

### Starting Unit

The number of the numerically lowest unit in the rack. Defaults to one, but may be higher in certain situations.

### Outer Dimensions

The external width and depth of the rack can be tracked to aid in floorplan calculations. Measurements must be in either millimeters or inches.

### Mounting Depth

The maximum depth of a mounted device that the rack can accommodate, in millimeters.

### Weight

The numeric weight of the rack, including a unit designation (e.g. 10 kilograms or 20 pounds).

### Maximum Weight

The maximum total weight capacity for all installed devices, inclusive of the rack itself.

### Descending Units

If selected, the rack's elevation will display unit 1 at the top of the rack. Most racks use ascending numbering.
=== END FILE ===

**RearPort**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rearport/
=== BEGIN FILE ===
# Rear Ports

Rear ports are pass-through ports that continue a path from one cable to another, defined by their physical type and number of positions. They can map to multiple front ports, useful for scenarios where multiple paths share a common cable.

Note: Front and rear ports do not need to be on the actual front or rear device face; this terminology distinguishes between components in a pass-through port pairing.

Tip: Rear ports are automatically instantiated from rear port templates assigned to the device type upon device creation.

## Fields

### Device

The device to which this port belongs.

### Module

The installed module within the assigned device to which this port belongs (optional).

### Name

The port's name, which must be unique to the parent device.

### Label

An alternative physical label identifying the port.

### Type

The port's termination type.

### Color

The port's color (optional).

### Positions

The number of front ports to which this rear port can be mapped. For example, a single 12-strand rear port can map to 12 discrete front ports. For rear ports mapping to a single front port, set this to `1`.

### Mark Connected

If selected, this component will be treated as if a cable has been connected.
=== END FILE ===

**RearPortTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/rearporttemplate/
=== BEGIN FILE ===
# Rear Port Templates

A template for a rear-facing pass-through port that will be created on all instantiations of the parent device type. See the rear port documentation for more detail.
=== END FILE ===

**Region**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/region/
=== BEGIN FILE ===
# Regions

Sites can be arranged geographically using regions, which may represent a continent, country, city, campus, or other areas. Regions can be nested recursively to create a hierarchy, such as defining country regions with state or city regions assigned to sites.

## Fields

### Parent

The parent region, if any.

### Name

The region's name. Must be unique to the parent region, if one is assigned.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)
=== END FILE ===

**Site**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/site/
=== BEGIN FILE ===
# Sites

The document discusses the concept of "sites" in network modeling, typically representing buildings or campuses. Examples include branches of a bank and corporate headquarters.

## Fields

### Name
- The site's unique name.

### Slug
- A unique URL-friendly identifier for filtering.

### Status
- The site's operational status.
- Additional statuses can be defined by setting `Site.status` under the `FIELD_CHOICES` configuration parameter.

### Region
- The parent region to which the site belongs.

### Facility
- Data center or facility designation for the site.

### ASNs
- Multiple AS numbers can be assigned to each site.

### Time Zone
- The site's local time zone, provided by the zoneinfo library.

### Physical Address
- The site's physical address for mapping.

### Shipping Address
- The address for deliveries to the site.
- Points of contact can also be designated for additional details.

### Latitude & Longitude
- GPS coordinates for geolocation.
=== END FILE ===

**SiteGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/sitegroup/
=== BEGIN FILE ===
# Site Groups

Site groups are used to organize sites by role or function, similar to regions which provide geographic organization. Site groups can be nested to form a hierarchy, where sites in a child group are also members of parent groups.

## Fields

### Parent

The parent site group, if any.

### Name

The site group's name. Must be unique to the parent group, if one is assigned.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)
=== END FILE ===

**VirtualChassis**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/virtualchassis/
=== BEGIN FILE ===
# Virtual Chassis

A virtual chassis is a set of devices sharing a common control plane, often exemplified by a stack of switches functioning as a single managed device. Each device is a VC member, assigned a position and optional priority. VC members typically reside in the same rack, but this is not mandatory.

One member device may be the VC master, assigned a name, services, virtual interfaces, and management attributes. If a VC master is defined, interfaces from all VC members are visible in its device interfaces view, excluding management-only interfaces from other members.

!!! note
    A virtual chassis is **not** suitable for modeling a chassis-based switch with removable line cards (e.g., Juniper EX9208). Use [modules](./module.md) instead.

## Fields

### Name

The virtual chassis' name.

### Domain

The domain assigned for VC member devices.

### Master

The member device designated as the chassis master (optional).
=== END FILE ===

**VirtualDeviceContext**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/dcim/virtualdevicecontext/
=== BEGIN FILE ===
# Virtual Device Context

A virtual device context (VDC) is a logical partition within a physical device that allows allocation of interfaces from the parent device, providing an isolated control plane while sharing resources. It is similar to a virtual machine but does not offer full virtualization. 

Each VDC must be assigned to a device upon creation, allowing interfaces to be assigned to one or more VDCs. A VDC can have multiple interfaces, and an interface can belong to multiple VDCs.

!!! info "A VDC by Any Other Name"  
Network vendors use different terms for this concept: Cisco uses VDC, Juniper uses _Virtual Routing Instance_, and Fortinet uses _Virtual Domain_. Despite nuances in implementations, the core concept is consistent.

## Fields

### Device
The device to which this VDC belongs.

### Name
The VDC's configured name, which must be unique to the assigned device.

### Status
The operational status of the VDC.

### Identifier
A vendor-prescribed unique identifier for the VDC (optional), which must be unique to the assigned device if defined.

### Primary IPv4 & IPv6 Addresses
Each VDC may designate one primary IPv4 address and/or one primary IPv6 address for management purposes.

!!! tip  
NetBox will prefer IPv6 addresses over IPv4 addresses by default, adjustable via the `PREFER_IPV4` configuration parameter.
=== END FILE ===

**Extras**
**Bookmark**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/bookmark/
=== BEGIN FILE ===
# Bookmarks

A user can bookmark individual objects for convenient access. Bookmarks are listed under a user's profile and can be displayed using a dashboard widget.

## Fields

### User

The user to whom the bookmark belongs.

### Object

The bookmarked object.
=== END FILE ===

**Branch**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/branch/
=== BEGIN FILE ===
# Branches

A branch is a collection of related staged changes prepared for merging into the active database. It can be merged using the `commit()` method. Deleting a branch removes all its related changes.

## Fields

### Name

The branch's name.

### User

The user to which the branch belongs (optional).
=== END FILE ===

**ConfigContext**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/configcontext/
=== BEGIN FILE ===
# Configuration Contexts

Context data is available to devices and/or virtual machines based on their relationships to other objects in NetBox. Context data can be associated with devices assigned to a particular site or virtual machines in a certain cluster.

See the context data documentation for more information.

## Fields

### Name

- A unique human-friendly name.

### Weight

- A numeric value influencing the order of context data merging. Lower weight contexts are merged before higher weight ones.

### Data

- The context data expressed in JSON format.

### Data File

- Config context data may be sourced from a remote data file, synchronized from a remote source. Local data specification is unnecessary as it will be populated automatically.

### Is Active

- If not selected, the config context will be excluded from rendering, allowing for temporary disabling.

### Object Assignment

- Each configuration context may be assigned to any number of supported object types. If no related objects are selected, it is considered a "global" config context, applying to all devices and virtual machines.
=== END FILE ===

**ConfigTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/configtemplate/
=== BEGIN FILE ===
# Configuration Templates

Configuration templates render device configurations from context data. They are written in Jinja2 and can be linked to device roles, platforms, or individual devices. Context data is available to devices and virtual machines based on their relationships in NetBox, such as site assignments or cluster memberships. For further details, refer to the configuration rendering documentation.

## Fields

### Name

- A unique human-friendly name.

### Weight

- A numeric value influencing the order of context data merging; lower weights merge first.

### Data File

- Template code can be sourced from a remote data file, synchronized from a remote source, eliminating the need for local template code.

### Template Code

- Jinja2 template code defined locally.

### Environment Parameters

- A dictionary of additional parameters for instantiating the Jinja2 environment, allowing modification of its default behavior.
=== END FILE ===

**CustomField**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/customfield/
=== BEGIN FILE ===
# Custom Fields

NetBox administrators can add custom fields to most object types to extend the built-in data model. 

## Fields

### Model(s)
Select the NetBox object type(s) for the custom field.

### Name
The raw field name for database and API use, consisting of alphanumeric characters and underscores.

### Label
An optional human-friendly name for the custom field.

### Group Name
Specify a group name for related custom fields; otherwise, they are ordered by weight and name.

### Type
The data type for the field must be one of the following:

| Type               | Description                                                        |
|--------------------|--------------------------------------------------------------------|
| Text               | Free-form text (single-line)                                      |
| Long text          | Free-form of any length; supports Markdown                        |
| Integer            | Whole number (positive or negative)                               |
| Boolean            | True or false                                                     |
| Date               | Date in ISO 8601 format (YYYY-MM-DD)                             |
| URL                | Presented as a link in the web UI                                 |
| JSON               | Arbitrary data in JSON format                                     |
| Selection          | One of several pre-defined choices                                 |
| Multiple selection | Supports multiple values                                           |
| Object             | A single NetBox object of the defined type                        |
| Multiple object    | One or more NetBox objects of the defined type                    |

### Related Object Type
Designates the type of NetBox object referenced for object and multiple-object fields.

### Related Object Filter
Introduced in NetBox v4.1, this filter limits available objects for object fields based on attributes.

### Weight
A numeric weight to override alphabetical ordering; lower weights appear first.

### Required
If enabled, the field must have a valid value for object validation.

### Unique
If enabled, each object must have a unique value for this field.

### Description
An optional brief description of the field's purpose.

### Filter Logic
Defines how filters are evaluated:

| Option   | Description                         |
|----------|-------------------------------------|
| Disabled | Filtering disabled                  |
| Loose    | Match any occurrence of the value   |
| Exact    | Match only the complete field value |

### UI Visible
Controls field visibility in the UI:

| Option | Description                                                    |
|--------|----------------------------------------------------------------|
| Always | Always displayed (default)                                     |
| If set | Displayed only if a value is defined                          |
| Hidden | Not displayed                                                  |

### UI Editable
Controls field editability in the UI:

| Option | Description                                                                  |
|--------|------------------------------------------------------------------------------|
| Yes    | Value may be changed (default)                                              |
| No     | Value displayed but not alterable                                           |
| Hidden | Not displayed when editing                                                  |

### Default
The default value for the custom field when creating new objects, expressed as JSON.

### Choice Set
Valid choices for selection and multi-select custom fields.

### Cloneable
If enabled, values will be pre-populated when cloning objects.

### Minimum Value
The minimum valid value for numeric fields (optional).

### Maximum Value
The maximum valid value for numeric fields (optional).

### Validation Regex
A regular expression for validating string-based custom fields (optional).
=== END FILE ===

**CustomFieldChoiceSet**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/customfieldchoiceset/
=== BEGIN FILE ===
# Custom Field Choice Sets

Single- and multi-selection custom fields must define a set of valid choices for users. These choices can be reused across multiple custom fields and include a base choice set and/or extra choices.

## Fields

### Name

The human-friendly name of the choice set.

### Base Choices

The set of pre-defined choices to include. Available sets are:

* IATA airport codes
* ISO 3166 - Two-letter country codes
* UN/LOCODE - Five-character location identifiers

### Extra Choices

A set of custom choices that will be appended to the base choice set.

### Order Alphabetically

If enabled, the choices list will be ordered alphabetically; if disabled, choices will appear in the order defined.
=== END FILE ===

**CustomLink**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/customlink/
=== BEGIN FILE ===
# Custom Links

Users can add custom links to object views in NetBox to reference external resources, such as linking devices to a monitoring system. 

## Fields

### Name
- The name of the custom link, primarily for administrative purposes. Links of the same weight are ordered alphabetically by name in the UI.

### Content Type
- The type of NetBox object to which this custom link applies.

### Weight
- A numeric weight to override alphabetical ordering. Lower weights appear before higher weights within a custom link group.

### Group Name
- Specifies the name of the group for grouping custom links, which will be listed in a dropdown menu.

### Button Class
- Defines the color of the UI button.

### Enabled
- If not selected, the custom link will not be rendered, useful for temporary disabling.

### New Window
- If selected, the link opens in a new browser tab or window.

### Link Text
- Jinja2 template code for rendering the button text. Empty text values will not display in the UI.

### Link URL
- Jinja2 template code for rendering the hyperlink.

## Context Data

The following context variables are available in the text and link templates:

| Variable  | Description                                                                 |
|-----------|-----------------------------------------------------------------------------|
| `object`  | The NetBox object being displayed                                           |
| `debug`   | A boolean indicating whether debugging is enabled                           |
| `request` | The current WSGI request                                                    |
| `user`    | The current user (if authenticated)                                         |
| `perms`   | The permissions assigned to the user                                        |
=== END FILE ===

**EventRule**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/eventrule/
=== BEGIN FILE ===
# EventRule

An event rule in NetBox automates actions in response to events, such as running scripts or sending webhooks. For instance, it can notify a monitoring system when a device's status changes. This is achieved by creating an event for device objects and designating a webhook for transmission. When a change is detected, an HTTP request with the change details is sent to the specified receiver.

See the [event rules documentation](../../features/event-rules.md) for more information.

## Fields

### Name

A unique human-friendly name.

### Content Types

The type(s) of object in NetBox that will trigger the rule.

### Enabled

If not selected, the event rule will not be processed.

### Events Types

The event types which will trigger the rule. At least one event type must be selected.

| Name           | Description                                 |
|----------------|---------------------------------------------|
| Object created | A new object has been created               |
| Object updated | An existing object has been modified        |
| Object deleted | An object has been deleted                  |
| Job started    | A background job is initiated               |
| Job completed  | A background job completes successfully     |
| Job failed     | A background job fails                      |
| Job errored    | A background job is aborted due to an error |

!!! tip "Custom Event Types"
    The above list includes only built-in event types. NetBox plugins can also register their own custom event types.

### Conditions

A set of [prescribed conditions](../../reference/conditions.md) against which the triggering object will be evaluated. If the conditions are defined but not met by the object, no action will be taken. An event rule that does not define any conditions will _always_ trigger.
=== END FILE ===

**ExportTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/exporttemplate/
=== BEGIN FILE ===
# Export Templates

Export templates are utilized to render data from NetBox objects, such as generating network monitoring service configurations from device lists. For further details, refer to the export templates documentation.

## Fields

### Name

The name of the export template, visible in the "export" dropdown list in the NetBox UI.

### Content Type

The type of NetBox object applicable to the export template.

### Data File

Template code can be sourced from a remote data file, synchronized from a remote source, eliminating the need for local content.

### Template Code

Jinja2 template code for rendering the exported data.

### MIME Type

Optional MIME type for the response when rendering the export template, defaulting to `text/plain`.

### File Extension

Optional file extension to append to the file name in the response.

### As Attachment

If selected, the rendered content will be returned as a file attachment instead of being displayed directly in-browser.
=== END FILE ===

**ImageAttachment**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/imageattachment/
=== BEGIN FILE ===
# Image Attachments

Certain objects in NetBox allow for image attachments, which are saved on the server and accessible when viewing the object.

## Fields

### Name

The name of the image. If not specified, it is inferred from the uploaded file's name.

### Image

The image file to upload, which must be a supported image type to avoid validation failure.
=== END FILE ===

**JournalEntry**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/journalentry/
=== BEGIN FILE ===
# Journal Entries

Most objects in NetBox support journaling, allowing users to record chronological notes about changes or work on resources. For instance, a technician may add a journal entry when replacing a failed power supply.

## Fields

### Kind

A general classification for the entry type (info, success, warning, or danger).

- Additional kinds may be defined by setting `JournalEntry.kind` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.

### Comments

The body of the journal entry. Markdown rendering is supported.
=== END FILE ===

**Notification**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/notification/
=== BEGIN FILE ===
# Notification

A notification alerts a user about specific actions in NetBox, like object modifications or background job completions. Notifications can be generated through a user's subscription to an object or by an event rule targeting a notification group that includes the user.

## Fields

### User

The recipient of the notification.

### Object

The object related to the notification.

### Event Type

The type of event indicated by the notification.
=== END FILE ===

**NotificationGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/notificationgroup/
=== BEGIN FILE ===
# Notification Group

A set of NetBox users and/or groups identified as recipients for certain notifications.

## Fields

### Name

The name of the notification group.

### Users

One or more users designated as members of the notification group.

### Groups

All users of selected groups are considered members of the notification group.
=== END FILE ===

**SavedFilter**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/savedfilter/
=== BEGIN FILE ===
# Saved Filters

Users can save applied filters in NetBox for future use, which is useful for complex filtering strategies. After applying filters, users can create a saved filter with a name and optional description for future queries via the UI and REST API.

## Fields

### Name

The filter's human-friendly name.

### Slug

The unique identifier for referencing the filter (e.g. `?filter=my-slug`).

### User

The user to whom the filter belongs, assigned automatically when created via the UI.

### Weight

A numeric weight to override alphabetical ordering; lower weights appear first.

### Enabled

Indicates if the filter can be used; disabled filters won't appear in the UI but are included in API results.

### Shared

Indicates if the filter is for all users or only its owner; disabling does not hide the filter from others.

### Parameters

The query parameters for the active filter, specified as JSON data. For example, the URL query string

```
?status=active&region_id=51&tag=alpha&tag=bravo
```

is represented in JSON as

```json
{
  "tag": ["alpha", "bravo"],
  "status": "active",
  "region_id": 51
}
```
=== END FILE ===

**StagedChange**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/stagedchange/
=== BEGIN FILE ===
# Staged Changes

A staged change involves creating, modifying, or deleting an object for future execution, assigned to a branch. Changes can be applied individually using the `apply()` method, but bulk application via the parent branch's `commit()` method is recommended.

## Fields

Staged changes are typically managed through the [`checkout()`](../../plugins/development/staged-changes.md) context manager.

### Branch

The branch to which this change belongs.

### Action

The type of action: `create`, `update`, or `delete`.

### Object

A generic foreign key referencing the existing object.

### Data

JSON representation of the changes (not applicable for deletions).
=== END FILE ===

**Subscription**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/subscription/
=== BEGIN FILE ===
# Subscription

A record indicating that a user is to be notified of any changes to a particular NetBox object. A notification maps exactly one user to exactly one object. When an object to which a user is subscribed changes, a notification is generated for the user.

## Fields

### User

The subscribed user.

### Object

The object to which the user is subscribed.
=== END FILE ===

**Tag**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/tag/
=== BEGIN FILE ===
# Tags

Tags are user-defined labels in NetBox that help organize objects beyond built-in relationships. They can identify ownership or conditions across various object types.

## Fields

### Name

A unique human-friendly label for the tag.

### Slug

A unique URL-friendly identifier, automatically generated from the tag's name but can be modified.

### Color

The color used for displaying the tag in the NetBox UI.

### Object Types

Tags can be limited to specific object types, such as devices and virtual machines. If not specified, tags are assignable to any object type.
=== END FILE ===

**Webhook**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/extras/webhook/
=== BEGIN FILE ===
# Webhooks

A webhook is a mechanism for notifying an external system about changes in NetBox, such as device status updates. This involves creating a webhook for the device model and specifying a receiver. When a change occurs, an HTTP request with the change details is sent to the receiver.

## Fields

### Name

A unique human-friendly name.

### Content Types

The type(s) of object in NetBox that will trigger the webhook.

### Enabled

If not selected, the webhook will be inactive.

### Events

The events which will trigger the webhook. At least one event type must be selected.

| Name       | Description                          |
|------------|--------------------------------------|
| Creations  | A new object has been created        |
| Updates    | An existing object has been modified |
| Deletions  | An object has been deleted           |
| Job starts | A job for an object starts           |
| Job ends   | A job for an object terminates       |

### URL

The URL to which the webhook HTTP request will be made.

### HTTP Method

The type of HTTP request to send. Options are:

* `GET`
* `POST`
* `PUT`
* `PATCH`
* `DELETE`

### HTTP Content Type

The content type to indicate in the outgoing HTTP request header.

### Additional Headers

Any additional header to include with the outgoing HTTP request, defined as `Name: Value`.

### Body Template

Jinja2 template for a custom request body. If not defined, NetBox will use a raw dump of the webhook context.

### Secret

A secret string for request authenticity, appending a `X-Hook-Signature` header.

### Conditions

A set of prescribed conditions for evaluating the triggering object. If conditions are defined but not met, the webhook will not be sent.

### SSL Verification

Controls validation of the receiver's SSL certificate when HTTPS is used.

!!! warning
    Disabling this can expose your webhooks to man-in-the-middle attacks.

### CA File Path

The file path to a specific CA file for SSL certificate validation.

## Context Data

The following context variables are available in templates.

| Variable     | Description                                        |
|--------------|----------------------------------------------------|
| `event`      | The event type (`create`, `update`, or `delete`)   |
| `timestamp`  | The time at which the event occurred                |
| `model`      | The type of object impacted                        |
| `username`   | The name of the user associated with the change    |
| `request_id` | The unique request ID                              |
| `data`       | A complete serialized representation of the object |
| `snapshots`  | Pre- and post-change snapshots of the object       |
=== END FILE ===

**IPAM**
**ASN**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/asn/
=== BEGIN FILE ===
# ASNs

An Autonomous System Number (ASN) is a numeric identifier used in the Border Gateway Protocol (BGP) to identify the originating or transiting autonomous system of a prefix. NetBox supports both 16- and 32-bit ASNs.

ASNs must be globally unique within NetBox and can be allocated from a defined range. Each ASN may be assigned to multiple sites.

## Fields

### AS Number

The 16- or 32-bit AS number.

### RIR

The Regional Internet Registry or similar authority responsible for the allocation of this particular ASN.

### Sites

The site(s) to which this ASN is assigned.
=== END FILE ===

**ASNRange**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/asnrange/
=== BEGIN FILE ===
# ASN Ranges

Ranges are used to group AS numbers numerically for automatic provisioning, with each range assigned to a RIR.

## Fields

### Name

A unique human-friendly name for the range.

### Slug

A unique URL-friendly identifier for filtering.

### RIR

The Regional Internet Registry or similar authority responsible for AS number allocation.

### Start & End

The inclusive starting and ending numeric boundaries of the range.
=== END FILE ===

**Aggregate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/aggregate/
=== BEGIN FILE ===
# Aggregates

IP addressing is hierarchical, with IPv4 structured in tiers from /0 to /32 (and /128 for IPv6). Organizations typically focus on specific portions of IP space, defined as _aggregates_, which correspond to public or private IP allocations. Common private designations include:

* 10.0.0.0/8 (RFC 1918)
* 100.64.0.0/10 (RFC 6598)
* 172.16.0.0/12 (RFC 1918)
* 192.168.0.0/16 (RFC 1918)
* One or more /48s within fd00::/8 (IPv6 unique local addressing)

Each aggregate is linked to a [RIR](./rir.md) and can include an allocation date. Prefixes are organized under their parent aggregates in NetBox, and aggregates cannot overlap. For example, defining both 10.0.0.0/8 and 10.16.0.0/16 is not allowed; 10.16.0.0/16 would be a container prefix under 10.0.0.0/8.

## Fields

### Prefix

The IPv4 or IPv6 network this aggregate represents.

### RIR

The [Regional Internet Registry](./rir.md) or similar authority which governs allocations of this address space from the global pool.

### Date Added

The date on which the address space was allocated or deployed.
=== END FILE ===

**FHRPGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/fhrpgroup/
=== BEGIN FILE ===
# FHRP Group

A first-hop redundancy protocol (FHRP) allows multiple physical interfaces to present a virtual IP address (VIP) redundantly. Examples include:

* Hot Standby Router Protocol (HSRP)
* Virtual Router Redundancy Protocol (VRRP)
* Common Address Redundancy Protocol (CARP)
* Gateway Load Balancing Protocol (GLBP)

When creating a new FHRP group, a VIP can be optionally created and will be automatically assigned. Virtual IP addresses can also be assigned post-creation.

## Fields

### Protocol

The wire protocol used by servers to maintain the virtual IP address(es) for the group.

### Group ID

The numeric identifier for the group.

### Name

An optional name for the FHRP group.

### Authentication Type

The type of authentication used by group nodes, if applicable.

### Authentication Key

The shared key for group authentication, if applicable.

!!! warning
    The authentication key value is stored in plaintext in NetBox's database. Avoid using this field if encryption at rest for shared keys is required.
=== END FILE ===

**FHRPGroupAssignment**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/fhrpgroupassignment/
=== BEGIN FILE ===
# FHRP Group Assignments

Member device and VM interfaces can be assigned to [FHRP groups](./fhrpgroup.md) for maintaining a common virtual IP address (VIP). Multiple interfaces from different routers can share the same FHRP group for a VIP, each with a different priority.

Interfaces are assigned to FHRP groups under the interface detail view.

## Fields

### Group

The [FHRP group](./fhrpgroup.md) being assigned.

### Interface

The device or VM interface to which the group is being assigned.

### Priority

A value between 0 and 255 indicating the interface's priority for being elected as the master/primary node in the group.
=== END FILE ===

**IPAddress**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/ipaddress/
=== BEGIN FILE ===
# IP Addresses

An IP address object in NetBox includes a host address (IPv4 or IPv6) and its subnet mask, representing an IP address on a network interface. IP addresses can be assigned to device and virtual machine interfaces, as well as FHRP groups. Each device and virtual machine may have one primary IP per address family.

!!! tip
    When primary IPs are set for both IPv4 and IPv6, NetBox will prefer IPv6. This can be changed by setting the `PREFER_IPV4` configuration parameter.

## Network Address Translation (NAT)

An IP address can be designated as the NAT inside IP for exactly one other IP address, indicating a translation between public and private IPs. This relationship is bidirectional.

!!! note
    NetBox does not support tracking application-level NAT relationships (port address translation).

## Fields

### Address

The IPv4 or IPv6 address and mask in CIDR notation (e.g. `192.0.2.0/24`).

### Status

The operational status of the IP address.

!!! tip
    Additional statuses may be defined by setting `ipam.IPAddress.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.

### Role

The functional role of the IP address includes:

* **Loopback:** Configured on a loopback interface
* **Secondary:** One of multiple IPs on an interface
* **Anycast:** For anycast services
* **VIP:** General-purpose virtual IP
* **VRRP:** Managed with the VRRP protocol
* **HSRP:** Managed with the HSRP protocol
* **GLBP:** Managed with the GLBP protocol
* **CARP:** Managed with the CARP protocol

!!! tip
    Virtual IPs should be assigned to FHRP groups rather than actual interfaces.

### VRF

The [Virtual Routing and Forwarding](./vrf.md) instance for this IP address.

!!! note
    VRF assignment is optional; IPs with no VRF are in the "global" table.

### DNS Name

A DNS A/AAAA record value associated with this IP address.
=== END FILE ===

**IPRange**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/iprange/
=== BEGIN FILE ===
# IP Ranges

This model represents a range of IPv4 or IPv6 addresses, inclusive of starting and ending addresses. For example, the range 192.0.2.10 to 192.0.2.20 has eleven members, with the total count available as the `size` property on an IPRange instance. Each IP range may optionally be assigned to a VRF.

## Fields

### VRF

The Virtual Routing and Forwarding instance in which this IP range exists. VRF assignment is optional, and ranges without a VRF are in the "global" table.

### Start & End Address

The beginning and ending IP addresses that define the range, both must specify the correct mask. The maximum supported size of an IP range is 2^32 - 1.

### Role

The user-defined functional role assigned to the IP range.

### Status

The operational status of the IP range, which does not affect the statuses of its member IP addresses. Additional statuses can be defined by setting `IPRange.status` under the `FIELD_CHOICES` configuration parameter.

### Mark Utilized

If enabled, the IP range will be considered 100% utilized regardless of the number of defined IP addresses, useful for documenting DHCP ranges.
=== END FILE ===

**Prefix**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/prefix/
=== BEGIN FILE ===
# Prefixes

A prefix is an IPv4 or IPv6 network and mask in CIDR notation (e.g. 192.0.2.0/24), representing only the network portion of an IP address, with all bits not covered by the mask being zero. Prefixes are organized by their parent aggregate and assigned to a VRF.

## Fields

### Prefix

The IPv4 or IPv6 network this prefix represents.

### Status

The operational status of the prefix, which does not affect its member IP addresses. The "container" status indicates the prefix is for organizing child prefixes.

!!! tip
    Additional statuses may be defined by setting `Prefix.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.

### VRF

The Virtual Routing and Forwarding instance in which this prefix exists. VRF assignment is optional; prefixes without a VRF are in the "global" table.

### Role

The user-defined functional role assigned to the prefix.

### Is a Pool

Indicates if the prefix should be treated as a pool, making the first and last IP addresses usable, ideal for documenting NAT pools.

### Mark Utilized

If selected, this prefix will report 100% utilization regardless of the number of child objects defined within it.

### Site

The site to which this prefix is assigned (optional).

### VLAN

The VLAN to which this prefix is assigned (optional), useful for associating IP space with layer two domains. A VLAN may have multiple prefixes assigned to it.
=== END FILE ===

**RIR**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/rir/
=== BEGIN FILE ===
# Regional Internet Registries (RIRs)

Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. Some address space is reserved for internal use, as defined in RFCs 1918 and 6598, which NetBox also considers as a form of RIR. Lower-tier registries exist for specific geographic areas.

Users can create RIRs, but each aggregate must be assigned to one RIR. For example, if an organization has been allocated 104.131.0.0/16 by ARIN and uses RFC 1918 addressing internally, they would create RIRs named "ARIN" and "RFC 1918," then create an aggregate for each top-level prefix, assigning it to the respective RIR.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### Private

Designates this RIR as an authority for private/local IP space only (e.g. an RFC).
=== END FILE ===

**Role**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/role/
=== BEGIN FILE ===
# Prefix/VLAN Roles

A role indicates the function of a prefix or VLAN, such as Data, Voice, and Security. Typically, a prefix is assigned the same functional role as its associated VLAN.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### Weight

A numeric weight used to influence the ordering of roles. Roles with a lower weight are listed before those with higher weights.
=== END FILE ===

**RouteTarget**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/routetarget/
=== BEGIN FILE ===
# Route Targets

A route target is a type of extended BGP community used to manage route redistribution among VRF tables in a network. They can be assigned to VRFs in NetBox as import or export targets to facilitate exchange in an L3VPN. Each route target requires a unique name, following the format specified by RFC 4364, similar to a VR route distinguisher.

## Fields

### Name

The route target identifier formatted in accordance with RFC 4360.
=== END FILE ===

**Service**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/service/
=== BEGIN FILE ===
# Services

A service represents a layer seven application on a device or virtual machine, such as an HTTP server on TCP/8000. Services can be bound to specific interfaces on the device or virtual machine. Users can create a [service template](./servicetemplate.md) for efficient service definition replication.

## Fields

### Name

A service or protocol name.

### Protocol

The wire protocol for the service. Options include UDP, TCP, and SCTP.

### Ports

One or more numeric ports for the service. Multiple ports can be listed using commas and/or hyphens. Example: `80,8001-8003` indicates ports 80, 8001, 8002, and 8003.

### IP Addresses

The [IP address(es)](./ipaddress.md) to which the service is bound. If no IP addresses are specified, the service is reachable via any assigned IP address.
=== END FILE ===

**ServiceTemplate**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/servicetemplate/
=== BEGIN FILE ===
# Service Templates

Service templates are utilized for instantiating services on devices and virtual machines.

## Fields

### Name

A service or protocol name.

### Protocol

The wire protocol for the service, with options including UDP, TCP, and SCTP.

### Ports

One or more numeric ports to which the service is bound, expressed using commas and/or hyphens. For example, `80,8001-8003` specifies ports 80, 8001, 8002, and 8003.
=== END FILE ===

**VLAN**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/vlan/
=== BEGIN FILE ===
# VLANs

A Virtual LAN (VLAN) is an isolated layer two domain identified by a name and a numeric ID (1-4094) as per IEEE 802.1Q. VLANs are organized into VLAN groups to define scope and enforce uniqueness.

## Fields

### ID

A 12-bit numeric ID for the VLAN, 1-4094 (inclusive).

### Name

The configured VLAN name.

### Status

The VLAN's operational status.

!!! tip
    Additional statuses may be defined by setting `VLAN.status` under the `FIELD_CHOICES` configuration parameter.

### Role

The user-defined functional role assigned to the VLAN.

### VLAN Group or Site

The VLAN group or site to which the VLAN is assigned.
=== END FILE ===

**VLANGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/vlangroup/
=== BEGIN FILE ===
# VLAN Groups

VLAN groups organize VLANs within NetBox and can be scoped to various entities such as regions, site groups, sites, locations, racks, cluster groups, or clusters. Member VLANs are available for assignment to devices and virtual machines within the specified scope. Each VLAN within a group must have a unique ID and name, while VLANs not assigned to a group may have overlapping names and IDs.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### VLAN ID Ranges

The set of VLAN IDs encompassed by the group, defaulting to the entire range of valid IEEE 802.1Q VLAN IDs (1 to 4094, inclusive). VLANs created within a group must have a VID within these ranges, which may not overlap.

### Scope

The domain covered by a VLAN group, defined as one of the supported object types, conveying the context in which a VLAN group applies.
=== END FILE ===

**VRF**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/ipam/vrf/
=== BEGIN FILE ===
# Virtual Routing and Forwarding (VRF)

A VRF object in NetBox represents a Virtual Routing and Forwarding (VRF) domain, functioning as an independent routing table. VRFs isolate customers or organizations within a network and manage overlapping address spaces. Each prefix, IP range, and IP address can be assigned to one VRF, with unassigned objects belonging to the "global" table.

## Fields

### Name

The configured or administrative name for the VRF instance.

### Route Distinguisher

Used to map routes to VRFs within a device's routing table, particularly for MPLS/VPN. Assignment is optional and follows RFC 4364 guidelines, though formatting is not strictly enforced.

### Enforce Unique Space

NetBox allows duplicate prefixes in a VRF by default, but this can be changed by setting the "enforce unique" flag. Unique IP space enforcement for the global table can be managed with the `ENFORCE_GLOBAL_UNIQUE` setting.

### Import & Export Targets

Each VRF can have multiple import and/or export route targets to manage route exchanges among VRFs in L3VPNs.
=== END FILE ===

**Tenancy**
**Contact**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/contact/
=== BEGIN FILE ===
# Contacts

A contact in NetBox represents an individual or group associated with an object for administrative purposes, such as operational contacts for sites.

## Fields

### Group

The [contact group](./contactgroup.md) assigned to this contact (if any).

### Name

The contact's name, which can be an individual or a team/department (this is the only required detail).

### Title

The contact's title or role.

### Phone

The contact's phone number (no specific format enforced by NetBox).

### Email

The contact's email address.

### Address

The contact's physical or mailing address.

### Link

A URL for reaching the contact through other means.
=== END FILE ===

**ContactGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/contactgroup/
=== BEGIN FILE ===
# Contact Groups

Contacts can be organized into arbitrary groups, which can be recursively nested. Each contact within a group must have a unique name, while other attributes can be repeated.

## Fields

### Parent

The parent contact group (if any).

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. This value can be used for filtering.
=== END FILE ===

**ContactRole**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/contactrole/
=== BEGIN FILE ===
# Contact Roles

Contacts can be organized by customizable functional roles, such as administrative, operational, or emergency contacts.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier, useful for filtering.
=== END FILE ===

**Tenant**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/tenant/
=== BEGIN FILE ===
# Tenants

A tenant represents a discrete grouping of resources for administrative purposes, typically for individual customers or internal departments.

## Fields

### Name

A human-friendly name, unique to the assigned group.

### Slug

A URL-friendly identifier, unique to the assigned group. (This value can be used for filtering.)

### Group

The [tenant group](./tenantgroup.md) to which this tenant belongs (if any).
=== END FILE ===

**TenantGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/tenancy/tenantgroup/
=== BEGIN FILE ===
# Tenant Groups

Tenants can be organized by custom groups, such as "Customers" and "Departments." Assigning a tenant to a group is optional. Tenant groups can be nested recursively for a multi-level hierarchy, allowing for subgroups based on product or account team.

## Fields

### Parent

The parent tenant group (if any).

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)
=== END FILE ===

**Virtualization**
**Cluster**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/cluster/
=== BEGIN FILE ===
# Clusters

A cluster is a logical grouping of physical resources for running virtual machines. Physical devices can be associated with clusters as hosts, enabling tracking of virtual machine locations.

## Fields

### Name

A unique, human-friendly name for the cluster within its group and site.

### Type

The assigned cluster type.

### Group

The cluster group to which this cluster belongs.

### Status

The operational status of the cluster.

!!! tip
    Additional statuses may be defined by setting `Cluster.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.

### Site

The associated site for the cluster.
=== END FILE ===

**ClusterGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/clustergroup/
=== BEGIN FILE ===
# Cluster Groups

Cluster groups are used to organize clusters, and their creation is optional.

## Fields

### Name

- A unique human-friendly name.

### Slug

- A unique URL-friendly identifier, useful for filtering.
=== END FILE ===

**ClusterType**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/clustertype/
=== BEGIN FILE ===
# Cluster Types

A cluster type represents a technology or mechanism for forming a cluster. Examples include "VMware vSphere" for locally hosted clusters and "DigitalOcean NYC3" for cloud-hosted clusters.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier, useful for filtering.
=== END FILE ===

**VMInterface**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/vminterface/
=== BEGIN FILE ===
## Interfaces

Virtual machine interfaces behave similarly to device interfaces: they can be assigned to VRFs, may have IP addresses, VLANs, and services attached, but lack physical attributes. VM interfaces do not have a physical type and cannot have cables attached.

## Fields

### Virtual Machine

The virtual machine to which this interface is assigned.

### Name

The interface's name. Must be unique to the assigned VM.

### Parent Interface

Identifies the parent interface of a subinterface (e.g., used for encapsulation).

!!! note
    An interface with child interfaces cannot be deleted until all child interfaces have been deleted or reassigned.

### Bridged Interface

An interface on the same VM with which this interface is bridged.

### Enabled

If not selected, this interface will be treated as disabled/inoperative.

### MAC Address

The 48-bit MAC address (for Ethernet interfaces).

### MTU

The interface's configured maximum transmissible unit (MTU).

### 802.1Q Mode

For switched Ethernet interfaces, this identifies the 802.1Q encapsulation strategy. Options include:

* **Access:** All traffic is assigned to a single VLAN, with no tagging.
* **Tagged:** One untagged "native" VLAN is allowed, plus any number of tagged VLANs.
* **Tagged (all):** All VLANs are carried by the interface, with one untagged VLAN designated.

This field must be blank for routed interfaces without 802.1Q encapsulation.

### Untagged VLAN

The "native" VLAN for the interface. Valid only when one of the above 802.1Q modes is selected.

### Tagged VLANs

The tagged VLANs configured to be carried by this interface. Valid only for the "tagged" 802.1Q mode.

### VRF

The virtual routing and forwarding instance to which this interface is assigned.
=== END FILE ===

**VirtualDisk**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/virtualdisk/
=== BEGIN FILE ===
# Virtual Disks

A virtual disk models discrete virtual hard disks for virtual machines.

## Fields

### Name

- A unique, human-friendly name for the virtual machine.

### Size

- The allocated disk size in megabytes.
=== END FILE ===

**VirtualMachine**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/virtualization/virtualmachine/
=== BEGIN FILE ===
# Virtual Machines

A virtual machine (VM) is a virtual compute instance within a cluster, assigned to a site and/or cluster, and optionally to a host device. VMs can have virtual interfaces but no physical components. They can designate a primary IP for both IPv4 and IPv6 when interfaces with IP addresses are assigned.

## Fields

### Name
- Unique name for the VM within the assigned cluster and tenant.

### Role
- Functional role assigned to the VM.

### Status
- Operational status of the VM.
- Additional statuses can be defined by setting `VirtualMachine.status` under the `FIELD_CHOICES` configuration parameter.

### Site & Cluster
- Assigned site and/or cluster for the VM.

### Device
- Physical host device within the assigned site/cluster.

### Platform
- Associated platform indicating the operating system.

### Primary IPv4 & IPv6 Addresses
- Designation of one primary IPv4 and/or one primary IPv6 address for management.
- NetBox prefers IPv6 over IPv4 by default, adjustable via the `PREFER_IPV4` configuration parameter.

### vCPUs
- Number of virtual CPUs provisioned, including partial counts (e.g., 1.5 vCPU).

### Memory
- Amount of running memory provisioned in megabytes.

### Disk
- Amount of disk storage provisioned in megabytes.
- Modifiable only on VMs without discrete virtual disks; otherwise, it reports the sum of all attached disks.

### Serial Number
- Optional serial number for the VM, with no uniqueness enforced unlike devices. Introduced in NetBox v4.1.
=== END FILE ===

**VPN**
**IKEPolicy**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ikepolicy/
=== BEGIN FILE ===
# IKE Policies

An Internet Key Exchange (IKE) policy defines an IKE version, mode, and set of proposals to be used in IKE negotiation, referenced by IPSec profiles.

## Fields

### Name
The unique user-assigned name for the policy.

### Version
The IKE version employed (v1 or v2).

### Mode
The mode employed (main or aggressive) when IKEv1 is in use. This setting is not supported for IKEv2.

### Proposals
One or more IKE proposals supported for use by this policy.

### Pre-shared Key
A pre-shared secret key associated with this policy (optional).
=== END FILE ===

**IKEProposal**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ikeproposal/
=== BEGIN FILE ===
# IKE Proposals

An Internet Key Exchange (IKE) proposal defines parameters for establishing a secure connection over untrusted mediums like the Internet. IKE proposals in NetBox can be referenced by IKE policies, which are used by IPSec profiles.

Some platforms may refer to IKE proposals as ISAKMP, a framework for authentication and key exchange using IKE.

## Fields

### Name

The unique user-assigned name for the proposal.

### Authentication Method

The strategy for authenticating the IKE peer. Available options include:

| Name           |
|----------------|
| Pre-shared key |
| Certificate    |
| RSA signature  |
| DSA signature  |

### Encryption Algorithm

The protocol for data encryption, with options including DES, 3DES, and various AES flavors.

### Authentication Algorithm

The mechanism for ensuring data integrity, with options including MD5 and SHA HMAC implementations. Specifying an authentication algorithm is optional as some encryption algorithms (e.g., AES-GCM) provide authentication natively.

### Group

The Diffie-Hellman group supported by the proposal, with Group IDs managed by IANA.

### SA Lifetime

The maximum lifetime for the IKE security association (SA), in seconds.
=== END FILE ===

**IPSecPolicy**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ipsecpolicy/
=== BEGIN FILE ===
# IPSec Policy

An IPSec policy defines a set of proposals for forming IPSec tunnels and may include a perfect forward secrecy (PFS) group. These policies are referenced by IPSec profiles.

## Fields

### Name

The unique user-assigned name for the policy.

### Proposals

One or more IPSec proposals supported for use by this policy.

### PFS Group

The perfect forward secrecy (PFS) group supported by this policy (optional).
=== END FILE ===

**IPSecProfile**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ipsecprofile/
=== BEGIN FILE ===
# IPSec Profile

An IPSec profile defines an IKE policy, IPSec policy, and IPSec mode for establishing an IPSec tunnel.

## Fields

### Name

The unique user-assigned name for the profile.

### Mode

The IPSec mode employed by the profile: Encapsulating Security Payload (ESP) or Authentication Header (AH).

### IKE Policy

The IKE policy associated with the profile.

### IPSec Policy

The IPSec policy associated with the profile.
=== END FILE ===

**IPSecProposal**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/ipsecproposal/
=== BEGIN FILE ===
# IPSec Proposal

An IPSec proposal defines parameters for negotiating security associations for IPSec tunnels. These proposals can be referenced by IPSec policies and are used in IPSec profiles.

## Fields

### Name

The unique user-assigned name for the proposal.

### Encryption Algorithm

The protocol for data encryption. Options include:
- DES
- 3DES
- Various flavors of AES

!!! note
    If an encryption algorithm is not specified, an authentication algorithm must be specified.

### Authentication Algorithm

The mechanism for ensuring data integrity. Options include:
- MD5
- SHA HMAC implementations

!!! note
    If an authentication algorithm is not specified, an encryption algorithm must be specified.

### SA Lifetime (Seconds)

The maximum time for which the security association (SA) may be active, in seconds.

### SA Lifetime (Data)

The maximum data transfer within the security association (SA) before it must be rebuilt, in kilobytes.
=== END FILE ===

**L2VPN**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/l2vpn/
=== BEGIN FILE ===
# L2VPN

A L2VPN object in NetBox represents a layer 2 bridge technology such as VXLAN, VPLS, or EPL. Each L2VPN is identified by a name and an optional unique identifier (e.g., VNI). L2VPNs can be terminated to interfaces and VLANs.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier. (This value can be used for filtering.)

### Type

The technology employed in forming and operating the L2VPN. Choices include:

* VPLS
* VPWS
* EPL
* EVPL
* EP-LAN
* EVP-LAN
* EP-TREE
* EVP-TREE
* VXLAN
* VXLAN-EVPN
* MPLS-EVPN
* PBB-EVPN
* EVPN-VPWS

Note: Designating the type as VPWS, EPL, EP-LAN, or EP-TREE limits the L2VPN instance to two terminations.

### Identifier

An optional numeric identifier, useful for tracking a pseudowire ID.

### Import & Export Targets

The route targets associated with this L2VPN to control the import and export of forwarding information.
=== END FILE ===

**L2VPNTermination**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/l2vpntermination/
=== BEGIN FILE ===
# L2VPN Termination

A L2VPN termination refers to the connection of an L2VPN to an interface or VLAN. The following L2VPN types can only have two terminations:

* VPWS
* EPL
* EP-LAN
* EP-TREE

## Fields

### L2VPN

The L2VPN instance.

### VLAN or Interface

The VLAN, device interface, or virtual machine interface connected to the L2VPN.
=== END FILE ===

**Tunnel**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/tunnel/
=== BEGIN FILE ===
# Tunnels

A tunnel is a private virtual connection between endpoints using protocol encapsulation. Common techniques include Generic Routing Encapsulation (GRE), IP-in-IP, and IPSec. NetBox models both peer-to-peer and hub-and-spoke tunnel topologies.

Device and virtual machine interfaces connect to tunnels via tunnel terminations.

## Fields

### Name

A unique identifier for the tunnel.

### Status

The operational status of the tunnel, with default options:

* Planned
* Active
* Disabled

Custom statuses can be defined by modifying `Tunnel.status` under the `FIELD_CHOICES` configuration parameter.

### Group

The optional administrative group assigned to the tunnel.

### Encapsulation

The encapsulation protocol used, with support for GRE, IP-in-IP, and IPSec.

### Tunnel ID

An optional numeric identifier for the tunnel.

### IPSec Profile

For IPSec tunnels, this refers to the IPSec Profile used for negotiating security associations.
=== END FILE ===

**TunnelGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/tunnelgroup/
=== BEGIN FILE ===
# Tunnel Group

Tunnels can be organized into administrative groups for better management, such as grouping peer-to-peer tunnels in a mesh network. Assigning a tunnel to a group is optional.

## Fields

### Name

A unique human-friendly name.

### Slug

A unique URL-friendly identifier, useful for filtering.
=== END FILE ===

**TunnelTermination**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/vpn/tunneltermination/
=== BEGIN FILE ===
# Tunnel Terminations

A tunnel termination connects a device or virtual machine interface to a tunnel. The tunnel must be created before any terminations may be added.

## Fields

### Tunnel

The tunnel to which this termination is made.

### Role

The functional role of the attached interface. The following options are available:

| Name  | Description                                      |
|-------|--------------------------------------------------|
| Peer  | An endpoint in a point-to-point or mesh topology |
| Hub   | A central point in a hub-and-spoke topology      |
| Spoke | An edge point in a hub-and-spoke topology        |

Multiple hub terminations may be attached to a tunnel.

### Termination

The device or virtual machine interface terminated to the tunnel.

### Outside IP

The public or underlay IP address with which this termination is associated. This is the IP to which peers will route tunneled traffic.
=== END FILE ===

**Wireless**
**WirelessLAN**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/wireless/wirelesslan/
=== BEGIN FILE ===
# Wireless LANs

A wireless LAN consists of interfaces connected through a common wireless channel, identified by its SSID and authentication parameters. Wireless interfaces can be associated with wireless LANs to model multi-access wireless segments.

## Fields

### SSID

The service set identifier (SSID) for the wireless network.

### Group

The wireless LAN group to which this wireless LAN is assigned (if any).

### Status

The operational status of the wireless network.

Additional statuses may be defined by setting `WirelessLAN.status` under the `FIELD_CHOICES` configuration parameter.

### VLAN

Each wireless LAN can optionally be mapped to a VLAN to model a bridge between wired and wireless segments.

### Authentication Type

The type of wireless authentication in use. Options include:

* Open
* WEP
* WPA Personal (PSK)
* WPA Enterprise

### Authentication Cipher

The security cipher used to apply wireless authentication. Options include:

* Auto (automatic)
* TKIP
* AES

### Pre-Shared Key

The security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.
=== END FILE ===

**WirelessLANGroup**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/wireless/wirelesslangroup/
=== BEGIN FILE ===
# Wireless LAN Groups

Wireless LAN groups are used to organize and classify wireless LANs. They are hierarchical, allowing for nested groups, but each wireless LAN can only belong to one group.

## Fields

- **Parent**: The parent wireless LAN group (if any).
- **Name**: A unique human-friendly name.
- **Slug**: A unique URL-friendly identifier, useful for filtering.
=== END FILE ===

**WirelessLink**
URL: https://netboxlabs.com/docs/netbox/en/stable/models/wireless/wirelesslink/
=== BEGIN FILE ===
# Wireless Links

A wireless link is a connection between two wireless interfaces, used for point-to-point connections unlike a wireless LAN.

## Fields

### Interfaces

Select two interfaces: One for side A and one for side B. (Both must be wireless interfaces.)

### Status

The operational status of the link. Options include:

* Connected
* Planned
* Decommissioning

### SSID

The service set identifier (SSID) for the wireless link (optional).

### Distance

The distance between the link's two endpoints, including a unit designation (e.g. 100 meters or 25 feet). This field was introduced in NetBox v4.1.

### Authentication Type

The type of wireless authentication in use. Options include:

* Open
* WEP
* WPA Personal (PSK)
* WPA Enterprise

### Authentication Cipher

The security cipher used to apply wireless authentication. Options include:

* Auto (automatic)
* TKIP
* AES

### Pre-Shared Key

The security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.
=== END FILE ===

**Reference**
**Filtering**
URL: https://netboxlabs.com/docs/netbox/en/stable/reference/filtering/
=== BEGIN FILE ===
# REST API Filtering

The document explains how to filter objects returned by an API list endpoint using query parameters in the request URL. 

## Filtering Objects

- Use parameters to filter results, e.g., `GET /api/dcim/sites/?status=active` for active sites.
- Combine parameters for more specific results, e.g., `GET /api/dcim/sites/?status=active&region=europe`.
- Multiple values for a single parameter use logical OR, while fields with multiple values (like tags) use logical AND.

### Filtering by Choice Field

- To find available choices for a field, make an authenticated `OPTIONS` request and use `jq` to extract parameters:

```no-highlight
$ curl -s -X OPTIONS \
-H "Authorization: Token $TOKEN" \
-H "Content-Type: application/json" \
http://netbox/api/ipam/prefixes/ | jq ".actions.POST.status.choices"
```

### Filtering by Custom Field

- Use `cf_` prefix for custom fields, e.g., `GET /api/dcim/sites/?cf_foo=123`.

## Lookup Expressions

- Additional lookup expressions allow for negation and context-specific filtering by adding suffixes to field names.

### Numeric Fields

| Filter  | Description              |
|---------|--------------------------|
| `n`     | Not equal to             |
| `lt`    | Less than                |
| `lte`   | Less than or equal to    |
| `gt`    | Greater than             |
| `gte`   | Greater than or equal to |
| `empty` | Is empty/null (boolean)  |

Example: `GET /api/ipam/vlans/?vid__gt=900`

### String Fields

| Filter  | Description                            |
|---------|----------------------------------------|
| `n`     | Not equal to                           |
| `ic`    | Contains (case-insensitive)            |
| `nic`   | Does not contain (case-insensitive)    |
| `isw`   | Starts with (case-insensitive)         |
| `nisw`  | Does not start with (case-insensitive) |
| `iew`   | Ends with (case-insensitive)           |
| `niew`  | Does not end with (case-insensitive)   |
| `ie`    | Exact match (case-insensitive)         |
| `nie`   | Inverse exact match (case-insensitive) |
| `empty` | Is empty/null (boolean)                |

Example: `GET /api/dcim/devices/?name__ic=switch`

### Foreign Keys & Other Fields

- Foreign key fields support only the negation expression: `n`. Example: `GET /api/ipam/vlans/?group_id__n=3203`.

## Ordering Objects

- Use the `ordering` query parameter to sort results, e.g., `GET /api/dcim/sites/?ordering=facility`.
- Invert ordering with a hyphen, e.g., `GET /api/dcim/sites/?ordering=-facility`.
- Multiple fields can be specified, e.g., `GET /api/dcim/sites/?ordering=facility,-name`.
=== END FILE ===

**Conditions**
URL: https://netboxlabs.com/docs/netbox/en/stable/reference/conditions/
=== BEGIN FILE ===
# Conditions

Conditions are NetBox's mechanism for evaluating whether a set data meets a prescribed set of conditions. It allows the author to convey simple logic by declaring an arbitrary number of attribute-value-operation tuples nested within a hierarchy of logical AND and OR statements.

## Conditions

A condition is expressed as a JSON object with the following keys:

| Key name | Required | Default | Description |
|----------|----------|---------|-------------|
| attr     | Yes      | -       | Name of the key within the data being evaluated |
| value    | Yes      | -       | The reference value to which the given data will be compared |
| op       | No       | `eq`    | The logical operation to be performed |
| negate   | No       | False   | Negate (invert) the result of the condition's evaluation |

### Available Operations

* `eq`: Equals
* `gt`: Greater than
* `gte`: Greater than or equal to
* `lt`: Less than
* `lte`: Less than or equal to
* `in`: Is present within a list of values
* `contains`: Contains the specified value

### Accessing Nested Keys

To access nested keys, use dots to denote the path to the desired attribute. For example, assume the following data:

```json
{
  "a": {
    "b": {
      "c": 123
    }
  }
}
```

The following condition will evaluate as true:

```json
{
  "attr": "a.b.c",
  "value": 123
}
```

### Examples

`name` equals "foo":

```json
{
  "attr": "name",
  "value": "foo"
}
```

`name` does not equal "foo":

```json
{
  "attr": "name",
  "value": "foo",
  "negate": true
}
```

`asn` is greater than 65000:

```json
{
  "attr": "asn",
  "value": 65000,
  "op": "gt"
}
```

`status` is not "planned" or "staging":

```json
{
  "attr": "status.value",
  "value": ["planned", "staging"],
  "op": "in",
  "negate": true
}
```

!!! note "Evaluating static choice fields"
    Pay close attention when evaluating static choice fields, such as the `status` field above. These fields typically render as a dictionary specifying both the field's raw value (`value`) and its human-friendly label (`label`). be sure to specify on which of these you want to match.

## Condition Sets

Multiple conditions can be combined into nested sets using AND or OR logic. This is done by declaring a JSON object with a single key (`and` or `or`) containing a list of condition objects and/or child condition sets.

### Examples

`status` is "active" and `primary_ip4` is defined _or_ the "exempt" tag is applied.

```json
{
  "or": [
    {
      "and": [
        {
          "attr": "status.value",
          "value": "active"
        },
        {
          "attr": "primary_ip4",
          "value": null,
          "negate": true
        }
      ]
    },
    {
      "attr": "tags.slug",
      "value": "exempt",
      "op": "contains"
    }
  ]
}
```
=== END FILE ===

**Markdown**
URL: https://netboxlabs.com/docs/netbox/en/stable/reference/markdown/
=== BEGIN FILE ===
# Markdown

NetBox supports Markdown rendering for certain text fields. Common examples include:

## Headings

```
# Heading 1
## Heading 2
### Heading 3
#### Heading 4
##### Heading 5
###### Heading 6
```

Alternatively, for H1 and H2, an underline style:

```
Heading 1
=========

Heading 2
---------
```

## Text

```
Italicize text with *asterisks* or _underscores_.
```

```
Bold text with two **asterisks** or __underscores__.
```

```
Strike text with two tildes. ~~Deleted text.~~
```

## Line Breaks

To preserve line breaks, append two spaces to each line:

```
This is one line.  
And this is another line.  
One more line here.
```

## Lists

Unordered lists use asterisks or hyphens:

```
* Alpha
* Bravo
* Charlie
    * Child item 1
    * Child item 2
* Delta
```

Ordered lists use digits followed by periods:

```
1. Red
2. Green
3. Blue
    1. Light blue
    2. Dark blue
4. Orange
```

## Links

Hyperlinks are created with square brackets and parentheses:

```
Here's an [example](https://www.example.com) of a link.
```

## Images

Embedding an image uses similar syntax to hyperlinks:

```
![Alternate text](/path/to/image.png "Image title text")
```

## Code Blocks

Inline code uses single backticks, while code blocks use triple backticks:

```
def my_func(foo, bar):
    # Do something
    return foo * bar
```

## Tables

Simple tables use pipes and hyphens:

```
| Heading 1 | Heading 2 | Heading 3 |
|-----------|-----------|-----------|
| Row 1     | Alpha     | Red       |
| Row 2     | **Bravo** | Green     |
| Row 3     | Charlie   | ~~Blue~~  |
```

Colons align text in columns:

```
| Left-aligned | Centered | Right-aligned |
|:-------------|:--------:|--------------:|
| Text         | Text     | Text          |
```

## Blockquotes

Blockquotes use a right angle bracket:

```
> I think that I shall never see
> a graph more lovely than a tree.
```

To preserve line breaks, append two spaces:

```
> I think that I shall never see  
> a graph more lovely than a tree.  
```

## Horizontal Rule

A horizontal rule is created with three or more hyphens or asterisks:

```
Content

---

More content

***

Final content
```
=== END FILE ===

**Development**
**Introduction**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/index/
=== BEGIN FILE ===
# NetBox Development

NetBox is hosted on GitHub, where contributors can engage by forking the repository. The repository has three main branches:

* `master` - Current stable release.
* `develop` - Active development for upcoming releases.
* `feature` - New features for the next minor release.

NetBox consists of several Django apps, including:

* `circuits`: Communications circuits and providers.
* `dcim`: Datacenter infrastructure management.
* `extras`: Additional features.
* `ipam`: IP address management.
* `tenancy`: Tenant management.
* `users`: Authentication and user preferences.
* `utilities`: Non-user-facing resources.
* `virtualization`: Virtual machines and clusters.
* `wireless`: Wireless links and LANs.

Changes to the codebase are tracked via GitHub issues, and substantial changes require approval before work begins. Contributors should use the appropriate issue templates and submit pull requests after approval. 

For assistance, contributors can use:

* [GitHub discussions](https://github.com/netbox-community/netbox/discussions) for general support.
* [#netbox on NetDev Community Slack](https://netdev.chat/) for quick chats.

NetBox governance follows a benevolent dictator model, led by Jeremy Stretch. The project is licensed under the [Apache 2.0 license](https://github.com/netbox-community/netbox/blob/master/LICENSE.txt), allowing for permissive redistribution of code.
=== END FILE ===

**Getting Started**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/getting-started/
=== BEGIN FILE ===
# Getting Started

## Setting up a Development Environment

To start with NetBox development, you need:

* A Linux system or compatible environment
* A PostgreSQL server
* A Redis server
* Python 3.10 or later

### 1. Fork the Repo

Fork the [official git repository](https://github.com/netbox-community/netbox) and clone it locally:

```bash
$ git clone https://github.com/$username/netbox.git
```

### 2. Create a New Branch

Use the following branches:

* `master` - Current stable release
* `develop` - Upcoming stable release
* `feature` - Upcoming minor release

Create a new branch:

```bash
git checkout -B $branchname
```

### 3. Create a Python Virtual Environment

Create a virtual environment:

```bash
mkdir ~/.venv
python3 -m venv ~/.venv/netbox
```

Activate it:

```bash
source ~/.venv/netbox/bin/activate
```

### 4. Install Required Packages

Install required packages:

```bash
python -m pip install -r requirements.txt
```

### 5. Install Pre-Commit

Install `pre-commit`:

```bash
python -m pip install ruff pre-commit
pre-commit install
```

### 6. Configure NetBox

Copy `configuration_example.py` to `configuration.py` and update:

* `ALLOWED_HOSTS`
* `DATABASE`
* `REDIS`
* `SECRET_KEY`
* `DEBUG`
* `DEVELOPER`

### 7. Start the Development Server

Start the server:

```bash
$ ./manage.py runserver
```

## UI Development

Refer to the [Web UI Development Guide](web-ui.md).

## Populating Demo Data

Use the [netbox-demo-data](https://github.com/netbox-community/netbox-demo-data) repo to load sample data with:

```bash
python manage.py loaddata <datafile>
```

## Running Tests

Run tests with:

```bash
export NETBOX_CONFIGURATION=netbox.configuration_testing
cd netbox/
python manage.py test
```

Use `--keepdb` to reuse the test database and `--parallel <n>` for parallel execution.

## Submitting Pull Requests

After verifying tests, commit changes:

```bash
git commit -m "Closes #1234: Add IPv5 support"
git push origin
```

Submit a [pull request](https://github.com/netbox-community/netbox/compare) with a detailed description. Only submit for accepted issues.
=== END FILE ===

**Style Guide**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/style-guide/
=== BEGIN FILE ===
# Style Guide

NetBox follows the Django style guide, based on PEP 8, and uses ruff for linting with exceptions.

## Code

### General Guidance

* Consistency is key; prioritize readability over concision.
* Include a newline at the end of every file.
* Avoid easter eggs; declare constants in `constants.py`.
* Every model must have a docstring; custom methods should be explained.
* Use nested API serializers carefully to avoid circular dependencies.

### Linting

Ruff enforces code style with a pre-commit hook. To run manually:

```
ruff check netbox/
```

#### Linter Exceptions

* **E501**: No hard line length restriction; 120 characters encouraged.
* **F403**: Wildcard imports are acceptable under certain conditions.
* **F405**: Same justification as F403.

### Introducing New Dependencies

New dependencies should be avoided unless necessary. If required, they must be:

* Freely accessible source code.
* Open source license.
* Actively maintained.
* Available via PyPI.

Add a description and URL to `base_requirements.txt` and pin the version in `requirements.txt`.

## Written Works

### General Guidance

* Maintain professional standards in written material.
* Use two line breaks between paragraphs and a single space between sentences.
* Documentation should be in Markdown, with limited HTML.

### Branding

* Use "NetBox" in writing; "netbox" in code.
* Prefer SVG logos for scalability; convert to PNG if needed.
=== END FILE ===

**Models**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/models/
=== BEGIN FILE ===
# NetBox Models

## Model Types

A NetBox model represents a discrete object type such as a device or IP address, defined as a Python class with its own PostgreSQL database table. Models are categorized by type, and the Django content types framework maps models to database tables, creating globally unique identifiers.

### Features Matrix

NetBox models may support various features enabled by inheriting from mixin classes:

| Feature                                                    | Feature Mixin           | Registry Key       | Description                                                                             |
|------------------------------------------------------------|-------------------------|--------------------|-----------------------------------------------------------------------------------------|
| Change logging                                            | `ChangeLoggingMixin`    | -                  | Changes are recorded in the change log                                                  |
| Cloning                                                  | `CloningMixin`          | -                  | Provides the `clone()` method for copying objects                                      |
| Custom fields                                            | `CustomFieldsMixin`     | `custom_fields`    | Supports user-defined fields                                                             |
| Custom links                                             | `CustomLinksMixin`      | `custom_links`     | Allows assignment of custom links                                                        |
| Custom validation                                        | `CustomValidationMixin` | -                  | Enforces custom validation rules                                                         |
| Export templates                                         | `ExportTemplatesMixin`  | `export_templates` | Users can create custom export templates                                                |
| Job results                                             | `JobsMixin`             | `jobs`             | Allows scheduling of background jobs                                                    |
| Journaling                                              | `JournalingMixin`       | `journaling`       | Supports persistent historical commentary                                                |
| Synchronized data                                        | `SyncedDataMixin`       | `synced_data`      | Automatically synchronizes data from remote sources                                     |
| Tagging                                                 | `TagsMixin`             | `tags`             | Models can be tagged with user-defined tags                                             |
| Event rules                                             | `EventRulesMixin`       | `event_rules`      | Sends webhooks or runs scripts in response to events                                    |

## Models Index

### Primary Models

Core application models for network infrastructure:

* [circuits.Circuit](../models/circuits/circuit.md)
* [circuits.Provider](../models/circuits/provider.md)
* [dcim.Device](../models/dcim/device.md)
* [ipam.IPAddress](../models/ipam/ipaddress.md)
* [virtualization.VirtualMachine](../models/virtualization/virtualmachine.md)

### Organizational Models

Models used to organize primary models:

* [circuits.CircuitGroup](../models/circuits/circuitgroup.md)
* [dcim.DeviceRole](../models/dcim/devicerole.md)
* [ipam.Role](../models/ipam/role.md)

### Nested Group Models

Models that self-nest within a hierarchy:

* [dcim.Location](../models/dcim/location.md)
* [dcim.Region](../models/dcim/region.md)

### Component Models

Models representing individual components of devices:

* [dcim.ConsolePort](../models/dcim/consoleport.md)
* [virtualization.VirtualDisk](../models/virtualization/virtualdisk.md)

### Component Template Models

Templates for replicating device components:

* [dcim.ConsolePortTemplate](../models/dcim/consoleporttemplate.md)
* [dcim.InterfaceTemplate](../models/dcim/interfacetemplate.md)

### Connection Models

Models for connections between other models:

* [circuits.CircuitTermination](../models/circuits/circuittermination.md)
* [vpn.TunnelTermination](../models/vpn/tunneltermination.md)
=== END FILE ===

**Adding Models**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/adding-models/
=== BEGIN FILE ===
# Adding Models

## 1. Define the model class

Models are stored in `models.py` or `models/` submodules. Subclass the appropriate base model from `netbox.models`, typically `NetBoxModel` or `OrganizationalModel`. Include the model class in the `__all__` listing. Each model should define:

* A `Meta` class for deterministic ordering
* A `__str__()` method for a user-friendly string representation
* A `get_absolute_url()` method for the instance's URL

## 2. Define field choices

Define static field choices in `choices.py` by subclassing `utilities.choices.ChoiceSet`.

## 3. Generate database migrations

Run `manage.py makemigrations -n $NAME --no-header` to generate migrations. Set `DEVELOPER = True` in the NetBox configuration to enable migration creation.

## 4. Add all standard views

Create view classes in `views.py` for:

* List view
* Detail view
* Edit view
* Delete view
* Bulk import
* Bulk edit
* Bulk delete

## 5. Add URL paths

Add URL paths for each view in `urls.py`.

## 6. Add relevant forms

Define form classes as needed, including:

* Base model form
* Bulk edit form
* Bulk import form
* Filterset form

## 7. Create the FilterSet

Define a FilterSet class for the model by subclassing the appropriate class from `netbox.filtersets`.

## 8. Create the table class

Create a table class in `tables.py` by subclassing `utilities.tables.BaseTable`, listing fields and default columns in the `Meta` class.

## 9. Create a SearchIndex subclass

Create a subclass of `netbox.search.SearchIndex` for global search indexing.

## 10. Create the object template

Create an HTML template for the object view extending `generic/object.html`.

## 11. Add the model to the navigation menu

Add navigation menu items in `netbox/netbox/navigation/menu.py`.

## 12. REST API components

Create:

* Model serializer in `api/serializers.py`
* API view in `api/views.py`
* Endpoint route in `api/urls.py`

## 13. GraphQL API components

Create a GraphQL object type in `graphql/types.py` and extend the schema in `graphql/schema.py`.

## 14. Add tests

Add tests for:

* UI views
* API views
* Filter sets

## 15. Documentation

Create a documentation page in `docs/models/<app_label>/<model_name>.md` and include it in the "features" documentation. Add the model to the index in `docs/development/models.md`.
=== END FILE ===

**Extending Models**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/extending-models/
=== BEGIN FILE ===
# Extending Models

Below is a list of tasks to consider when adding a new field to a core model.

## 1. Add the field to the model class

Add the field to the model, taking care to address any of the following conditions.

* When adding a GenericForeignKey field, also add an index under `Meta` for its two concrete fields. For example:

    ```python
    class Meta:
        indexes = (
            models.Index(fields=('object_type', 'object_id')),
        )
    ```

## 2. Generate and run database migrations

Django migrations are used to express changes to the database schema. In most cases, Django can generate these automatically, however very complex changes may require manual intervention. Always remember to specify a short but descriptive name when generating a new migration.

```
./manage.py makemigrations <app> -n <name> --no-header
./manage.py migrate
```

Where possible, try to merge related changes into a single migration. For example, if three new fields are being added to different models within an app, these can be expressed in a single migration. You can merge a newly generated migration with an existing one by combining their `operations` lists.

!!! warning "Do not alter existing migrations"
    Migrations can only be merged within a release. Once a new release has been published, its migrations cannot be altered (other than for the purpose of correcting a bug).

## 3. Add validation logic to `clean()`

If the new field introduces additional validation requirements, implement them in the model's `clean()` method. Remember to call the model's original method using `super()` before or after your custom validation as appropriate:

```
class Foo(models.Model):

    def clean(self):
        super().clean()

        # Custom validation goes here
        if self.bar is None:
            raise ValidationError()
```

## 4. Update relevant querysets

If you're adding a relational field (e.g. `ForeignKey`) and intend to include the data when retrieving a list of objects, be sure to include the field using `prefetch_related()` as appropriate.

## 5. Update API serializer

Extend the model's API serializer in `<app>.api.serializers` to include the new field.

## 6. Add fields to forms

Extend any forms to include the new field(s) as appropriate. Common forms include:

* **Credit/edit** - Manipulating a single object
* **Bulk edit** - Performing a change on many objects at once
* **CSV import** - The form used when bulk importing objects in CSV format
* **Filter** - Displays the options available for filtering a list of objects (both UI and API)

## 7. Extend object filter set

If the new field should be filterable, add it to the `FilterSet` for the model. If the field should be searchable, remember to query it in the FilterSet's `search()` method.

## 8. Add column to object table

If the new field will be included in the object list view, add a column to the model's table. For simple fields, adding the field name to `Meta.fields` will be sufficient. More complex fields may require declaring a custom column. Also add the field name to `default_columns` if the column should be present in the table by default.

## 9. Update the SearchIndex

Where applicable, add the new field to the model's SearchIndex for inclusion in global search.

## 10. Update the UI templates

Edit the object's view template to display the new field. There may also be a custom add/edit form template that needs to be updated.

## 11. Create/extend test cases

Create or extend the relevant test cases to verify that the new field and any accompanying validation logic perform as expected. This is especially important for relational fields. NetBox incorporates various test suites, including:

* API serializer/view tests
* Filter tests
* Form tests
* Model tests
* View tests

Be diligent to ensure all the relevant test suites are adapted or extended as necessary to test any new functionality.

## 12. Update the model's documentation

Each model has a dedicated page in the documentation, at `models/<app>/<model>.md`. Update this file to include any relevant information about the new field.
=== END FILE ===

**Signals**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/signals/
=== BEGIN FILE ===
# Signals

NetBox defines several custom signals in addition to Django's built-in signals.

## post_clean

Sent by models inheriting from `CustomValidationMixin` at the end of their `clean()` method.

### Receivers

* `extras.signals.run_custom_validators()`

## core.job_start

Sent whenever a background job is started.

### Receivers

* `extras.signals.process_job_start_event_rules()`

## core.job_end

Sent whenever a background job is terminated.

### Receivers

* `extras.signals.process_job_end_event_rules()`

## core.pre_sync

Sent when the DataSource model's `sync()` method is called.

## core.post_sync

Sent when a DataSource finishes synchronizing.
=== END FILE ===

**Search**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/search/
=== BEGIN FILE ===
# Search

NetBox v3.4 features a global search mechanism utilizing the `extras.CachedValue` model for storing discrete field values across various models.

## SearchIndex

To implement search for a model, create and register a subclass of `netbox.search.SearchIndex` in the app's `search.py` module.

```python
from netbox.search import SearchIndex, register_search

@register_search
class MyModelIndex(SearchIndex):
    model = MyModel
    fields = (
        ('name', 100),
        ('description', 500),
        ('comments', 5000),
    )
    display_attrs = ('site', 'device', 'status', 'description')
```

A `SearchIndex` subclass specifies the model and a list of two-tuples for indexed fields and their weights.

### Field Weight Guidance

| Weight | Field Role                                       | Examples                                           |
|--------|--------------------------------------------------|----------------------------------------------------|
| 50     | Unique serialized attribute                      | Device.asset_tag                                   |
| 60     | Unique serialized attribute (per related object) | Device.serial                                      |
| 100    | Primary human identifier                         | Device.name, Circuit.cid, Cable.label              |
| 110    | Slug                                             | Site.slug                                          |
| 200    | Secondary identifier                             | ProviderAccount.account, DeviceType.part_number    |
| 300    | Highly unique descriptive attribute              | CircuitTermination.xconnect_id, IPAddress.dns_name |
| 500    | Description                                      | Site.description                                   |
| 1000   | Custom field default                             | -                                                  |
| 2000   | Other discrete attribute                         | CircuitTermination.port_speed                      |
| 5000   | Comment field                                    | Site.comments                                      |
=== END FILE ===

**Application Registry**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/application-registry/
=== BEGIN FILE ===
# Application Registry

The registry is an in-memory data structure for application-wide parameters, such as enabled plugins, and is not user-modifiable. It functions like a Python dictionary, where stores cannot be deleted or overwritten, but their values can be modified.

The registry can be inspected by importing `registry` from `extras.registry`.

## Stores

### `counter_fields`
A dictionary mapping models to foreign keys associated with cached counter fields.

### `data_backends`
A dictionary mapping data backend types to their respective classes for interacting with remote data sources.

### `denormalized_fields`
Stores registration made using `netbox.denormalized.register()`, maintaining a list of related models and field mappings for automatic updates.

### `model_features`
A dictionary of features (e.g. custom fields) mapped to NetBox models by app. Example:

```python
{
    'custom_fields': {
        'circuits': ['provider', 'circuit'],
        'dcim': ['site', 'rack', 'devicetype', ...],
    },
    'event_rules': {
        'extras': ['configcontext', 'tag', ...],
        'dcim': ['site', 'rack', 'devicetype', ...],
    },
}
```

Supported model features are listed in the features matrix.

### `models`
Lists all registered models in NetBox not designated for private use, organized by app label.

### `plugins`
Maintains all registered items for plugins, including navigation menus and template extensions.

### `request_processors`
A list of context managers invoked during request processing, which can be registered with the `@register_request_processor` decorator.

### `search`
A dictionary mapping each model to its registered search index class.

### `tables`
A dictionary mapping table classes to lists of extra columns registered by plugins, defined as tuples of name and column instance.

### `views`
A hierarchical mapping of registered views for each model, with mappings added using the `register_model_view()` decorator, allowing URL path generation with `get_model_urls()`.
=== END FILE ===

**User Preferences**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/user-preferences/
=== BEGIN FILE ===
# User Preferences

The `users.UserConfig` model stores user preferences as JSON data in NetBox. 

## Available Preferences

| Name                     | Description                                                   |
|--------------------------|---------------------------------------------------------------|
| data_format              | Preferred format when rendering raw data (JSON or YAML)       |
| pagination.per_page      | The number of items to display per page of a paginated table  |
| pagination.placement     | Where to display the paginator controls relative to the table |
| tables.${table}.columns  | The ordered list of columns to display when viewing the table |
| tables.${table}.ordering | A list of column names by which the table should be ordered   |
=== END FILE ===

**Web UI**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/web-ui/
=== BEGIN FILE ===
# Web UI Development

## Code Structure

Most static resources for the NetBox UI are housed within the `netbox/project-static/` directory.

| Path      | Description                                        |
|-----------|----------------------------------------------------|
| `dist/`   | Destination path for installed dependencies        |
| `docs/`   | Local build path for documentation                 |
| `img/`    | Image files                                        |
| `js/`     | Miscellaneous JavaScript resources served directly |
| `src/`    | TypeScript resources (to be compiled into JS)      |
| `styles/` | Sass resources (to be compiled into CSS)           |

## Front End Technologies

Front end scripting is written in TypeScript, which is a strongly-typed extension to JavaScript. TypeScript is "transpiled" into JavaScript resources which are served to and executed by the client web browser.

All UI styling is written in Sass, which is an extension to browser-native Cascading Stylesheets (CSS). Sass resources (`.scss` files) are compiled to CSS.

## Dependencies

The following software is employed by the NetBox user interface.

* Bootstrap 5 - A popular CSS & JS framework
* clipboard.js - A lightweight package for enabling copy-to-clipboard functionality
* flatpickr - A lightweight date & time selection widget
* gridstack.js - Enables interactive grid layouts (for the dashboard)
* HTMX - Enables dynamic web interfaces through the use of HTML element attributes
* Material Design Icons - An extensive open source collection of graphical icons, delivered as a web font
* query-string - Assists with parsing URL query strings
* Tabler - A web application UI toolkit & theme based on Bootstrap 5
* Tom Select - Provides dynamic selection form fields

## Guidance

NetBox generally follows the following guidelines for front-end code:

- Bootstrap utility classes may be used to solve one-off issues or to implement singular components, as long as the class list does not exceed 4-5 classes. If an element needs more than 5 utility classes, a custom SCSS class should be added that contains the required style properties.
- Custom classes must be commented, explaining the general purpose of the class and where it is used.
- Reuse SCSS variables whenever possible. CSS values should (almost) never be hard-coded.
- All TypeScript functions must have, at a minimum, a basic JSDoc description of what the function is for and where it is used. If possible, document all function arguments via `@param` JSDoc block tags.
- New front-end dependencies should be avoided unless absolutely necessary. If adding a new dependency is unavoidable, use a tool like Bundlephobia to ensure the smallest possible library is used.
- All UI elements must be usable on all common screen sizes, including mobile devices.
- NetBox aligns with Bootstrap's supported Browsers and Devices list.

## UI Development

To contribute to the NetBox UI, you'll need to review the main Getting Started guide in order to set up your base environment.

### Tools

Once you have a working NetBox development environment, you'll need to install a few more tools to work with the NetBox UI:

- NodeJS (the LTS release should suffice)
- Yarn (version 1)

After Node and Yarn are installed on your system, you'll need to install all the NetBox UI dependencies:

```console
$ cd netbox/project-static
$ yarn
```

### Updating Dependencies

Run `yarn outdated` to identify outdated dependencies.

```
$ yarn outdated
```

Run `yarn upgrade --latest` to automatically upgrade these packages to their most recent versions.

```
$ yarn upgrade bootstrap --latest
```

`package.json` will be updated to reflect the new package versions automatically.

### Bundling

In order for the TypeScript and Sass (SCSS) source files to be usable by a browser, they must first be transpiled (TypeScript → JavaScript, Sass → CSS), bundled, and minified. After making changes to TypeScript or Sass source files, run `yarn bundle`.

`yarn bundle` is a wrapper around the following subcommands:

| Command               | Action                                          |
| :-------------------- | :---------------------------------------------- |
| `yarn bundle`         | Bundle TypeScript and Sass (SCSS) source files. |
| `yarn bundle:styles`  | Bundle Sass (SCSS) source files only.           |
| `yarn bundle:scripts` | Bundle TypeScript source files only.            |

All output files will be written to `netbox/project-static/dist`.

### Linting, Formatting & Type Checking

Before committing any changes to TypeScript files, run `yarn validate` to catch formatting, code quality, or type errors.

`yarn validate` is a wrapper around the following subcommands:

| Command                            | Action                                                           |
| :--------------------------------- | :--------------------------------------------------------------- |
| `yarn validate`                    | Run all validation.                                              |
| `yarn validate:lint`               | Validate TypeScript code via ESLint only.                      |
| `yarn validate:types`              | Validate TypeScript code compilation only.                       |
| `yarn validate:formatting`         | Validate code formatting of JavaScript & Sass/SCSS files.        |
| `yarn validate:formatting:styles`  | Validate code formatting Sass/SCSS only.                         |
| `yarn validate:formatting:scripts` | Validate code formatting TypeScript only.                        |

You can also run the following commands to automatically fix formatting issues:

| Command               | Action                                          |
| :-------------------- | :---------------------------------------------- |
| `yarn format`         | Format TypeScript and Sass (SCSS) source files. |
| `yarn format:styles`  | Format Sass (SCSS) source files only.           |
| `yarn format:scripts` | Format TypeScript source files only.            |
=== END FILE ===

**Internationalization**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/internationalization/
=== BEGIN FILE ===
# Internationalization

Beginning with NetBox v4.0, NetBox will leverage Django's automatic translation to support languages other than English. Key areas requiring attention for translation support include:

* The `verbose_name` and `verbose_name_plural` Meta attributes for each model
* The `verbose_name` and (if defined) `help_text` for each model field
* The `label` for each form field
* Headers for `fieldsets` on each form class
* The `verbose_name` for each table column
* All human-readable strings within templates must be wrapped with `{% trans %}` or `{% blocktrans %}`

## General Guidance

* Wrap human-readable strings with Django's `gettext()` or `gettext_lazy()` utility functions.
* Prefer importing the translation function as an underscore (`_`).
* Avoid passing markup and non-natural language to translation functions.
* Use `pgettext()` or `pgettext_lazy()` for context where needed.
* **Format strings do not support translation.** Use `format()` for variable replacement instead of "f" strings.

## Models

1. Import `gettext_lazy` as `_`.
2. Define `verbose_name` and `verbose_name_plural` under the model's `Meta` class, wrapped with `gettext_lazy()`.
3. Specify a `verbose_name` for each model field wrapped with `gettext_lazy()`.
4. Wrap any `help_text` attributes on model fields with `gettext_lazy()`.

```python
from django.utils.translation import gettext_lazy as _

class Circuit(PrimaryModel):
    commit_rate = models.PositiveIntegerField(
        ...
        verbose_name=_('commit rate (Kbps)'),
        help_text=_("Committed rate")
    )

    class Meta:
        verbose_name = _('circuit')
        verbose_name_plural = _('circuits')
```

## Forms

1. Import `gettext_lazy` as `_`.
2. All form fields must specify a `label` wrapped with `gettext_lazy()`.
3. The name of each FieldSet on a form must be wrapped with `gettext_lazy()`.

```python
from django.utils.translation import gettext_lazy as _
from utilities.forms.rendering import FieldSet

class CircuitBulkEditForm(NetBoxModelBulkEditForm):
    description = forms.CharField(
        label=_('Description'),
        ...
    )

    fieldsets = (
        FieldSet('provider', 'type', 'status', 'description', name=_('Circuit')),
    )
```

## Tables

1. Import `gettext_lazy` as `_`.
2. All table columns must specify a `verbose_name` wrapped with `gettext_lazy()`.

```python
from django.utils.translation import gettext_lazy as _

class CircuitTable(TenancyColumnsMixin, ContactsColumnMixin, NetBoxTable):
    provider = tables.Column(
        verbose_name=_('Provider'),
        ...
    )
```

## Templates

1. Enable translation support by including `{% load i18n %}` at the top of the template.
2. Use the `{% trans %}` tag to wrap short strings.
3. Enclose longer strings between `{% blocktrans %}` and `{% endblocktrans %}` tags.
4. Avoid passing HTML within translated strings.

```
{% load i18n %}

{# A short string #}
<h5 class="card-header">{% trans "Circuit List" %}</h5>

{# A longer string with a context variable #}
{% blocktrans trimmed with count=object.circuits.count %}
  There are {count} circuits. Would you like to continue?
{% endblocktrans %}
```

The `{% blocktrans %}` tag supports only limited variable replacement. The `{% trans %}` and `{% blocktrans %}` support contextual hints for translators using the `context` argument.
=== END FILE ===

**Translations**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/translations/
=== BEGIN FILE ===
# Translations

NetBox uses the [Transifex](https://explore.transifex.com/netbox-community/netbox/) platform for translation work, with free account sign-up. Translations are generated from the source file at `netbox/translations/en/LC_MESSAGES/django.po`, which contains original English strings. This file is updated regularly, allowing new translation strings to appear automatically on Transifex.

Reviewers access their designated languages on Transifex, where initial translations are machine-generated via AWS Translate. Human reviewers correct these translations as needed.

## Updating Translation Sources

To update the English `.po` file, use the `makemessages` command (excluding `project-static/`):

```nohighlight
./manage.py makemessages -l en -i "project-static/*"
```

After committing changes, push to the `develop` branch on GitHub. New strings will automatically appear for translation on Transifex. Manual updates are generally unnecessary as this occurs nightly via a [GitHub action](https://github.com/netbox-community/netbox/blob/develop/.github/workflows/update-translation-strings.yml).

## Updating Translated Strings

Translated strings are typically updated during the NetBox [release process](./release-checklist.md). Check the Transifex dashboard for languages not marked _ready for use_ and use machine translation to assist. 

To download translated strings:

1. Install the [Transifex CLI client](https://github.com/transifex/cli).
2. Generate a [Transifex API token](https://app.transifex.com/user/settings/api/).

Run the following command:

```no-highlight
TX_TOKEN=$TOKEN tx pull
```

This downloads all portable (`.po`) files from Transifex. Compile updated strings into `.mo` files using:

```no-highlight
./manage.py compilemessages
```

New `.mo` files must be committed and pushed to GitHub, typically as part of a new NetBox release.

## Proposing New Languages

To propose a new language for NetBox, submit a [GitHub issue](https://github.com/netbox-community/netbox/issues/new?assignees=&labels=type%3A+translation&projects=&template=translation.yaml). New languages are added based on community interest and volunteer availability. Upon approval, a NetBox maintainer will:

* Add the language to Transifex
* Designate reviewers
* Create initial machine-generated translations
* Include it in the supported languages list
=== END FILE ===

**Release Checklist**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/release-checklist/
=== BEGIN FILE ===
# Release Checklist

This documentation outlines the process for packaging and publishing a new NetBox release, categorized into three types: 

* Major release (e.g. v3.7.8 to v4.0.0)
* Minor release (e.g. v4.0.10 to v4.1.0)
* Patch release (e.g. v4.1.0 to v4.1.1)

Major releases introduce substantial changes but are treated similarly to minor releases for packaging.

## Minor Version Releases

### Address Constrained Dependencies

Constrain dependencies to specific versions to avoid bugs or breaking changes, e.g.:

```
djangorestframework==3.8.1
```

These constraints are added to `base_requirements.txt` to prevent installing newer packages.

### Close the Release Milestone

Close the [release milestone](https://github.com/netbox-community/netbox/milestones) on GitHub after ensuring no open issues remain.

### Update the Release Notes

Ensure a link to the release notes is in the navigation menu and that a summary of major features is added to `docs/index.md`.

### Manually Perform a New Install

Run the documentation server:

```no-highlight
mkdocs serve
```

Perform a new installation of NetBox to catch errors in documentation.

### Test Upgrade Paths

Test upgrade paths by loading demo data and running:

```bash
./manage.py migrate
```

### Merge the Release Branch

Submit a pull request to merge the `feature` branch into `develop`.

### Rebuild Demo Data (After Release)

Generate a new demo data snapshot compatible with the new release.

---

## Patch Releases

### Notify netbox-docker Project of Any Relevant Changes

Inform the [`netbox-docker`](https://github.com/netbox-community/netbox-docker) maintainers of relevant changes.

### Update Python Dependencies

Update Python dependencies in `requirements.txt`:

1. Upgrade packages in your environment.
2. Run tests and check functionality.
3. Review release notes for breaking changes.
4. Update package versions as necessary.

### Update UI Dependencies

Check and update UI dependencies using `yarn outdated` and run `yarn bundle`.

### Rebuild the Device Type Definition Schema

Run the command:

```nohighlight
./manage.py buildschema --write
```

### Update & Compile Translations

Pull updated translations from [Transifex](https://app.transifex.com/netbox-community/netbox/dashboard/) and compile:

```no-highlight
tx pull
./manage.py compilemessages
```

### Update Version and Changelog

Update `release.yaml` with the current version and date, and commit changes to the `develop` branch.

### Verify CI Build Status

Ensure CI testing on the `develop` branch is successful.

### Submit a Pull Request

Submit a pull request titled **"Release vX.Y.Z"** to merge `develop` into `master`.

### Create a New Release

Create a [new release](https://github.com/netbox-community/netbox/releases/new) on GitHub with the specified parameters.

### Update the Public Documentation

Run the `build-site` action on the [netboxlabs-docs](https://github.com/netboxlabs/netboxlabs-docs) repository and clear the CDN cache from Kinsta. Verify the documentation at <https://netboxlabs.com/docs/netbox/en/stable/>.
=== END FILE ===

**git Cheat Sheet**
URL: https://netboxlabs.com/docs/netbox/en/stable/development/git-cheat-sheet/
=== BEGIN FILE ===
# git Cheat Sheet

This cheat sheet is a reference for NetBox contributors familiar with git. For a general introduction, refer to GitHub's guide on getting started with git.

## Common Operations

### Clone a Repo

To copy a remote git repository to your local workstation:

``` 
git clone https://github.com/$org-name/$repo-name
```

### Pull New Commits

To update your local branch with recent upstream commits:

``` 
git pull
```

### List Branches

To list all local and remote branches:

``` 
git branch -a
```

### Switch Branches

To switch to a different branch:

``` 
git checkout $branchname
```

### Create a New Branch

To create a new local branch from the current branch:

``` 
git checkout -b $newbranch
```

### Rename a Branch

To rename the current branch:

``` 
git branch -m $newname
```

### Merge a Branch

To merge one branch into another:

``` 
git merge $sourcebranch
```

### Show Pending Changes

To display a summary of created, modified, and deleted files:

``` 
git status
```

### Stage Changed Files

To stage modified files before committing:

``` 
git add -A
```

### Review Staged Files

To review staged changes:

``` 
git diff --staged
```

### Create a New Commit

To record changes to the current branch with a commit message:

``` 
git commit -m "Fixes #123: Fixed the thing that was broken"
```

### Push a Commit Upstream

To push a local commit to the remote repository:

``` 
git push -u origin $branchname
```

## The GitHub CLI Client

GitHub provides a CLI client to simplify interactions with GitHub repositories.

### List Open Pull Requests

``` 
gh pr list
```

### Check Out a PR

To check out the remote branch associated with an open pull request:

``` 
gh pr checkout $number
```

## Fixing Mistakes

### Modify the Previous Commit

To amend the most recent commit:

``` 
git commit --amend --no-edit
```

### Undo the Last Commit

To undo the most recent commit:

``` 
git reset HEAD~
```

### Rebase from Upstream

To rebase your local branch to include new changes from upstream:

``` 
git fetch
git rebase origin/$branchname
```
=== END FILE ===

**Release Notes**
**Summary**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/index/
=== BEGIN FILE ===
# Release Notes

NetBox follows a versioning system with major, minor, and patch releases. Definitions include:

* **Major** - Introduces or removes core functionality
* **Minor** - Implements major features with potential breaking changes
* **Patch** - Maintenance release for bug fixes and backward-compatible enhancements

Minor releases occur in April, August, and December, while patch releases are issued as needed.

Release history since v2.0:

#### [Version 4.1](./version-4.1.md) (September 2024)
* Circuit Groups ([#7025](https://github.com/netbox-community/netbox/issues/7025))
* VLAN Group ID Ranges ([#9627](https://github.com/netbox-community/netbox/issues/9627))
* Nested Device Modules ([#10500](https://github.com/netbox-community/netbox/issues/10500))
* Rack Types ([#12826](https://github.com/netbox-community/netbox/issues/12826))
* Plugins Catalog Integration ([#14731](https://github.com/netbox-community/netbox/issues/14731))
* User Notifications ([#15621](https://github.com/netbox-community/netbox/issues/15621))

#### [Version 4.0](./version-4.0.md) (April 2024)
* Complete UI Refresh ([#12128](https://github.com/netbox-community/netbox/issues/12128))
* Dynamic REST API Fields ([#15087](https://github.com/netbox-community/netbox/issues/15087))
* Strawberry GraphQL Engine ([#9856](https://github.com/netbox-community/netbox/issues/9856))
* Advanced Form Rendering Functionality ([#14739](https://github.com/netbox-community/netbox/issues/14739))
* Legacy Admin UI Disabled ([#12325](https://github.com/netbox-community/netbox/issues/12325))

#### [Version 3.7](./version-3.7.md) (December 2023)
* VPN Tunnels ([#9816](https://github.com/netbox-community/netbox/issues/9816))
* Event Rules ([#14132](https://github.com/netbox-community/netbox/issues/14132))
* Virtual Machine Disks ([#8356](https://github.com/netbox-community/netbox/issues/8356))
* Object Protection Rules ([#10244](https://github.com/netbox-community/netbox/issues/10244))
* Improved Custom Field Visibility Controls ([#13299](https://github.com/netbox-community/netbox/issues/13299))
* Improved Global Search Results ([#14134](https://github.com/netbox-community/netbox/issues/14134))
* Table Column Registration for Plugins ([#14173](https://github.com/netbox-community/netbox/issues/14173))
* Data Backend Registration for Plugins ([#13381](https://github.com/netbox-community/netbox/issues/13381))

#### [Version 3.6](./version-3.6.md) (August 2023)
* Relocated Admin UI Views ([#12589](https://github.com/netbox-community/netbox/issues/12589), [#12590](https://github.com/netbox-community/netbox/issues/12590), [#12591](https://github.com/netbox-community/netbox/issues/12591), [#13044](https://github.com/netbox-community/netbox/issues/13044))
* Configurable Default Permissions ([#13038](https://github.com/netbox-community/netbox/issues/13038))
* User Bookmarks ([#8248](https://github.com/netbox-community/netbox/issues/8248))
* Custom Field Choice Sets ([#12988](https://github.com/netbox-community/netbox/issues/12988))
* Pre-Defined Location Choices for Custom Fields ([#12194](https://github.com/netbox-community/netbox/issues/12194))
* Restrict Tag Usage by Object Type ([#11541](https://github.com/netbox-community/netbox/issues/11541))

#### [Version 3.5](./version-3.5.md) (April 2023)
* Customizable Dashboard ([#9416](https://github.com/netbox-community/netbox/issues/9416))
* Remote Data Sources ([#11558](https://github.com/netbox-community/netbox/issues/11558))
* Configuration Template Rendering ([#11559](https://github.com/netbox-community/netbox/issues/11559))
* NAPALM Integration Plugin ([#10520](https://github.com/netbox-community/netbox/issues/10520))
* ASN Ranges ([#8550](https://github.com/netbox-community/netbox/issues/8550))
* Provider Accounts ([#9047](https://github.com/netbox-community/netbox/issues/9047))
* Job-Triggered Webhooks  ([#8958](https://github.com/netbox-community/netbox/issues/8958))

#### [Version 3.4](./version-3.4.md) (December 2022)
* New Global Search ([#10560](https://github.com/netbox-community/netbox/issues/10560))
* Virtual Device Contexts ([#7854](https://github.com/netbox-community/netbox/issues/7854))
* Saved Filters ([#9623](https://github.com/netbox-community/netbox/issues/9623))
* JSON/YAML Bulk Imports ([#4347](https://github.com/netbox-community/netbox/issues/4347))
* Update Existing Objects via Bulk Import ([#7961](https://github.com/netbox-community/netbox/issues/7961))
* Scheduled Reports & Scripts ([#8366](https://github.com/netbox-community/netbox/issues/8366))
* API for Staged Changes ([#10851](https://github.com/netbox-community/netbox/issues/10851))

#### [Version 3.3](./version-3.3.md) (August 2022)
* Multi-object Cable Terminations ([#9102](https://github.com/netbox-community/netbox/issues/9102))
* L2VPN Modeling ([#8157](https://github.com/netbox-community/netbox/issues/8157))
* PoE Interface Attributes ([#1099](https://github.com/netbox-community/netbox/issues/1099))
* Half-Height Rack Units ([#51](https://github.com/netbox-community/netbox/issues/51))
* Restrict API Tokens by Client IP ([#8233](https://github.com/netbox-community/netbox/issues/8233))
* Reference User in Permission Constraints ([#9074](https://github.com/netbox-community/netbox/issues/9074))
* Custom Field Grouping ([#8495](https://github.com/netbox-community/netbox/issues/8495))
* Toggle Custom Field Visibility ([#9166](https://github.com/netbox-community/netbox/issues/9166))

#### [Version 3.2](./version-3.2.md) (April 2022)
* Plugins Framework Extensions ([#8333](https://github.com/netbox-community/netbox/issues/8333))
* Modules & Module Types ([#7844](https://github.com/netbox-community/netbox/issues/7844))
* Custom Object Fields ([#7006](https://github.com/netbox-community/netbox/issues/7006))
* Custom Status Choices ([#8054](https://github.com/netbox-community/netbox/issues/8054))
* Improved User Preferences ([#7759](https://github.com/netbox-community/netbox/issues/7759))
* Inventory Item Roles ([#3087](https://github.com/netbox-community/netbox/issues/3087))
* Inventory Item Templates ([#8118](https://github.com/netbox-community/netbox/issues/8118))
* Service Templates ([#1591](https://github.com/netbox-community/netbox/issues/1591))
* Automatic Provisioning of Next Available VLANs ([#2658](https://github.com/netbox-community/netbox/issues/2658))

#### [Version 3.1](./version-3.1.md) (December 2021)
* Contact Objects ([#1344](https://github.com/netbox-community/netbox/issues/1344))
* Wireless Networks ([#3979](https://github.com/netbox-community/netbox/issues/3979))
* Dynamic Configuration Updates ([#5883](https://github.com/netbox-community/netbox/issues/5883))
* First Hop Redundancy Protocol (FHRP) Groups ([#6235](https://github.com/netbox-community/netbox/issues/6235))
* Conditional Webhooks ([#6238](https://github.com/netbox-community/netbox/issues/6238))
* Interface Bridging ([#6346](https://github.com/netbox-community/netbox/issues/6346))
* Multiple ASNs per Site ([#6732](https://github.com/netbox-community/netbox/issues/6732))
* Single Sign-On (SSO) Authentication ([#7649](https://github.com/netbox-community/netbox/issues/7649))

#### [Version 3.0](./version-3.0.md) (August 2021)
* Updated User Interface ([#5893](https://github.com/netbox-community/netbox/issues/5893))
* GraphQL API ([#2007](https://github.com/netbox-community/netbox/issues/2007))
* IP Ranges ([#834](https://github.com/netbox-community/netbox/issues/834))
* Custom Model Validation ([#5963](https://github.com/netbox-community/netbox/issues/5963))
* SVG Cable Traces ([#6000](https://github.com/netbox-community/netbox/issues/6000))
* New Views for Models Previously Under the Admin UI ([#6466](https://github.com/netbox-community/netbox/issues/6466))
* REST API Token Provisioning ([#5264](https://github.com/netbox-community/netbox/issues/5264))
* New Housekeeping Command ([#6590](https://github.com/netbox-community/netbox/issues/6590))
* Custom Queue Support for Plugins ([#6651](https://github.com/netbox-community/netbox/issues/6651))

#### [Version 2.11](./version-2.11.md) (April 2021)
* Journaling Support ([#151](https://github.com/netbox-community/netbox/issues/151))
* Parent Interface Assignments ([#1519](https://github.com/netbox-community/netbox/issues/1519))
* Pre- and Post-Change Snapshots in Webhooks ([#3451](https://github.com/netbox-community/netbox/issues/3451))
* Mark as Connected Without a Cable ([#3648](https://github.com/netbox-community/netbox/issues/3648))
* Allow Assigning Devices to Locations ([#4971](https://github.com/netbox-community/netbox/issues/4971))
* Dynamic Object Exports ([#4999](https://github.com/netbox-community/netbox/issues/4999))
* Variable Scope Support for VLAN Groups ([#5284](https://github.com/netbox-community/netbox/issues/5284))
* New Site Group Model ([#5892](https://github.com/netbox-community/netbox/issues/5892))
* Improved Change Logging ([#5913](https://github.com/netbox-community/netbox/issues/5913))
* Provider Network Modeling ([#5986](https://github.com/netbox-community/netbox/issues/5986))

#### [Version 2.10](./version-2.10.md) (December 2020)
* Route Targets ([#259](https://github.com/netbox-community/netbox/issues/259))
* REST API Bulk Deletion ([#3436](https://github.com/netbox-community/netbox/issues/3436))
* REST API Bulk Update ([#4882](https://github.com/netbox-community/netbox/issues/4882))
* Reimplementation of Custom Fields ([#4878](https://github.com/netbox-community/netbox/issues/4878))
* Improved Cable Trace Performance ([#4900](https://github.com/netbox-community/netbox/issues/4900))

#### [Version 2.9](./version-2.9.md) (August 2020)
* Object-Based Permissions ([#554](https://github.com/netbox-community/netbox/issues/554))
* Background Execution of Scripts & Reports ([#2006](https://github.com/netbox-community/netbox/issues/2006))
* Named Virtual Chassis ([#2018](https://github.com/netbox-community/netbox/issues/2018))
* Changes to Tag Creation ([#3703](https://github.com/netbox-community/netbox/issues/3703))
* Dedicated Model for VM Interfaces ([#4721](https://github.com/netbox-community/netbox/issues/4721))
* REST API Endpoints for Users and Groups ([#4877](https://github.com/netbox-community/netbox/issues/4877))

#### [Version 2.8](./version-2.8.md) (April 2020)
* Remote Authentication Support ([#2328](https://github.com/netbox-community/netbox/issues/2328))
* Plugins ([#3351](https://github.com/netbox-community/netbox/issues/3351))

#### [Version 2.7](./version-2.7.md) (January 2020)
* Enhanced Device Type Import ([#451](https://github.com/netbox-community/netbox/issues/451))
* Bulk Import of Device Components ([#822](https://github.com/netbox-community/netbox/issues/822))
* External File Storage ([#1814](https://github.com/netbox-community/netbox/issues/1814))
* Rack Elevations Rendered via SVG ([#2248](https://github.com/netbox-community/netbox/issues/2248))

#### [Version 2.6](./version-2.6.md) (June 2019)
* Power Panels and Feeds ([#54](https://github.com/netbox-community/netbox/issues/54))
* Caching ([#2647](https://github.com/netbox-community/netbox/issues/2647))
* View Permissions ([#323](https://github.com/netbox-community/netbox/issues/323))
* Custom Links ([#969](https://github.com/netbox-community/netbox/issues/969))
* Prometheus Metrics ([#3104](https://github.com/netbox-community/netbox/issues/3104))

#### [Version 2.5](./version-2.5.md) (December 2018)
* Patch Panels and Cables ([#20](https://github.com/netbox-community/netbox/issues/20))

#### [Version 2.4](./version-2.4.md) (August 2018)
* Webhooks ([#81](https://github.com/netbox-community/netbox/issues/81))
* Tagging ([#132](https://github.com/netbox-community/netbox/issues/132))
* Contextual Configuration Data ([#1349](https://github.com/netbox-community/netbox/issues/1349))
* Change Logging ([#1898](https://github.com/netbox-community/netbox/issues/1898))

#### [Version 2.3](./version-2.3.md) (February 2018)
* Virtual Chassis ([#99](https://github.com/netbox-community/netbox/issues/99))
* Interface VLAN Assignments ([#150](https://github.com/netbox-community/netbox/issues/150))
* Bulk Object Creation via the API ([#1553](https://github.com/netbox-community/netbox/issues/1553))
* Automatic Provisioning of Next Available Prefixes ([#1694](https://github.com/netbox-community/netbox/issues/1694))
* Bulk Renaming of Device/VM Components ([#1781](https://github.com/netbox-community/netbox/issues/1781))

#### [Version 2.2](./version-2.2.md) (October 2017)
* Virtual Machines and Clusters ([#142](https://github.com/netbox-community/netbox/issues/142))
* Custom Validation Reports ([#1511](https://github.com/netbox-community/netbox/issues/1511))

#### [Version 2.1](./version-2.1.md) (July 2017)
* IP Address Roles ([#819](https://github.com/netbox-community/netbox/issues/819))
* Automatic Provisioning of Next Available IP ([#1246](https://github.com/netbox-community/netbox/issues/1246))
* NAPALM Integration ([#1348](https://github.com/netbox-community/netbox/issues/1348))

#### [Version 2.0](./version-2.0.md) (May 2017)
* API 2.0 ([#113](https://github.com/netbox-community/netbox/issues/113))
* Image Attachments ([#152](https://github.com/netbox-community/netbox/issues/152))
* Global Search ([#159](https://github.com/netbox-community/netbox/issues/159))
* Rack Elevations View ([#951](https://github.com/netbox-community/netbox/issues/951))
=== END FILE ===

**Version 4.1**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-4.1/
=== BEGIN FILE ===
# NetBox v4.1

## v4.1.10 (2024-12-23)

### Bug Fixes

* Fix object change logging

---

## v4.1.9 (2024-12-17)

!!! danger "Do Not Use"
    This release contains a regression which breaks change logging. Please use release v4.1.10 instead.

### Enhancements

* Change the highlighted color of disabled interfaces in interface lists
* Apply all registered request processors when running custom scripts

### Bug Fixes

* Fix rendering of IP addresses table when assigning an existing IP address to an interface with global HTMX navigation enabled
* Fix `ZeroDivisionError` exception under specific circumstances when generating a cable trace
* Enable referencing cable attributes when querying a `cabletermination_set` via the GraphQL API
* Fix `AttributeError` exception when attempting to edit an IP address assigned to a virtual machine interface

---

## v4.1.8 (2024-12-12)

### Enhancements

* Enable OOB IP address designation during bulk import
* Enable designation of rack type during bulk import & bulk edit
* Enable designating an IP address as out-of-band for a device upon creation
* Add L2TP, PPTP, Wireguard, and OpenVPN tunnel types
* Automatically clear cache on restart when `DEBUG` is enabled
* Omit stack trace from rendered device/VM configuration when an exception is raised
* Include status in device details when hovering on rack elevation
* Enable the dynamic registration of context managers for request processing

### Bug Fixes

* Fix unhandled AttributeError exception when bulk renaming objects
* Fix dynamic inclusion support for config templates
* Fix validation of racked device fields when modifying via REST API
* Ensure default custom field values are populated when creating new modules
* Show plugin-generated alerts within UI views for custom scripts
* Fix REST API pagination for low `MAX_PAGE_SIZE` values
* Omit UI navigation bar when printing
* Fix searching for ASN ranges by name

---

## v4.1.7 (2024-11-21)

### Enhancements

* Enable adding/removing individual VLANs while bulk editing device interfaces
* Enable the assignment/removal of virtualization cluster via device bulk edit
* Add 1000Base-LX interface type
* Hide sensitive parameters under data source view (even for privileged users)

### Bug Fixes

* Correct help text on `name` field of module type component templates
* Ensure GraphiQL UI resources are served locally
* Fix scheduling of recurring custom scripts
* Fix the execution of custom scripts via REST API & management command
* Fix selection of all listed objects during bulk edit
* Fix system info export when a config revision exists
* Force evaluation of `LOGIN_REQUIRED` when requesting static media
* Correct labels for virtual machine & virtual disk size properties
* Fix validation of maximum VLAN ID value when defining VLAN groups
* The `to_grams()` utility function should always return an integer value

---

## v4.1.6 (2024-10-31)

### Bug Fixes

* Fix warning when no scripts are found within a script module
* Fix translation support for certain tab headings
* Fix regression preventing custom scripts from executing

## v4.1.5 (2024-10-28)

### Enhancements

* Provide a single "scope" field for bulk editing VLAN group scope assignments

### Bug Fixes

* Fix validation of overlapping IP ranges
* Fix styling of highlighted table rows in dark mode
* Ensure bulk action buttons are consistent for device type components
* Ensure AbortTransaction is caught when running a custom script with `commit=False`
* Ensure background jobs are validated before being scheduled
* Remove cached fields on CableTermination model from GraphQL API
* Ensure support for image attachments with a `.webp` file extension
* Restore missing `devicetypes` and `children` fields for several objects in GraphQL API
* Remove paginator from version history table under plugin view
* Retain `job_timeout` value when scheduling a recurring custom script
* Fix SSO login support for Entra ID (formerly Azure AD)
* Fix background color for bulk rename buttons in list views
* Adjust `manage.py` to reference `python3` executable

---

## v4.1.4 (2024-10-15)

### Enhancements

* Display device's rack position in cable traces
* Rename Microsoft Azure AD SSO backend to Microsoft Entra ID
* Float form & bulk operation buttons within UI
* Introduce additional choices for device airflow direction
* Add EVPN-VPWS L2VPN type
* Limit the display of tagged VLANs within interface tables
* Enable filtering VLANs by assigned device or VM interface

### Bug Fixes

* Fix AND/OR filtering in GraphQL API for selection fields
* Fix cable tracing across split paths
* Fix GraphQL API query support for custom field choices
* Fix AttributeError exception resulting from background jobs with no associated object type
* Disallow removal of a master device from its virtual chassis
* Fix filtering of related objects when adding a power port, rear port, or inventory item template to a device type
* Correct sizing of logo & SSO icons on login page
* Fix AttributeError exception when attempting to delete a background job under certain conditions
* Fix extended lookups for choice field filters
* Fix the display of rack types in global search results
* Fix UnboundLocalError exception when attempting to sync data source in parallel

---

## v4.1.3 (2024-10-02)

### Enhancements

* Add SOCKS support to proxy settings for Git remote data sources

### Bug Fixes

* Raise validation error when attempting to remove a custom field choice in use

---

## v4.1.2 (2024-09-26)

### Enhancements

* Enable global search for AS numbers using "AS" prefix
* Enable bulk import of primary IPv4 & IPv6 addresses for virtual device contexts (VDCs)
* Add 100Base-X SFP interface type
* Include return URL when creating new IP address from prefix IPs list
* Add Eaton C39 power outlet type
* Do not preload Branch & StagedChange models in `nbshell`
* Add IEEE 802.15.4 wireless interface type

### Bug Fixes

* Fix filtering of cables with no type assigned
* Trim clickable area of form field labels
* Show total device weight in both imperial & metric units
* Fix AttributeError under child object views when experimental HTMX navigation is enabled
* Fix the cleanup of stale custom field data after removing a plugin
* Rebuild MPTT for module bays on upgrade to v4.1
* Fix URL resolution in `NetBoxModelSerializer` for plugin models
* Fix uncaught FieldError exception when referencing an invalid field on a related object during bulk import
* Fix MultipleObjectsReturned exception when importing a device type without uniquely specifying a manufacturer
* Fix reporting of last run time & status for custom scripts under UI
* Restore consistent font support for non-Latin characters
* Fix cable termination selection after switching termination type
* Correct text color in notification pop-ups under dark mode
* Fix language translation of form field labels under user preferences
* Fix global search support for ASN range names
* Fix toggling disconnected interfaces under device view
* Record change to terminating object when disconnecting a cable
* Fix calculation of aggregate VM disk space under cluster view
* Correct custom field minimum value validation error message

---

## v4.1.1 (2024-09-12)

### Enhancements

* Add USB front & rear port types
* Add NEMA L22-20 power port & outlet types

### Bug Fixes

* Fix OpenAPI schema definition for custom scripts REST API endpoint
* Restore pagination for object list dashboard widgets
* Avoid prefetching all jobs when retrieving custom scripts via the REST API
* Fix styling of map buttons under site and device views
* Prevent object & multi-object custom fields from breaking bulk import forms
* Remove duplicate prefixes & IP addresses returned by the `present_in_vrf` query filter
* Fix rendering of Markdown tables inside object list dashboard widgets
* Fix display of the changelog tab for users with sufficient permission
* Enable debug toolbar middleware for `strawberry-django` only when `DEBUG` is true
* Fix support for declaring individual VLAN IDs within a VLAN group
* Fix database migration error when upgrading to v4.1 from v3.7 or earlier
* Fix exception when specifying a bridge relationship on an interface template
* Custom script fails to execute when triggered by an event rule
* GraphQL `service_list` filter should not require a port number

---

## v4.1.0 (2024-09-03)

### Breaking Changes

* Several filters deprecated in v4.0 have been removed.
* The unit size for `VirtualMachine.disk` and `VirtualDisk.size` has been changed from 1 gigabyte to 1 megabyte.
* The `min_vid` and `max_vid` fields on the VLAN group model have been replaced with `vid_ranges`.
* The five individual event type fields on the EventRule model have been replaced by a single `event_types` array field.
* All UI views & API endpoints associated with change records have been moved from `/extras` to `/core`.
* The `validate()` method on CustomValidator subclasses now must accept the request argument.

### New Features

#### Circuit Groups

Circuits can now be assigned to groups for administrative purposes.

#### VLAN Group ID Ranges

The VLAN group model has been enhanced to support multiple VLAN ID (VID) ranges.

#### Nested Device Modules

Module bays can now be added to modules to effect a hierarchical arrangement of submodules within a device.

#### Rack Types

A new rack type model has been introduced.

#### Plugins Catalog Integration

The NetBox UI now integrates directly with the canonical plugins catalog.

#### User Notifications

NetBox now includes a user notification system.

### Enhancements

* Add a serial number field for virtual machines
* Enable uniqueness enforcement for custom field values
* Enable filtering of custom script output by log level
* Support for tracking airflow on racks and module types
* Dynamically render the custom field edit form depending on the selected field type
* Add `distance` and `distance_unit` fields for wireless links
* Add `display_url` field to all REST API serializers
* Add `last_synced` time to REST API serializer for data sources
* Enable plugin views to enforce `LOGIN_REQUIRED` selectively
* Enable filtering of selection choices for object and multi-object custom fields
* Update user interface styling
* Introduce `ISOLATED_DEPLOYMENT` config parameter
* `ObjectEditView` now supports HTMX-based object editing
* Introduce a configurable limit on the number of aliases within a GraphQL API request
* Enforce a standard policy for local passwords by default
* Include the assigned provider in nested API representation of circuits

### Bug Fixes (From Beta1)

* Fix exception when viewing a job with no related object
* Record static object representation when calling `NotificationGroup.notify()`
* Prevent automatic deletion of related notifications when deleting an object
* Correct file paths in plugin installation instructions
* Fix filtering of related services under IP address view
* Avoid duplicating catalog listings for installed plugins
* Correct styling of the edit & delete buttons for custom script modules
* Fix log level filtering support for custom script messages
* Correct rounding of reported VLAN group utilization

### Plugins

* Introduce improved plugin support for background jobs
* Enable plugins to embed content in the top navigation bar
* Extend `PluginTemplateExtension` to enable registering multiple models
* Add an `alerts()` method to `PluginTemplateExtension` for embedding important information on object views
* Introduce a mechanism for plugins to register custom event types

### Other Changes

* Change the atomic unit for virtual disks from 1GB to 1MB
* The URL path for UI views concerning virtual disks has been standardized.
* Remove various deprecated query filters
* Indicate product edition in release data
* Move all change logging resources from `extras` to `core`
* Remove the ID column from the default table configuration for changelog records
* Relocate rack items in navigation menu
* The use of legacy "nested" serializer classes has been deprecated

### REST API Changes

* The `/api/extras/object-changes/` endpoint has moved to `/api/core/object-changes/`.
* Most object representations now include a read-only `display_url` field.
* Added several new endpoints related to circuits, racks, notifications, and more.
=== END FILE ===

**Version 4.0**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-4.0/
=== BEGIN FILE ===
# NetBox v4.0

## v4.0.11 (2024-09-03)

### Bug Fixes

* [#17310](https://github.com/netbox-community/netbox/issues/17310) - Enforce restricted queryset for related objects in GraphQL API requests
* [#17321](https://github.com/netbox-community/netbox/issues/17321) - Ensure the job is attributed to the specified user when using the `runscript` management command
* [#17323](https://github.com/netbox-community/netbox/issues/17323) - Associate job with script object when executed using the `runscript` management command
* [#17337](https://github.com/netbox-community/netbox/issues/17337) - Fix ordering of virtual device contexts by device name
* [#17341](https://github.com/netbox-community/netbox/issues/17341) - Avoid `NoReverseMatch` exceptions with specific dashboard widget configurations

## v4.0.10 (2024-08-29)

### Enhancements

* [#16857](https://github.com/netbox-community/netbox/issues/16857) - Scroll long rendered Markdown content within tables
* [#16905](https://github.com/netbox-community/netbox/issues/16905) - Enable filtering of device components by device status
* [#16949](https://github.com/netbox-community/netbox/issues/16949) - Add device count column to sites table
* [#17072](https://github.com/netbox-community/netbox/issues/17072) - Linkify email addresses & phone numbers in contact assignments list
* [#17177](https://github.com/netbox-community/netbox/issues/17177) - Add facility field to locations filter form

### Bug Fixes

* [#16292](https://github.com/netbox-community/netbox/issues/16292) - Ensure consistent evaluation of queryset for both individual and list GraphQL API queries
* [#16385](https://github.com/netbox-community/netbox/issues/16385) - Restore support for white, gray, and black background colors
* [#16640](https://github.com/netbox-community/netbox/issues/16640) - Fix potential corruption of JSON values in custom fields that are not UI-editable
* [#16670](https://github.com/netbox-community/netbox/issues/16670) - Fix conflicts within OpenAPI schema definition regarding nested serializers
* [#16733](https://github.com/netbox-community/netbox/issues/16733) - Fix bulk edit/delete of objects when using "select all" widget
* [#16756](https://github.com/netbox-community/netbox/issues/16756) - Fix dynamic pagination of custom script results table
* [#16825](https://github.com/netbox-community/netbox/issues/16825) - Avoid `NoReverseMatch` exception when displaying count of related object type with no list view
* [#16946](https://github.com/netbox-community/netbox/issues/16946) - GraphQL API requests with an invalid filter should return an empty set
* [#16959](https://github.com/netbox-community/netbox/issues/16959) - Fix function of "reset" button on objects filter form
* [#16973](https://github.com/netbox-community/netbox/issues/16973) - Fix support for evaluating user token (`$user`) against custom field values in permission constraints
* [#17007](https://github.com/netbox-community/netbox/issues/17007) - Center SSO authentication icon when backend is unnamed
* [#17070](https://github.com/netbox-community/netbox/issues/17070) - Image height & width values should not be required when creating an image attachment via the REST API
* [#17108](https://github.com/netbox-community/netbox/issues/17108) - Ensure template date & time filters always return localtime-aware values
* [#17117](https://github.com/netbox-community/netbox/issues/17117) - Work around Safari rendering bug
* [#17186](https://github.com/netbox-community/netbox/issues/17186) - Fix display of custom links with default style under dark mode
* [#17219](https://github.com/netbox-community/netbox/issues/17219) - Fix system config view exception when custom validator classes are employed
* [#17230](https://github.com/netbox-community/netbox/issues/17230) - Ensure consistent rendering for all dashboard widget colors
* [#17256](https://github.com/netbox-community/netbox/issues/17256) - Fix VLAN group scope selection for non-English languages
* [#17278](https://github.com/netbox-community/netbox/issues/17278) - Ensure hierarchy is recalculated when bulk editing recursively nested object types (e.g. tenant groups)
* [#17279](https://github.com/netbox-community/netbox/issues/17279) - Do not regenerate key when updating a token via REST API
* [#17286](https://github.com/netbox-community/netbox/issues/17286) - Fix exception when adding member device to virtual chassis via web UI

---

## v4.0.9 (2024-08-14)

### Enhancements

* [#16692](https://github.com/netbox-community/netbox/issues/16692) - Enable modifying VLAN assignment while bulk editing prefixes
* [#17006](https://github.com/netbox-community/netbox/issues/17006) - Add IEEE 802.11be interface type

### Bug Fixes

* [#13459](https://github.com/netbox-community/netbox/issues/13459) - Correct OpenAPI schema type for `TreeNodeMultipleChoiceFilter`
* [#16073](https://github.com/netbox-community/netbox/issues/16073) - Respect default values for custom fields during bulk import of objects
* [#16176](https://github.com/netbox-community/netbox/issues/16176) - Restore ability to select multiple terminating devices when connecting a cable
* [#16871](https://github.com/netbox-community/netbox/issues/16871) - Sanitize device ID query parameter when bulk editing components to prevent exception
* [#17038](https://github.com/netbox-community/netbox/issues/17038) - Fix AttributeError exception when attempting to export system status data
* [#17064](https://github.com/netbox-community/netbox/issues/17064) - Fix misaligned text within rendered Markdown code blocks
* [#17124](https://github.com/netbox-community/netbox/issues/17124) - `BaseTable` should follow reverse one-to-one relationships when prefetching related objects
* [#17131](https://github.com/netbox-community/netbox/issues/17131) - Fix exception when creating object-type custom field without selecting related object type
* [#17144](https://github.com/netbox-community/netbox/issues/17144) - Avoid showing duplicated pop-up messages

---

## v4.0.8 (2024-07-26)

### Enhancements

* [#14640](https://github.com/netbox-community/netbox/issues/14640) - Add Dutch language support
* [#14792](https://github.com/netbox-community/netbox/issues/14792) - Add Polish language support
* [#15375](https://github.com/netbox-community/netbox/issues/15375) - Enable customization of SSO backend name & icon
* [#15660](https://github.com/netbox-community/netbox/issues/15660) - Add Czech language support
* [#15696](https://github.com/netbox-community/netbox/issues/15696) - Add Danish language support
* [#16793](https://github.com/netbox-community/netbox/issues/16793) - Add Italian language support
* [#16933](https://github.com/netbox-community/netbox/issues/16933) - Enable toggling true/false marks on BooleanColumn
* [#16943](https://github.com/netbox-community/netbox/issues/16943) - Expand navigation breadcrumbs on job view to include the parent object

### Bug Fixes

* [#16357](https://github.com/netbox-community/netbox/issues/16357) - Replicate assigned type & tenant for cable when clicking "create an add another"
* [#16402](https://github.com/netbox-community/netbox/issues/16402) - Remove inoperative links from report result view
* [#16536](https://github.com/netbox-community/netbox/issues/16536) - Revert `role` & `role_id` filters for device components to `device_role` & `device_role_id` to avoid conflict with inventory item `role` field
* [#16624](https://github.com/netbox-community/netbox/issues/16624) - Correct OpenAPI schema definitions for several fields
* [#16760](https://github.com/netbox-community/netbox/issues/16760) - Fix data source syncing using git via a local path
* [#16819](https://github.com/netbox-community/netbox/issues/16819) - Highlight parent device in rack when viewing child device
* [#16838](https://github.com/netbox-community/netbox/issues/16838) - ActionsColumn should render extra buttons even when no stock actions are enabled
* [#16867](https://github.com/netbox-community/netbox/issues/16867) - Fix exception when a dashboard list widget references a model which has been removed
* [#16963](https://github.com/netbox-community/netbox/issues/16963) - Fix filtering of "accounts" link under providers list
* [#16964](https://github.com/netbox-community/netbox/issues/16964) - Ensure configured password validators are enforced

---

## v4.0.7 (2024-07-09)

### Enhancements

* [#14554](https://github.com/netbox-community/netbox/issues/14554) - Add support for [django-storage-swift](https://github.com/dennisv/django-storage-swift) storage backend
* [#16424](https://github.com/netbox-community/netbox/issues/16424) - Enable filtering of devices by cluster and cluster group
* [#16716](https://github.com/netbox-community/netbox/issues/16716) - Display NAT address (if any) for OOB IP address under device view
* [#16725](https://github.com/netbox-community/netbox/issues/16725) - Always position the admin section last in the navigation menu
* [#16791](https://github.com/netbox-community/netbox/issues/16791) - Add 200 & 400 Gbps selections for circuit termination port speed
* [#16802](https://github.com/netbox-community/netbox/issues/16802) - Introduce `SENTRY_SEND_DEFAULT_PII` configuration parameter and disable PII export by default
* [#16817](https://github.com/netbox-community/netbox/issues/16817) - Add 200 & 400 Gbps selections for circuit commit rate

### Bug Fixes

* [#16523](https://github.com/netbox-community/netbox/issues/16523) - Restore highlighting of current device in virtual chassis members panel
* [#16654](https://github.com/netbox-community/netbox/issues/16654) - Fix parent item assignment for inventory item bulk import
* [#16657](https://github.com/netbox-community/netbox/issues/16657) - Fix translation of object types in global search
* [#16679](https://github.com/netbox-community/netbox/issues/16679) - Avoid overwriting custom JSON fields during bulk edit
* [#16689](https://github.com/netbox-community/netbox/issues/16689) - System configuration view should reflect static parameters when no config revisions exist
* [#16714](https://github.com/netbox-community/netbox/issues/16714) - Fix cloning of device types with 0U height
* [#16721](https://github.com/netbox-community/netbox/issues/16721) - Fix errant API request after deselecting a rack in device edit form
* [#16723](https://github.com/netbox-community/netbox/issues/16723) - Fix escaping of path to virtual environment in `upgrade.sh`
* [#16735](https://github.com/netbox-community/netbox/issues/16735) - Object list "results" tab should show a count of zero when empty
* [#16747](https://github.com/netbox-community/netbox/issues/16747) - Avoid clearing entire search cache when manually reindexing specific apps/models
* [#16758](https://github.com/netbox-community/netbox/issues/16758) - Ensure manually selected language persists across browser sessions
* [#16779](https://github.com/netbox-community/netbox/issues/16779) - Fix saved filter selection for child object lists
* [#16780](https://github.com/netbox-community/netbox/issues/16780) - IKE proposal created via REST API should not require authentication_algorithm
* [#16796](https://github.com/netbox-community/netbox/issues/16796) - Allow assignment of VM with no site to a cluster with a site
* [#16806](https://github.com/netbox-community/netbox/issues/16806) - Fix redirect URL when creating contact assignments with "add another" button
* [#16807](https://github.com/netbox-community/netbox/issues/16807) - Fix layout of VLAN edit form when custom fields are present
* [#16808](https://github.com/netbox-community/netbox/issues/16808) - Fix event rule triggering in scenario where objects are updated immediately prior to deletion
* [#16813](https://github.com/netbox-community/netbox/issues/16813) - Fix AttributeError exception when filtering bookmarks in dashboard widget by object type
* [#16843](https://github.com/netbox-community/netbox/issues/16843) - Permit creation of IKE policies via REST API without specifying an IKE mode

---

## v4.0.6 (2024-06-24)

### Enhancements

* [#15348](https://github.com/netbox-community/netbox/issues/15348) - Show saved filters alongside quick search on object list views
* [#15794](https://github.com/netbox-community/netbox/issues/15794) - Dynamically populate related objects in UI views
* [#16256](https://github.com/netbox-community/netbox/issues/16256) - Enable alphabetical ordering of bookmarks on dashboard
* [#16307](https://github.com/netbox-community/netbox/issues/16307) - Enable calling `log_*()` methods on Script without passing a message

### Bug Fixes

* [#13925](https://github.com/netbox-community/netbox/issues/13925) - Fix support for "zulu" (UTC) timestamps for custom fields
* [#14829](https://github.com/netbox-community/netbox/issues/14829) - Fix support for simple conditions (without AND/OR) in event rules
* [#15717](https://github.com/netbox-community/netbox/issues/15717) - Allow assigning a device/VM in a site to a cluster with no site assigned
* [#16143](https://github.com/netbox-community/netbox/issues/16143) - Display timestamps in tables in the configured timezone
* [#16149](https://github.com/netbox-community/netbox/issues/16149) - Fix object linking in custom script logs
* [#16252](https://github.com/netbox-community/netbox/issues/16252) - Fix total count in tab at top of rack elevations view
* [#16273](https://github.com/netbox-community/netbox/issues/16273) - Restore global search bar on mobile
* [#16416](https://github.com/netbox-community/netbox/issues/16416) - Retain dark/light mode toggle on mobile view
* [#16444](https://github.com/netbox-community/netbox/issues/16444) - Disable ordering circuits list by A/Z termination
* [#16450](https://github.com/netbox-community/netbox/issues/16450) - Searching for rack unit in form dropdown should be case-insensitive
* [#16452](https://github.com/netbox-community/netbox/issues/16452) - Fix sizing of buttons within object attribute panels
* [#16454](https://github.com/netbox-community/netbox/issues/16454) - Address DNS lookup bug in `django-debug-toolbar`
* [#16460](https://github.com/netbox-community/netbox/issues/16460) - Omit spaces from telephone number URLs
* [#16512](https://github.com/netbox-community/netbox/issues/16512) - Restore a user's preferred language (if any) on login
* [#16542](https://github.com/netbox-community/netbox/issues/16542) - Fix bulk form operations when HTMX is enabled
* [#16702](https://github.com/netbox-community/netbox/issues/16702) - Fix validation of `return_url` query parameter

---

## v4.0.5 (2024-06-06)

### Enhancements

* [#14810](https://github.com/netbox-community/netbox/issues/14810) - Enable contact assignment for services
* [#15489](https://github.com/netbox-community/netbox/issues/15489) - Add 1000Base-TX interface type
* [#15873](https://github.com/netbox-community/netbox/issues/15873) - Improve readability of allocates resource numbers for clusters
* [#16290](https://github.com/netbox-community/netbox/issues/16290) - Capture entire object in changelog data (but continue to display only non-internal attributes)
* [#16353](https://github.com/netbox-community/netbox/issues/16353) - Enable plugins to extend object change view with custom content

### Bug Fixes

* [#13422](https://github.com/netbox-community/netbox/issues/13422) - Rebuild MPTT trees for applicable models after merging staged changes
* [#14567](https://github.com/netbox-community/netbox/issues/14567) - Apply active quicksearch value when exporting "current view" from object list
* [#15194](https://github.com/netbox-community/netbox/issues/15194) - Avoid enqueuing duplicate event triggers for a modified object
* [#16039](https://github.com/netbox-community/netbox/issues/16039) - Fix row highlighting for front & rear port connections under device view
* [#16050](https://github.com/netbox-community/netbox/issues/16050) - Fix display of names & descriptions defined for custom scripts
* [#16083](https://github.com/netbox-community/netbox/issues/16083) - Disable font ligatures to avoid peculiarities in rendered text
* [#16202](https://github.com/netbox-community/netbox/issues/16202) - Fix site map button URL for certain localizations
* [#16261](https://github.com/netbox-community/netbox/issues/16261) - Fix GraphQL filtering for certain multi-value filters
* [#16286](https://github.com/netbox-community/netbox/issues/16286) - Fix global search support for provider accounts
* [#16312](https://github.com/netbox-community/netbox/issues/16312) - Fix object list navigation for dashboard widgets
* [#16315](https://github.com/netbox-community/netbox/issues/16315) - Fix filtering change log & journal entries by object type in UI
* [#16376](https://github.com/netbox-community/netbox/issues/16376) - Update change log for the terminating object (e.g. interface) when attaching a cable
* [#16400](https://github.com/netbox-community/netbox/issues/16400) - Fix AttributeError when attempting to restore a previous configuration revision after deleting the current one

---

## v4.0.3 (2024-05-22)

### Enhancements

* [#12984](https://github.com/netbox-community/netbox/issues/12984) - Add Molex Micro-Fit power port & outlet types
* [#13764](https://github.com/netbox-community/netbox/issues/13764) - Enable contact assignments for aggregates, prefixes, IP ranges, and IP addresses
* [#14639](https://github.com/netbox-community/netbox/issues/14639) - Add Ukrainian translation support
* [#14653](https://github.com/netbox-community/netbox/issues/14653) - Add an inventory items table column for all device components
* [#14686](https://github.com/netbox-community/netbox/issues/14686) - Add German translation support
* [#14855](https://github.com/netbox-community/netbox/issues/14855) - Add Chinese translation support
* [#14948](https://github.com/netbox-community/netbox/issues/14948) - Introduce the `has_virtual_device_context` filter for devices
* [#15353](https://github.com/netbox-community/netbox/issues/15353) - Improve error reporting when custom scripts fail to load
* [#15496](https://github.com/netbox-community/netbox/issues/15496) - Implement dedicated views for management of circuit terminations
* [#15603](https://github.com/netbox-community/netbox/issues/15603) - Add 4G & 5G cellular interface types
* [#15962](https://github.com/netbox-community/netbox/issues/15962) - Enable UNIX socket connections for Redis

### Bug Fixes

* [#13293](https://github.com/netbox-community/netbox/issues/13293) - Limit interface selector for IP address to current device/VM
* [#14953](https://github.com/netbox-community/netbox/issues/14953) - Ensure annotated count fields are present in REST API response data when creating new objects
* [#14982](https://github.com/netbox-community/netbox/issues/14982) - Fix OpenAPI schema definition for SerializedPKRelatedFields
* [#15082](https://github.com/netbox-community/netbox/issues/15082) - Strip whitespace from choice values & labels when creating a custom field choice set
* [#16138](https://github.com/netbox-community/netbox/issues/16138) - Fix support for referencing users & groups in object permissions
* [#16145](https://github.com/netbox-community/netbox/issues/16145) - Restore ability to reference custom scripts via module & name in REST API
* [#16164](https://github.com/netbox-community/netbox/issues/16164) - Correct display of selected values in UI when filtering object list by a null value
* [#16173](https://github.com/netbox-community/netbox/issues/16173) - Fix TypeError exception when viewing object list with no pagination preference defined
* [#16228](https://github.com/netbox-community/netbox/issues/16228) - Fix permissions enforcement for GraphQL queries of users & groups
* [#16232](https://github.com/netbox-community/netbox/issues/16232) - Preserve bulk action checkboxes on dynamic tables when using pagination
* [#16240](https://github.com/netbox-community/netbox/issues/16240) - Fixed NoReverseMatch exception when adding circuit terminations to an object counts dashboard widget

---

## v4.0.2 (2024-05-14)

!!! warning "Important"
    This release includes an important security fix, and is a strongly recommended update for all users. More details will follow.

### Enhancements

* [#15119](https://github.com/netbox-community/netbox/issues/15119) - Add cluster & cluster group UI filter fields for VLAN groups
* [#16090](https://github.com/netbox-community/netbox/issues/16090) - Include current NetBox version when an unsupported plugin is detected
* [#16096](https://github.com/netbox-community/netbox/issues/16096) - Introduce the `ENABLE_TRANSLATION` configuration parameter
* [#16107](https://github.com/netbox-community/netbox/issues/16107) - Change the default value for `LOGIN_REQUIRED` to True
* [#16127](https://github.com/netbox-community/netbox/issues/16127) - Add integration point for unsupported settings

### Bug Fixes

* [#16077](https://github.com/netbox-community/netbox/issues/16077) - Fix display of parameter values when viewing configuration revisions
* [#16078](https://github.com/netbox-community/netbox/issues/16078) - Fix integer filters mistakenly marked as required for GraphQL API
* [#16101](https://github.com/netbox-community/netbox/issues/16101) - Fix initial loading of pagination widget for dynamic object tables
* [#16123](https://github.com/netbox-community/netbox/issues/16123) - Fix custom script execution via REST API
* [#16124](https://github.com/netbox-community/netbox/issues/16124) - Fix GraphQL API support for querying virtual machine interfaces

---

## v4.0.1 (2024-05-09)

### Enhancements

* [#15148](https://github.com/netbox-community/netbox/issues/15148) - Add copy-to-clipboard button for config context data
* [#15328](https://github.com/netbox-community/netbox/issues/15328) - Add a virtual machines UI tab for host devices
* [#15451](https://github.com/netbox-community/netbox/issues/15451) - Add 2.5 and 5 Gbps backplane Ethernet interface types
* [#16010](https://github.com/netbox-community/netbox/issues/16010) - Enable Prometheus middleware only if metrics are enabled

### Bug Fixes

* [#15968](https://github.com/netbox-community/netbox/issues/15968) - Avoid resizing quick search field to display clear button
* [#15973](https://github.com/netbox-community/netbox/issues/15973) - Fix AttributeError exception when modifying cable termination type
* [#15977](https://github.com/netbox-community/netbox/issues/15977) - Hide all admin menu items for non-authenticated users
* [#15982](https://github.com/netbox-community/netbox/issues/15982) - Restore the "assign IP" tab for assigning existing IP addresses to interfaces
* [#15992](https://github.com/netbox-community/netbox/issues/15992) - Fix AttributeError exception when Sentry integration is enabled
* [#15995](https://github.com/netbox-community/netbox/issues/15995) - Permit nullable fields referenced by unique constraints to be omitted from REST API requests
* [#15999](https://github.com/netbox-community/netbox/issues/15999) - Fix layout of login form labels for certain languages
* [#16003](https://github.com/netbox-community/netbox/issues/16003) - Enable cache busting for `setmode.js` asset to avoid breaking dark mode support on upgrade
* [#16011](https://github.com/netbox-community/netbox/issues/16011) - Fix site tenant assignment by PK via REST API
* [#16020](https://github.com/netbox-community/netbox/issues/16020) - Include Python version in system UI view
* [#16022](https://github.com/netbox-community/netbox/issues/16022) - Fix database migration failure when encountering a script module which no longer exists on disk
* [#16025](https://github.com/netbox-community/netbox/issues/16025) - Fix execution of scripts via the `runscript` management command
* [#16031](https://github.com/netbox-community/netbox/issues/16031) - Render Markdown content in script log messages
* [#16051](https://github.com/netbox-community/netbox/issues/16051) - Translate "empty" text for object tables
* [#16061](https://github.com/netbox-community/netbox/issues/16061) - Omit hidden fields from display within event rule edit form

---

## v4.0.0 (2024-05-06)

!!! tip "Plugin Maintainers"
    Please see the dedicated [plugin migration guide](../plugins/development/migration-v4.md) for a checklist of changes that may be needed to ensure compatibility with NetBox v4.0.

### Breaking Changes

* Support for Python 3.8 and 3.9 has been removed.
* The format for GraphQL query filters has changed. Please see the GraphQL documentation for details and examples.
* The deprecated `device_role` & `device_role_id` filters for devices have been removed. (Use `role` and `role_id` instead.)
* The obsolete `device_role` field has been removed from the REST API serializer for devices. (Use `role` instead.)
* The legacy reports functionality has been dropped. Reports will be automatically converted to custom scripts on upgrade.
* The `parent` and `parent_id` filters for locations now return only immediate children of the specified location. (Use `ancestor` and `ancestor_id` to return _all_ descendants.)
* The `object_type` field on the CustomField model has been renamed to `related_object_type`.
* The `utilities.utils` module has been removed and its resources reorganized into separate modules organized by function.
* The obsolete `NullableCharField` class has been removed. (Use Django's stock `CharField` class with `null=True` instead.)
* The `annotated_date` template filter and `annotated_now` template tag have been removed.

### New Features

#### Complete UI Refresh ([#12128](https://github.com/netbox-community/netbox/issues/12128))

The NetBox user interface has been completely refreshed and updated. This massive effort entailed:

* Refactoring the base HTML templates
* Moving from Boostrap 5.0 to Bootstrap 5.3
* Adopting the [Tabler](https://tabler.io/) UI theme
* Replacing slim-select with [Tom-Select](https://tom-select.js.org/)
* Displaying additional object attributes in dropdown form fields
* Enabling opt-in HTMX-powered navigation (see [#14736](https://github.com/netbox-community/netbox/issues/14736))
* Widespread cleanup & standardization of UI components

#### Dynamic REST API Fields ([#15087](https://github.com/netbox-community/netbox/issues/15087))

The REST API now supports specifying which fields to include in the response data. For example, the response to a request for

```
GET /api/dcim/sites/?fields=name,status,region,tenant
```

will include only the four specified fields in the representation of each site. Additionally, the underlying database queries effected by such requests have been optimized to omit fields which are not included in the response, resulting in a substantial performance improvement.

#### Strawberry GraphQL Engine ([#9856](https://github.com/netbox-community/netbox/issues/9856))

The GraphQL engine has been changed from using Graphene-Django to Strawberry-Django. Changes include:

* Queryset Optimizer - reduces the number of database queries when querying related tables
* Updated GraphiQL Browser
* The format for GraphQL query filters and lookups has changed. Please see the GraphQL documentation for details and examples.

#### Advanced Form Rendering Functionality ([#14739](https://github.com/netbox-community/netbox/issues/14739))

New resources have been introduced to enable advanced form rendering without a need for custom HTML templates. These include:

* FieldSet - Represents a grouping of form fields (replaces the use of lists/tuples)
* InlineFields - Multiple fields rendered on a single row
* TabbedGroups - Fieldsets rendered under navigable tabs within a form
* ObjectAttribute - Renders a read-only representation of a particular object attribute (for reference)

#### Legacy Admin UI Disabled ([#12325](https://github.com/netbox-community/netbox/issues/12325))

The legacy admin user interface is now disabled by default, and the few remaining views it provided have been relocated to the primary UI. NetBox deployments which still depend on the legacy admin functionality for plugins can enable it by setting the `DJANGO_ADMIN_ENABLED` configuration parameter to true.

### Enhancements

* [#12776](https://github.com/netbox-community/netbox/issues/12776) - Introduce the `htmx_table` template tag to simplify the rendering of embedded tables
* [#12851](https://github.com/netbox-community/netbox/issues/12851) - Replace the deprecated Bleach HTML sanitization library with nh3
* [#13283](https://github.com/netbox-community/netbox/issues/13283) - Display additional context on API-backed dropdown form fields (e.g. object descriptions)
* [#13918](https://github.com/netbox-community/netbox/issues/13918) - Add `facility` field to Location model
* [#14237](https://github.com/netbox-community/netbox/issues/14237) - Automatically clear dependent selection form fields when modifying a parent selection
* [#14279](https://github.com/netbox-community/netbox/issues/14279) - Make the current request available as context when running custom validators
* [#14454](https://github.com/netbox-community/netbox/issues/14454) - Include member devices in the REST API representation of virtual chassis
* [#14637](https://github.com/netbox-community/netbox/issues/14637) - Upgrade to Django 5.0
* [#14672](https://github.com/netbox-community/netbox/issues/14672) - Add support for Python 3.12
* [#14728](https://github.com/netbox-community/netbox/issues/14728) - The plugins list view has been moved from the legacy admin UI to the main NetBox UI
* [#14729](https://github.com/netbox-community/netbox/issues/14729) - All background task views have been moved from the legacy admin UI to the main NetBox UI
* [#14736](https://github.com/netbox-community/netbox/issues/14736) - Introduce a user preference to enable HTMX-powered navigation
* [#14438](https://github.com/netbox-community/netbox/issues/14438) - Track individual custom scripts as database objects
* [#15131](https://github.com/netbox-community/netbox/issues/15131) - Automatically annotate related object counts on REST API querysets
* [#15237](https://github.com/netbox-community/netbox/issues/15237) - Ensure consistent filtering ability for all model fields by testing for missing/incorrect filters
* [#15238](https://github.com/netbox-community/netbox/issues/15238) - Include the `description` field in "brief" REST API serializations
* [#15278](https://github.com/netbox-community/netbox/issues/15278) - BaseModelSerializer now takes a `nested` keyword argument allowing it to represent a related object
* [#15383](https://github.com/netbox-community/netbox/issues/15383) - Standardize filtering logic for the parents of recursively-nested models (parent & ancestor filters)
* [#15413](https://github.com/netbox-community/netbox/issues/15413) - The global search engine now supports caching of non-field object attributes
* [#15490](https://github.com/netbox-community/netbox/issues/15490) - Custom validators can now reference related object attributes via dotted paths
* [#15547](https://github.com/netbox-community/netbox/issues/15547) - Add comments field to CustomField model
* [#15712](https://github.com/netbox-community/netbox/issues/15712) - Enable image attachments for virtual machines
* [#15735](https://github.com/netbox-community/netbox/issues/15735) - Display all dates & times in ISO 8601 format consistently
* [#15754](https://github.com/netbox-community/netbox/issues/15754) - Remove `is_staff` restriction on admin menu items
* [#15764](https://github.com/netbox-community/netbox/issues/15764) - Increase maximum value of Device `vc_position` field
* [#15915](https://github.com/netbox-community/netbox/issues/15915) - Provide a comprehensive system status view with export functionality

### Bug Fixes (from Beta2)

* [#15630](https://github.com/netbox-community/netbox/issues/15630) - Ensure consistent toggling between light & dark UI modes
* [#15802](https://github.com/netbox-community/netbox/issues/15802) - Improve hyperlink color contrast in dark mode
* [#15809](https://github.com/netbox-community/netbox/issues/15809) - Fix GraphQL union support for nullable fields
* [#15815](https://github.com/netbox-community/netbox/issues/15815) - Convert dashboard widgets referencing old user/group models
* [#15826](https://github.com/netbox-community/netbox/issues/15826) - Update `EXEMPT_EXCLUDE_MODELS` to reference new user & group models
* [#15831](https://github.com/netbox-community/netbox/issues/15831) - Fix LDAP group mirroring
* [#15838](https://github.com/netbox-community/netbox/issues/15838) - Fix AttributeError exception when rendering custom date fields
* [#15852](https://github.com/netbox-community/netbox/issues/15852) - Update total results count when filtering object lists
* [#15853](https://github.com/netbox-community/netbox/issues/15853) - Correct background color for cable trace SVG images in dark mode
* [#15855](https://github.com/netbox-community/netbox/issues/15855) - Fix AttributeError exception when creating an event rule tied to a custom script
* [#15944](https://github.com/netbox-community/netbox/issues/15944) - Fix styling of paginator when displayed above an object list

### Other Changes

* [#10587](https://github.com/netbox-community/netbox/issues/10587) - Enable pagination and filtering for custom script logs
* [#12325](https://github.com/netbox-community/netbox/issues/12325) - The Django admin UI is now disabled by default (set `DJANGO_ADMIN_ENABLED` to True to enable it)
* [#12510](https://github.com/netbox-community/netbox/issues/12510) - Dropped support for legacy reports
* [#12795](https://github.com/netbox-community/netbox/issues/12795) - NetBox now uses custom User and Group models rather than the stock models provided by Django
* [#13647](https://github.com/netbox-community/netbox/issues/13647) - Squash all database migrations prior to v3.7
* [#14092](https://github.com/netbox-community/netbox/issues/14092) - Remove backward compatibility for importing plugin resources from `extras.plugins` (now `netbox.plugins`)
* [#14638](https://github.com/netbox-community/netbox/issues/14638) - Drop support for Python 3.8 and 3.9
* [#14657](https://github.com/netbox-community/netbox/issues/14657) - Remove backward compatibility for old permissions mapping under `ActionsMixin`
* [#14658](https://github.com/netbox-community/netbox/issues/14658) - Remove backward compatibility for importing `process_webhook()` from `extras.webhooks_worker` (now `extras.webhooks.send_webhook()`)
* [#14740](https://github.com/netbox-community/netbox/issues/14740) - Remove the obsolete `BootstrapMixin` form mixin class
* [#15042](https://github.com/netbox-community/netbox/issues/15042) - The logic for registering models & model features now executes under the `ready()` method of individual app configs, rather than relying on the `class_prepared` signal
* [#15099](https://github.com/netbox-community/netbox/issues/15099) - Remove obsolete `device_role` and `device_role_id` filters for devices
* [#15100](https://github.com/netbox-community/netbox/issues/15100) - Remove obsolete `NullableCharField` class
* [#15154](https://github.com/netbox-community/netbox/issues/15154) - The installation documentation been extended to include instructions and an example configuration file for uWSGI as an alternative to gunicorn
* [#15193](https://github.com/netbox-community/netbox/issues/15193) - Switch to compiled distribution of the `psycopg` library
* [#15277](https://github.com/netbox-community/netbox/issues/15277) - Replace references to ContentType without ObjectType proxy model & standardize field names
* [#15292](https://github.com/netbox-community/netbox/issues/15292) - Remove obsolete `device_role` attribute from Device model (this field was renamed to `role` in v3.6)
* [#15357](https://github.com/netbox-community/netbox/issues/15357) - The `object_type` field on the CustomField model has been renamed to `related_object_type` to avoid confusion with its `object_types` field
* [#15401](https://github.com/netbox-community/netbox/issues/15401) - PostgreSQL indexes and sequence tables for the relocated L2VPN models (see [#14311](https://github.com/netbox-community/netbox/issues/14311)) have been renamed 
* [#15462](https://github.com/netbox-community/netbox/issues/15462) - Relocate resources from the `utilities.utils` module
* [#15464](https://github.com/netbox-community/netbox/issues/15464) - The many-to-many relationships for ObjectPermission are now defined on the custom User and Group models
* [#15736](https://github.com/netbox-community/netbox/issues/15736) - Remove obsolete `annotated_date` template filter & `annotated_now` template tag
* [#15738](https://github.com/netbox-community/netbox/issues/15738) - Remove obsolete configuration parameters for date & time formatting
* [#15752](https://github.com/netbox-community/netbox/issues/15752) - Remove the obsolete `ENABLE_LOCALIZATION` configuration parameter
* [#15942](https://github.com/netbox-community/netbox/issues/15942) - Refactor `settings_and_registry()` context processor

### REST API Changes

* The `/api/extras/content-types/` endpoint has moved to `/api/extras/object-types/`
* The `/api/extras/reports/` endpoint has been removed
* The `description` field is now included by default when using "brief mode" for all relevant models
* dcim.Device
    * The obsolete read-only attribute `device_role` has been removed (replaced by `role` in v3.6)
* dcim.Location
    * Added the optional `location` field
* dcim.VirtualChassis
    * Added `members` field to list the member devices
* extras.CustomField
    * `content_types` has been renamed to `object_types`
    * `object_type` has been renamed to `related_object_type`
    * The `content_types` filter is now `object_type`
    * The `content_type_id` filter is now `object_type_id`
* extras.CustomLink
    * `content_types` has been renamed to `object_types`
    * The `content_types` filter is now `object_type`
    * The `content_type_id` filter is now `object_type_id`
* extras.EventRule
    * `content_types` has been renamed to `object_types`
    * The `content_types` filter is now `object_type`
    * The `content_type_id` filter is now `object_type_id`
* extras.ExportTemplate
    * `content_types` has been renamed to `object_types`
    * The `content_types` filter is now `object_type`
    * The `content_type_id` filter is now `object_type_id`
* extras.ImageAttachment
    * `content_type` has been renamed to `object_type`
    * The `content_type` filter is now `object_type`
* extras.SavedFilter
    * `content_types` has been renamed to `object_types`
    * The `content_types` filter is now `object_type`
    * The `content_type_id` filter is now `object_type_id`
* tenancy.ContactAssignment
    * `content_type` has been renamed to `object_type`
    * The `content_type_id` filter is now `object_type_id` 
* users.Group
    * Added the `permissions` field
* users.User
    * Added the `permissions` field
=== END FILE ===

**Version 3.7**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.7/
=== BEGIN FILE ===
# NetBox v3.7

## v3.7.8 (2024-05-06)

### Enhancements

* Enable adding new cables directly from navigation menu

### Bug Fixes

* Account for virtual chassis membership when assigning related interfaces via bulk edit
* Fix pagination through search results within dropdown fields
* Fix SVG rendering of cable traces to circuit terminations
* Fix cable trace SVG generation for cables with multiple terminations at both ends
* Replace CSV export formatting for several many-to-many fields
* Fix secret toggle button for IKE policies

---

## v3.7.7 (2024-05-01)

### Enhancements

* Show usage counts for associated objects on config template list
* Add Date & DateTime variable types for custom scripts
* Cache the generated API schema definition for shorter loading times

### Bug Fixes

* Fix AttributeError exception when editing a cable with only one end terminated
* Fix row highlighting for device interface list display
* Fix "mark" button tooltip on button activation for device interface list display
* Fix SVG drawing error on multiple termination trace with multiple devices
* Fix random interface swap when performing cable trace with multiple termination
* Fix NoReverseMatch exception when viewing an event rule which references a deleted custom script
* Fix rounding error when reporting IP range utilization
* Ignore many-to-many mappings when checking dependencies of an object being deleted
* Avoid extraneous database queries when fetching assigned IP addresses via REST API
* Ensure deterministic ordering for scripts & reports
* Fix retention of default value when editing a custom JSON field
* Fix exception when enabling the tags column on the L2VPN terminations table

---

## v3.7.6 (2024-04-22)

### Enhancements

* Improve rendering of JSON data in configuration form
* Enable compatibility with non-Amazon S3 providers for remote data sources
* Add global search support for L2VPN identifiers
* Introduce new configuration parameters for enabling HTTP Strict Transport Security (HSTS)

### Bug Fixes

* Restore ability to modify assigned component template when adding/modifying an inventory item template
* Fix permission constraints for synchronization of remote data sources
* Correct OpenAPI schema definitions for read-only fields which may return null values
* Extend plugin removal instruction to include reindexing the global search cache
* Fix AttributeError exception when attempting to save an incomplete tunnel termination
* Fix permission required to display virtual disks tab on virtual machine UI view
* Allow filtering cables by decimal values using UI filter form
* Add missing ike_policy & ike_policy_id filters for IKE proposals
* Include id in list of supported fields for all bulk import forms
* Fix live preview support for EventRule comments

---

## v3.7.5 (2024-04-04)

### Enhancements

* Clarify interface designation when creating tunnel terminations
* Allow API tokens to be cloned

### Bug Fixes

* Avoid caching modified reports & scripts
* Raise a clean validation error when attempting to make duplicate FHRP group assignments
* Fix usage of selector widget for form fields referencing users/groups
* Correct permissions name to allow adding a module bay to a device via the UI
* Fix KeyError exception when modifying an IP address assigned to a virtual machine
* Restore help modal for button_class field on custom link bulk import form
* Fix exception when creating a device from a device type with one or more child inventory items
* Avoid caching values of null fields in search index
* Fix filtering of the providers list by assigned ASN

---

## v3.7.4 (2024-03-13)

### Enhancements

* Add additional FibreChannel SFP+ interface types
* Enable custom links for config contexts & templates
* Add tunnel termination buttons to VM interfaces table
* Linkify platform column in device & virtual machine tables

### Bug Fixes

* Fix range expansion for comma-separated numerical values
* Enable querying IP addresses for an FHRP group via GraphQL
* Fix validation check when bulk editing the mask length of IP addresses
* Permit user with sufficient permissions to assign an inventory item to a device type
* Restore missing display field on VirtualDisk serialization in REST API
* Correct representation of installed module when listing module bays using REST API brief mode
* Fix selection of 3DES encryption for IKE & IPSec proposals
* Add description field to YAML export for device & module types
* Correct label for recurring scheduled jobs
* Fix querying virtual machine contacts via GraphQL
* Fix assignment of front & rear images to device types via REST API

---

## v3.7.3 (2024-02-21)

### Enhancements

* Display a human-friendly name for the OpenID Connect remote auth backend
* Remove associate_by_email() from default social auth pipeline
* Add PostgreSQL index for object type & ID on CachedValue table to improve performance
* Add "last login" time to user display & REST API serializer

### Bug Fixes

* Limit platform options by manufacturer when editing a device or device type
* Resolving parent location should consider assigned site when bulk importing locations
* Ensure changes are logged on related objects when deleting an object referenced via a many-to-many relationship
* Clean up formatting of link peers in bulk CSV export of cable termination objects
* Preserve "empty" default values for JSON custom fields
* Update existing AutoSyncRecord when changing the data file of an auto-synced object
* Correct IP address count link in VM interfaces table
* Fix uncaught exception when attempting invalid device bay import
* Fix inclusion of config_template field on REST API serializer for virtual machines
* Fix "add export template" link under "export" button on object list views
* Ensure protection rules are evaluated prior to enqueueing events when deleting an object
* Fix designation of the active tab for assigned object when modifying an L2VPN termination
* Correct OpenAPI schema for rack elevation REST API endpoint
* Fix unhandled exception with invalid permission constraints
* group field should be optional when creating VPN tunnel via REST API
* Add missing group column to VPN tunnels table
* Fix FHRP group representation on assignments REST API endpoint using brief mode
* Warn that permission constraints are not supported for reports or scripts
* Correct REST API schema definition for front_image & rear_image on DeviceType
* Ensure error messages pertaining to related objects are displayed on the bulk import form
* Fix exception when viewing current config when no history is present

---

## v3.7.2 (2024-02-05)

### Enhancements

* Omit sensitive data source parameters from change log data
* Limit the number of assigned IP addresses displayed under interfaces list

### Bug Fixes

* Optimize calculation of available child prefixes & ranges when viewing a prefix
* Fix GraphQL support for interfaces connected to provider networks
* Correct the number of jobs listed for individual report & script modules
* Revert to the default layout when encountering a misconfigured dashboard
* Fix validation of choice values & labels when creating a custom field choice set via the REST API
* Avoid corrupting JSON data when changing the action type while editing an event rule
* Fix form validation error when attempting to terminate a tunnel to a virtual machine interface
* Fix NoReverseMatch exception when rendering a custom field which references a user
* IKE policy mode may be set only when IKEv1 is selected
* Automatically remove any associated bookmarks when deleting a user
* Include custom fields in REST API representation of data sources
* Fix missing "group" field to VPN tunnel creation form
* Fix exception when running report/script via command line due to missing username
* Include button to display available status choices when bulk importing virtual device contexts
* Fix "select all" button for device type components
* Ensure that application & removal of tags is always recorded in an object's change log
* Fix config context rendering for VMs assigned directly to a site (rather than via a cluster)
* Fix "create & add another" link for interface FHRP group assignment
* Pre-populate assigned tenant when allocating next available IP address under prefix view
* Automatically update all VMs when changing a cluster's assigned site
* The can_add() template filter should accept a model (not an instance)

---

## v3.7.1 (2024-01-17)

### Bug Fixes

* Use available_at_site filter when filtering VLANs under prefix form
* Fix tunnel creation when setting initial termination to a VM interface
* Relax one-to-one mapping of tunnel termination to IP address
* Fix typo in tunnel termination type choice name
* Remove errant translation wrapper from installed_device on DeviceBay
* Custom field API serializer should accept null values for all optional fields
* Hide available prefixes when searching within a parent prefix
* Add missing Diffie-Hellman group 15
* Ensure default contact assignment ordering is consistent
* Relax required fields for IKE & IPSec models on bulk import
* Ensure all matching event rules are processed in response to an event

---

## v3.7.0 (2023-12-29)

### Breaking Changes

* The following fields have been removed from the Webhook model: content_types, type_create, type_update, type_delete, type_job_start, type_job_end, enabled, and conditions. Webhooks are now tied to events via event rules. New event rules will be created for any existing webhooks automatically upon upgrade.
* The ui_visibility field on the custom field model has been replaced with two new fields: ui_visible and ui_editable. These new fields will have their values mapped from the original field automatically upon upgrade.
* The FeatureQuery class used internally for querying content types by model feature has been removed. It has been replaced by the new with_feature() manager method on NetBox's proxy model for ContentType.
* The internal ConfigRevision model has moved from extras to core. Configuration history will be retained throughout the upgrade process.
* The L2VPN and L2VPNTermination models have moved from the ipam app to the new vpn app. All object data will be retained, however please note that the relevant API endpoints have likewise moved to /api/vpn/.
* The CustomFieldsMixin, SavedFiltersMixin, and TagsMixin classes have moved from the extras.forms.mixins module to netbox.forms.mixins.
* The netbox.models.features.WebhooksMixin class has been renamed to EventRulesMixin.

### New Features

#### VPN Tunnels

Several new models have been introduced to enable VPN tunnel management. Users can now define tunnels with two or more terminations to represent peer-to-peer or hub-and-spoke topologies. Each termination is made to a virtual interface on a device or virtual machine. Additionally, users can define IKE and IPSec proposals and policies, which can be applied to tunnels to document encryption and authentication strategies.

#### Event Rules

This release introduces event rules, which can be used to send webhooks or execute custom scripts automatically in response to events that occur in NetBox. For example, it's now possible to run a custom script whenever a new site is created with a particular status or tag.

Event rules replace and extend functionality that was previously built into the webhook model. New event rules will be created for any existing webhooks automatically upon upgrade.

#### Virtual Machine Disks

A new VirtualDisk model has been introduced to enable tracking the assignment of discrete virtual disks to virtual machines. The size field has been retained on the VirtualMachine model, and will be populated automatically with the aggregate size of all assigned virtual disks. (Users who opt to eschew the new model may continue using the VirtualMachine size attribute independently as in previous releases.)

#### Object Protection Rules

A new PROTECTION_RULES configuration parameter has been introduced. Similar to how custom validation rules can be used to enforce certain values for object attributes, protection rules guard against the deletion of objects which do not meet specified criteria. This enables an administrator to prevent, for example, the deletion of a site which has a status of "active."

#### Improved Custom Field Visibility Controls

The ui_visible field on the custom field model has been superseded by two new fields, ui_visible and ui_editable, which control how and whether a custom field is displayed when view and editing an object, respectively. Separating these two functions into discrete fields allows more control over how each custom field is presented to users. The values of these fields will be appropriately set automatically during the upgrade process from the value of the original field.

#### Improved Global Search Results

Global search results now include additional context about each object, such as a description, status, and/or related objects. The set of attributes to be displayed is specific to each object type, and is defined by setting display_attrs under the object's SearchIndex class.

#### Table Column Registration for Plugins

Plugins can now register their own custom columns for inclusion on core NetBox tables. For example, a plugin can register a new column on SiteTable using the new register_table_column() utility function, and it will become available for users to select for display.

#### Data Backend Registration for Plugins

Plugins can now register their own data backends for use with synchronized data sources. This enables plugins to introduce new backends in addition to the git, S3, and local path backends provided natively.

### Enhancements

* Avoid orphaned interfaces by preventing the deletion of interfaces which have children assigned
* Add a color field for circuit types
* Allow device types to be excluded from consideration when calculating a rack's utilization
* Add an error field to the Job model to record any errors associated with its execution
* Introduce a mechanism for excluding models from general-purpose lists of object types
* Display any dependent objects to be deleted prior to deleting an object via the web UI
* Any models with a relationship to Tenant are now included automatically in the list of related objects under the tenant view
* Add a /render-config REST API endpoint for virtual machines
* Order objects of equivalent weight by value in global search results to improve readability
* Avoid recording empty changelog entries via the new CHANGELOG_SKIP_EMPTY_CHANGES config parameter
* Enable custom fields for contact assignments
* Increase maximum values for custom field minimum & maximum numeric validators
* Add a description field for webhooks
* Introduce job_start and job_end signals to allow automated plugin actions
* Add model-specific termination object filters for cables (e.g. interface_id and consoleport_id)
* Add PostgreSQL indexes for all GenericForeignKey fields
* Allow users to specify a preferred language for UI translations

### Translations

* Add Spanish translation
* Add French translation
* Add Portuguese translation
* Add Russian translation

### Bug Fixes

* Fix hyperlinks for global search result attributes
* Fix display of hidden custom fields in object edit forms
* Relax requirements for encryption/auth algorithms on IKE & IPSec proposals
* Fix changing action type of existing event rule

### Other Changes

* Optimize the format for declaring view actions under ActionsMixin (backward compatibility has been retained)
* Installation of the sentry-sdk Python library is now required only if Sentry reporting is enabled
* Move plugin resources from the extras app into netbox (backward compatibility has been retained)
* Replace FeatureQuery with new with_feature() method on proxy ContentType manager
* Move the L2VPN models from the ipam app to the new vpn app
* Move the ConfigRevision model from the extras app to core
* Form feature mixin classes have been moved from the extras app to netbox
* Move extras.webhooks_worker.process_webhook() to extras.webhooks.send_webhook() (backward compatibility has been retained)
* Remove change logging functionality from StagedChange
* Remove the obsolete clearcache management command
* Enforce uniqueness by default for non-VRF prefixes & IP addresses (ENFORCE_GLOBAL_UNIQUE now defaults to true)

### REST API Changes

* Introduced the following endpoints:
    * /api/extras/event-rules/
    * /api/virtualization/virtual-disks/
    * /api/vpn/ike-policies/
    * /api/vpn/ike-proposals/
    * /api/vpn/ipsec-policies/
    * /api/vpn/ipsec-profiles/
    * /api/vpn/ipsec-proposals/
    * /api/vpn/tunnels/
    * /api/vpn/tunnel-terminations/
* The following endpoints have been moved:
    * /api/ipam/l2vpns/ -> /api/vpn/l2vpns/
    * /api/ipam/l2vpn-terminations/ -> /api/vpn/l2vpn-terminations/
* circuits.CircuitType
    * Added the optional color choice field
* core.Job
    * Added the read-only error character field
* extras.Webhook
    * Removed the following fields (these have been moved to the new EventRule model):
        * content_types
        * type_create
        * type_update
        * type_delete
        * type_job_start
        * type_job_end
        * enabled
        * conditions
    * Add the optional description field
* dcim.DeviceType
    * Added the exclude_from_utilization boolean field
* extras.CustomField
    * Removed the ui_visibility field
    * Added the ui_visible and ui_editable choice fields
* tenancy.ContactAssignment
    * Added support for custom fields
* virtualization.VirtualDisk
    * Added the read-only virtual_disk_count integer field
* virtualization.VirtualMachine
    * Added the /render-config endpoint
=== END FILE ===

**Version 3.6**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.6/
=== BEGIN FILE ===
# NetBox v3.6

## v3.6.9 (2023-12-28)

### Enhancements

* All models can be filtered and searched by their description field (where applicable)

### Bug Fixes

* Fix validation error when attempting to move a primary IP address to a new parent object
* Permit setting device type U height to 0 during bulk edit
* Fix error when using the device search filter

---

## v3.6.8 (2023-12-27)

### Enhancements

* List parent prefixes under IP range view
* Print new NetBox version when running upgrade script
* Add the `available_at_site` filter for VLANs
* Match against description field when searching for devices

### Bug Fixes

* Correct display of error message when attempting invalid VLAN site & group assignment
* Fix custom validation for many-to-many fields
* Fix filtering custom multi-choice fields by null
* Correct calculation of absolute lengths for zero-length cables
* Update status of remote data source when syncing fails via `syncdatasource` management command
* Fix cloning of objects which have a multi-choice custom field
* Ensure reservations tab is always displayed under rack view
* Device/VM change record should accurately reflect when primary/OOB IP is deleted
* Fix association of job results when executing scripts via `runscript` management command
* Do not escape exclamation marks in custom link URLs
* Fix display of the tags column under VDC table
* Fix display of current configuration parameters in UI

---

## v3.6.7 (2023-12-15)

### Enhancements

* Designate fields to expand by default for object selector widget
* Add tags column to L2VPN terminations column
* Add `classes` parameter to `copy_content` template tag
* Change custom field choice delimiter from comma to colon

### Bug Fixes

* Fix bulk import support for custom field choices
* Ensure accuracy of parent object counters when deleting related objects
* Fix server error when authenticating via IP-restricted API tokens using IPv6
* Fix bulk operations for plugin models under admin UI
* Fix exception on non-JSON request to `/available-ips/` API endpoints
* Rack `starting_unit` cannot be zero
* Populate custom field default values for components when creating a device
* Fix exception when creating a power feed with rack and panel in different sites
* Fix the assignment of tags to L2VPN terminations
* Remove unneeded annotations from queries when using REST API brief mode
* Ensure user config is created automatically for all user accounts
* Fix filtering contact assignments by group
* Fix quick search under VLAN group VLANs list

---

## v3.6.6 (2023-11-29)

### Enhancements

* Show complete region hierarchy in UI for all relevant objects

### Bug Fixes

* Record a pre-change snapshot when bulk editing objects via CSV
* Raise a validation error when attempting to create a duplicate script or report
* Fix jobs list for reports with a custom name
* Fix CustomFieldChoiceSet search filter
* Enable export templates for contact assignments
* Webhook timestamps should be in proper ISO 8601 format
* Fix numeric ordering of service ports
* Correctly hash local user password when set via REST API
* Fix ordering ASN table by ASDOT column
* Fix running reports via REST API
* Fix custom validation support for remote data sources
* Fix bulk editing of interfaces assigned to VM with no cluster

---

## v3.6.5 (2023-11-09)

### Enhancements

* Add selector widget to platform field on device & virtual machine forms
* Introduce support for assigning IP addresses when bulk importing services
* Annotate units of measurement on power port table columns
* Add bulk import button to contact assignments list view
* Add inventory items column to interfaces table
* Add site column to power feeds table
* Add primary IPv4 and IPv6 filters for virtual machines and VDCs
* Add device & virtual machine fields to service filter form
* Strip trailing port number from value returned by `get_client_ip()`
* Add greater/less than mask length filters for IP addresses
* Add tab listing child items under inventory item view
* Add optional parent column to inventory items table
* Order available columns alphabetically in table configuration form
* Add contact group column on contact assignments table

### Bug Fixes

* Avoid exception when attempting to connect both ends of a cable to the same object
* Check that enough rear port positions have been selected to accommodate the number of front ports being created
* Permit user login when maintenance mode is enabled
* Ensure the active configuration is restored upon clearing cache
* Correct permissions evaluation for ASN range child ASNs view
* Disable ordering of jobs by assigned object

---

## v3.6.4 (2023-10-17)

### Enhancements

* Include circuit description in cable trace SVG image
* Introduce the `DATA_UPLOAD_MAX_MEMORY_SIZE` configuration parameter
* Display custom choice field labels rather than values in UI
* Add DNS name filter on IP addresses list
* Add a copy-to-clipboard button for API tokens
* Introduce a filter to find unterminated cables

### Bug Fixes

* Fix validation of bulk cable updates via bulk import form
* Ensure generic foreign key relationships are populated in REST API serializations of objects
* Employ PostgreSQL advisory locks to avoid duplicate MPTT tree IDs when bulk creating objects
* Fix resetting of checkbox fields triggered by HTMX form re-rendering
* Fix support for assigning a tenant when creating "next available" VLANs via the REST API
* Fix support for setting custom field values when creating "next available" IP addresses via the REST API
* Add CSV delimiter field to file upload tab under bulk object upload views
* Fix support for assigning an interface when creating "next available" IP addresses via the REST API
* Correct "add device" button link under platform view
* Correct serialization of several report attributes in the REST API
* Restore "last login" column on users table
* Fix device role filter choices under inventory items list filters
* Fix exception when bulk disconnecting interfaces connected to the same cable
* Fix exception when viewing a script that begins with the same name as another
* Optimize the automatic creation of available IP addresses for large prefixes
* Fix duplicated child object count decrements when removing objects in bulk

---

## v3.6.3 (2023-09-26)

### Enhancements

* Add toggle to hide disconnected interfaces under device view

### Bug Fixes

* Enable tracing cable paths across multiple cables in parallel
* Fix `IndexError` exception when manipulating terminations for existing cables via REST API
* Enable creating a config template which references a data file via the REST API
* Cleanly handle reports without any test methods defined
* Restore original text color for HTML code elements
* Fix assignment of VLAN group scope during bulk edit
* Fix `AttributeError` exception when attaching front/rear images to a device type
* Fix `KeyError` exception when deleting an object which references a configured choice value that has been removed
* Fix invalid response when searching for custom choice field values returns no matches
* Correct default background color for dashboard widget headers
* Fix rack filtering for empty location during device bulk import
* Allow designating an IP address as primary for device/VM while assigning it to an interface

---

## v3.6.2 (2023-09-20)

### Enhancements

* Add interface types for QSFP112 and OSFP-RHS
* Add support for other delimiting characters when using CSV import

### Bug Fixes

* Hide available IP/VLAN listing when sorting under a parent prefix or VLAN range
* Raise validation error on the presence of an unknown CSV header during bulk import
* Fix dashboard widget heading contrast under dark mode
* Render Markdown in custom field help text on object edit forms
* Tweak color of error text to improve legibility
* Correct display of power feed legs under device view
* Restore extra filters dropdown on device interfaces list
* Filter VLAN choices by selected site (if any) when creating a prefix
* Fix exception when viewing rendered config for VM without a role assigned
* Optimize counter field migrations for large databases
* Fix exception when sorting module bay list by installed module status
* Fix RecursionError exception when assigning config context to a device type
* Fix support for comments when creating a new service via web UI
* Fix tag exclusion support for contact assignments
* Preserve whitespace in values when performing bulk rename of objects via web UI
* Avoid TypeError exception when editing active configuration with statically defined `CUSTOM_VALIDATORS`
* Fix member count for newly created virtual chassis
* Restore missing tags field on L2VPN termination edit form

---

## v3.6.1 (2023-09-06)

### Enhancements

* Support setting token expiration time using the provisioning API endpoint
* Add bulk rename functionality to the global device component lists
* Add optional `staff_only` attribute to MenuItem

### Bug Fixes

* Ensure `family` attribute is always returned when creating aggregates and prefixes via REST API
* Fix exception when viewing IP address assigned to a virtual machine
* Always display "render config" tab for devices and virtual machines
* Show admin menu items only for staff users
* Fix exception when viewing current config and no revisions have been created
* Correct filtering of recent activity list under user view
* Remove stale references to obsolete NAPALM integration
* Fix display of active status under user view
* Avoid raising exception when checking if FHRP group IP address is primary
* Suppress warning about unreflected model changes when applying migrations
* Fix decoding of data file content
* Fix retrieving individual report via REST API
* Fix error message returned when validation of custom field default value fails
* Enable modifying the configuration when maintenance mode is enabled

---

## v3.6.0 (2023-08-30)

### Breaking Changes

* PostgreSQL 11 is no longer supported (dropped in Django 4.2). NetBox v3.6 requires PostgreSQL 12 or later.
* The `boto3` and `dulwich` packages are no longer installed automatically. If needed for S3/git remote data backend support, add them to `local_requirements.txt` to ensure their installation.
* The `device_role` field on the Device model has been renamed to `role`. The `device_role` field has been temporarily retained on the REST API serializer for devices for backward compatibility, but is read-only.
* The `choices` array field has been removed from the CustomField model. Any defined choices are automatically migrated to CustomFieldChoiceSets, accessible via the new `choice_set` field on the CustomField model.
* The `napalm_driver` and `napalm_args` fields (which were deprecated in v3.5) have been removed from the Platform model.
* The `device` and `device_id` filter for interfaces will no longer include interfaces from virtual chassis peers. Two new filters, `virtual_chassis_member` and `virtual_chassis_member_id`, have been introduced to match all interfaces belonging to the specified device's virtual chassis (if any).
* Reports and scripts are now returned within a `results` list when fetched via the REST API, consistent with other models.
* Superusers can no longer retrieve API token keys via the web UI if `ALLOW_TOKEN_RETRIEVAL` is disabled.

### New Features

#### Relocated Admin UI Views

Management views for Users, Groups, Object permissions, API tokens, and Configuration revisions have been relocated to the primary user interface.

#### Configurable Default Permissions

Administrators can configure default permissions for all users globally.

#### User Bookmarks

Users can bookmark their favorite objects in NetBox.

#### Custom Field Choice Sets

Selection and multi-select custom fields now employ discrete, reusable choice sets.

#### Pre-Defined Location Choices for Custom Fields

Users can employ pre-defined sets of choices when creating a custom field.

#### Restrict Tag Usage by Object Type

Tags may now be restricted to use with designated object types.

### Enhancements

* Cache the number of assigned components for devices and virtual machines
* Add a field for designating the out-of-band (OOB) IP address for devices
* Cache the number of member devices on each virtual chassis
* Add GPS coordinate fields to the device model
* Introduce `virtual_chassis_member` filter for interfaces
* Add a SQL index for IP address host values to optimize queries
* Prevent inadvertent overwriting of object attributes by competing users
* Introduce support for tags and custom fields on webhooks
* Permit racks to start numbering at values greater than one
* Add tenancy assignment for power feeds
* Add config template rendering for virtual machines
* Expose NetBox models within ConfigTemplate rendering context
* Add tag support for contact assignments
* Return reports & scripts within a `results` list when fetched via the REST API
* Add `rf_role` to InterfaceTemplate
* Cache the number of assigned component templates for device types

### Bug Fixes

* Prevent exception when rendering bookmarks widget for anonymous user
* Fix errant counter increments when editing device/VM components
* Optimize cached counter migrations to avoid excessive memory consumption

### Other Changes

* Work has begun on introducing translation and localization support in NetBox.
* Rename the `device_role` field on Device to `role` for consistency with VirtualMachine.
* Prevent the errant execution of dangerous instance methods in Django templates.
* Remove obsolete custom `ChoiceField` and `MultipleChoiceField` classes.
* All API endpoints for available objects now inherit from a common parent view.
* Upgrade Django to v4.2.
* Remove obsolete fields `napalm_driver` and `napalm_args` from Platform.
* User account-specific resources have been moved to a new `account` app for better organization.

### REST API Changes

* Introduced new endpoints for bookmarks and custom-field-choice-sets.
* Renamed `device_role` to `device` in dcim.Device and added new fields for GPS coordinates and out-of-band IP address assignment.
* Added read-only counter fields for assigned component templates in dcim.DeviceType.
* Removed deprecated fields from dcim.Platform.
* Added new fields and support for tags in various models.
=== END FILE ===

**Version 3.5**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.5/
=== BEGIN FILE ===
# NetBox v3.5

## v3.5.9 (2023-08-28)

### Enhancements

* Dynamically render location and device lists under site and location views
* Display assigned values count per object type under custom field view
* Enable filtering IP ranges by containing prefix
* Include request object in custom link renderer on tables
* Move child VLANs list to a separate tab under VLAN group view
* Pass additional HTTP headers through to custom script context
* Introduce `empty` lookup for numeric value filters

### Bug Fixes

* Fix localization support for device position field
* Git backend should send HTTP auth headers only if credentials have been defined
* Fix filtering of modified objects after bulk import/update
* Fix filtering of export templates by content type under web UI
* Fix form validation for bulk update of L2VPN terminations via bulk import form
* Fix utilization graph proportions when localization is enabled
* Avoid raising exception for invalid content type during global search
* Plugin utility functions should be importable from `extras.plugins`
* Ensure script log messages can be serialized as JSON data
* Config context tab under device/VM view should not require `extras.view_configcontext` permission
* Ensure `reindex` command clears all cached values when not in lazy mode
* Correct REST API representation of VDC status choice
* Fix selection widgets for related interfaces when bulk editing interfaces under device view

---

## v3.5.8 (2023-08-15)

### Enhancements

* Ship a validation schema for the device type library with each release
* Add support for specifying import/export route targets during VRF bulk import
* Automatically populate any VDC assignments from the parent when adding a child interface via the UI
* Add 400GE CFP2 interface type
* Add human-friendly speed column to interfaces table
* Add "assigned" filter for IP addresses
* List installed plugins on the server error report page
* Add 200 and 400 Gbps speeds to dropdown choices on interface form

### Bug Fixes

* Fix schema definition for available IP & VLAN REST API endpoints
* Raise validation error for invalid alphanumeric ranges when creating objects
* Avoid escaping semicolons when rendering custom links
* Automatically delete an AutoSyncRecord when its object is deleted
* Fix filtering of circuits under provider network view
* Fix job termination status for failed reports
* Fix support for "hide-if-unset" custom fields on bulk import forms
* Don't disable bulk edit/delete buttons after deselecting "select all" checkbox
* Disable table ordering for custom link columns

---

## v3.5.7 (2023-07-28)

### Enhancements

* Move non-rack devices list to a separate tab under the rack view
* Mask sensitive parameters when viewing a configured data source
* Add IEC 10609-1 and NBR 14136 power port & outlet types
* Implement a faster initial poll for report & script results
* Add 100GBASE-X-DSFP and 100GBASE-X-SFPDD interface types

### Bug Fixes

* Fix Markdown support for table cell alignment
* Fix missing script results when fetched via REST API
* Remove extraneous VLAN group field from bulk edit form for interfaces
* Permit unauthenticated access to content types REST API endpoint when `LOGIN_REQUIRED` is false
* Fix exception when importing device type missing rack unit height value

---

## v3.5.6 (2023-07-10)

### Bug Fixes

* Fix display of last result for scripts & reports with a custom name defined
* Hide scheduling fields for all scripts with scheduling disabled
* Fix exception when attempting to allocate next available IP address from prefix marked as utilized
* Catch ProgrammingError exception when starting NetBox without pre-populated content types

---

## v3.5.5 (2023-07-06)

### Enhancements

* Annotate VLAN group utilization
* Add "copy to clipboard" buttons in UI for IP addresses
* Add 100GE QSFP-DD interface type
* Include additional contact details on contact assignments table
* Associate contact assignments with their objects in the change log

### Bug Fixes

* Exclude stale content types when retrieving changelog records
* Fix REST API validation of null values for several interface attributes
* Fix exception when clicking "create and add another" to add a cable
* Populate prechange snapshot on parent object when assigning/removing primary IP address
* Avoid rendering partial HTMX responses when restoring browser tabs
* Improve handling of exceptions when loading reports
* Fix LDAP group permissions assignment for API clients
* Display consistent parent information for each termination under cable view
* Fix designation of primary IP addresses during interface assignment
* Fix OpenAPI schema for various choice fields
* Set correct return URL for object contacts tabs
* Avoid catching database exceptions when maintenance mode is disabled
* Correct URL for VirtualDeviceContext API serializer
* Fix URL parameters for object count dashboard widgets
* Avoid erroneously clearing many-to-many assignments during bulk edit
* Fix bulk import of tags for device & module types
* Correct ASN count under ASN ranges list
* Add `config_template` field to device API serializer
* Allow nullifying power port max & allocated draw values during bulk edit
* Fix ValueError exception when searching for virtual device context for non-numeric values

---

## v3.5.4 (2023-06-20)

### Enhancements

* Define colors for staged change action choices
* Include "add" button on all device & virtual machine component list views
* Add menu navigation button to add wireless links directly
* Add "add" buttons for reports & scripts to navigation menu

### Bug Fixes

* Update cable terminations when assigning a location to a new site
* Permit the assignment of non-site VLANs to prefixes assigned to a site
* Correct OpenAPI schema for connected device API endpoint
* Allow the assignment of all /31 IP addresses to interfaces
* Fix permissions evaluation when queuing a data sync job
* Fix encoding of whitespace in custom link URLs
* Correct rounding of rack power utilization values
* Fix pagination of objects for related IP addresses table
* Fix table configuration modal for the contact assignments list
* Permit mounting of devices in rack unit 100
* Clear stored ordering from user config when cleared by request

---

## v3.5.3 (2023-06-02)

### Enhancements

* Improve support for matching tags in conditional rules
* Add device type & role filters for device components
* Collapse context data by default when viewing a rendered device configuration
* Record client IP address when logging authentication failures
* Add an option to hide custom fields only if unset
* Apply filter parameters to links in object count dashboard widgets

### Bug Fixes

* Improve rack space validation when creating multiple devices via REST API
* Fix exception when applying "empty" filter lookup with invalid value
* Prevent reassignment of an IP address designated as primary for its parent object
* Redirect user to originating view after editing/deleting an image attachment
* Restore hover preview for embedded image attachment tables
* Fix sizing of rear port selection widget on front port template creation form
* Use contact assignments table to display the contacts assigned to an object
* Fix extraneous contacts listed in object contact assignments view
* Object counts dashboard widget should support URL-compatible query filters
* Fix GraphiQL UI by reverting graphene-django to earlier version
* Escape display text in API-backed selection widgets
* Correct arithmetic for converting inches to meters

---

## v3.5.2 (2023-05-22)

### Enhancements

* Introduce `REMOTE_AUTH_AUTO_CREATE_GROUPS` config parameter to enable the automatic creation of new groups when remote authentication is in use
* Disallow the assignment of network/broadcast IP addresses to interfaces
* Increase the maximum values for allocated and maximum power draws
* Intercept and cleanly report errors upon attempted database writes when maintenance mode is enabled
* Move contacts panels to separate tabs under object views
* Enable setting device type & module type weight via bulk import
* Add an outline to the reservation markers on rack elevations
* Show custom field description as an icon tooltip under object views
* Add columns for parent device bay and position to devices list
* Move related IP addresses table to a separate tab
* Show height and total weight under device view
* Add 100GE CXP interface type
* Introduce the ability to automatically retry failed background jobs
* Hide map button if `MAPS_URL` is empty
* Optimize REST API performance when retrieving interfaces with L2VPN assignments
* Allow customization or disabling of the maintenance mode banner
* Add LX.5 port types
* Add 400GE CDFP and CFP8 interface types
* Add 200GE QSFP-DD interface type

### Bug Fixes

* Enable specifying termination object by virtual chassis master when importing cables
* Enable assigning VLANs without a site to interfaces during bulk edit
* Custom field names should not permit double underscores
* Fix rear port selection widget under front port creation form
* Disable ordering of synchronized object tables by the "synced" attribute
* Enable selecting config context as object type in object counts dashboard widget
* Fix bulk tenant assignment via cluster import form

---

## v3.5.1 (2023-05-05)

### Enhancements

* Support Markdown rendering for custom field descriptions
* Include systemd service & timer configurations for housekeeping tasks
* Match on power panel name when searching for power feeds
* Add filter to select individual racks under rack elevations view
* Add a module status column to module bay tables
* Enable configuration of custom database backend via `ENGINE` parameter
* Include device description within rack elevation tooltip
* Introduce a list view for image attachments, orderable by date and other attributes
* Enable bulk import of journal entries
* Enable the assignment of wireless LANs to interfaces under bulk edit

### Bug Fixes

* Simplify IP address interface and NAT IP assignment form fields to avoid confusion
* Prefix within a VRF should list global prefixes as parents only if they are containers
* Fix whitespace for paragraph elements in Markdown-rendered table columns
* Fix `RelatedObjectDoesNotExist` exception under certain conditions
* Allow selecting object change as model under object list widget configuration
* Add a three-second timeout for RSS reader widget
* Fix "create & add another" action for objects with custom fields
* Provider account should not be a required field in REST API serializer
* Validate default values for object and multi-object custom fields
* Support the creation of front ports without a pre-populated device ID
* Fix filtering for VLAN groups displayed under site view
* Fix base path for OpenAPI schema
* Fix `FileNotFoundError` exception when a managed script file is missing from disk
* Device/VM interface MAC addresses can be nullified via REST API
* Fix `ImportError` exception when running RQ worker
* Correct the application of URL query parameters for object list dashboard widgets
* Remove extraneous "add" button from contact assignments list
* Fix the association of completed jobs with reports & scripts in the REST API
* Apply credentials for git data source only when connecting via HTTP/S
* Fix `TypeError` exception when running the `runscript` management command
* Fix git remote data syncing when with HTTP proxies defined
* Remove obsolete account field from provider UI view

---

## v3.5.0 (2023-04-27)

### Breaking Changes

* The `account` field has been removed from the provider model.
* A minimum length of 50 characters is now enforced for the `SECRET_KEY` configuration parameter.
* The JobResult model has been moved from the `extras` app to `core` and renamed to Job.
* The `obj_type` field on the Job model has been renamed to `object_type`.
* The `JOBRESULT_RETENTION` configuration parameter has been renamed to `JOB_RETENTION`.
* The `obj` context variable is no longer passed when rendering custom links.
* The REST API schema is now generated using the OpenAPI 3.0 spec.
* The URLs for the REST API schema documentation have changed.

### New Features

#### Customizable Dashboard

The static home view has been replaced with a fully customizable dashboard.

#### Remote Data Sources

NetBox now has the ability to synchronize arbitrary data from external sources.

#### Configuration Template Rendering

This release introduces the ability to render device configurations from Jinja2 templates.

#### NAPALM Integration Plugin

The NAPALM integration feature has been moved to a dedicated plugin.

#### ASN Ranges

A new ASN range model has been introduced.

#### Provider Accounts

A new model has been introduced to represent individual accounts within a common circuit provider.

#### Job-Triggered Webhooks

Two new webhook trigger events have been introduced: `job_start` and `job_end`.

### Enhancements

* Enable marking IP ranges as fully utilized
* Employ HTMX to dynamically render tables listing related objects
* Support bridge relationships among device type interfaces
* Support replicating custom field values when cloning an object
* Enable syncing config context data from remote sources
* Enable setting a default platform for device types
* Introduce advanced object selector for UI forms
* Redirect to filtered objects list after bulk import
* Require unique tenant names & slugs per group
* Add date & time custom field type
* Enable change logging for cable terminations
* Introduce the `X-Request-ID` HTTP header for change logging
* Introduce the `scheduling_enabled` settings for reports & scripts
* Optimized GraphQL API request handling
* Add an `enabled` field for device type interfaces
* Enable filtering objects by create/update request IDs
* Standardize the inclusion of related objects across the entire UI
* Add a list view for contact assignments
* Add HTMX support to ObjectEditView
* Enable syncing export template content from remote sources
* Enable loading import data from remote sources
* Create database indexes for all generic foreign keys
* Add navigation menu buttons to create device & VM components
* Enable generic foreign key relationships from jobs to NetBox objects
* Provide more relevant API endpoint descriptions in schema
* Enforce a minimum length for `SECRET_KEY` configuration parameter

### Bug Fixes (From Beta2)

* Fix OpenAPI schema warnings relating to enum collisions
* Fix exception when setting IP address role to null via REST API
* Fix OpenAPI schema warnings relating to nested serializers
* Fix schema warnings related to IPAddressField
* Include `servers` definition in OpenAPI spec
* Fix object list widget support for filtering by multiple values

### Other Changes

* Upgrade REST API schema to OpenAPI 3.0
* Remove unused `extra_tabs` block from `object.html` generic template
* Remove unused `NetBoxModelCSVForm` class
* Consolidated several middleware classes
* Refactor API viewset classes and introduce NetBoxReadOnlyModelViewSet
* Remove obsolete `SmallTextarea` form widget
* `ChangeLoggedModel` now inherits `WebhooksMixin`
* Retire the `StaticSelect` and `StaticSelectMultiple` form widgets
* Remove the unused `CSVDataField` and `CSVFileField` classes
* Move & rename `extras.JobResult` to `core.Job`

### REST API Changes

* All API responses now include a `X-Request-ID` HTTP header.
* Introduced new endpoints.
* Removed existing endpoints.
* Various model updates and enhancements.
=== END FILE ===

**Version 3.4**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.4/
=== BEGIN FILE ===
# NetBox v3.4

## v3.4.10 (2023-04-27)

### Bug Fixes

* Fix custom object field assignments made via REST API for cables
* Fix ordering of search results when sorting by object name
* Fix escaping of certain characters in URL when rendering custom links

---

## v3.4.9 (2023-04-26)

### Enhancements

* Show peer racks as a dropdown list under rack view
* Introduce `CSRF_COOKIE_SECURE`, `SECURE_SSL_REDIRECT`, and `SESSION_COOKIE_SECURE` configuration parameters
* Hide PSK strings under wireless LAN & link views
* Sanitize rendered custom links to mitigate malicious links
* Enable setting user name & email values via remote authenticate headers
* Enable anonymized reporting of census data

### Bug Fixes

* Fix ordering of global search results by object type
* Fix import of inventory items for devices with duplicated names
* Improve error message for API token IP prefix validation failures
* Restore the ability to move inventory items among devices
* Fix pre-population of list values when creating a saved filter
* Fix "mark connected" form field for bulk editing front & rear ports

---

## v3.4.8 (2023-04-12)

### Enhancements

* Enable general purpose image attachments for device types
* Allow custom object fields to reference a user or group
* Remove unit from commit rate column header in circuits table
* Disallow changing custom field type after creation
* Display a warning banner when `DEBUG` is enabled
* Enable filtering of VM Interfaces by assigned VLAN
* Specify UTF-8 encoding for default export template MIME type
* Introduce the `grant_token` permission for controlling the creation of API tokens on behalf of other users

### Bug Fixes

* Validate generic foreign key relations assigned via REST API requests
* Prevent existing components & component templates from being reassigned to different devices/device types via the REST API
* Raise validation error if generic foreign key assignment does not specify both object type and ID
* Fix cleanup of object data when deleting a custom field
* Fix KeyError exception when attempting to add module bays in bulk
* Display relevant UI tab upon bulk import validation failure
* Fix the automatic assignment of racks to devices via the REST API
* Fix exception when attempting to create a saved filter for applied filters
* Fix bulk editing of many-to-many relationships
* Hide clone button for objects with no clonable attributes
* Fix instantiation of nested inventory item templates when creating a device
* Fix filtered bulk deletion for various models
* Fix form layout for plugin textarea fields
* Fix tenant assignment on bulk import of L2VPNs

---

## v3.4.7 (2023-03-28)

### Enhancements

* Automatically set the scheduled time when executing reports/scripts at a recurring interval
* Add fieldset support for custom script forms
* Use SSID for representing wireless links, if set
* Support designating multiple backends via `REMOTE_AUTH_BACKEND` config parameter
* Improve error reporting for duplicate CSV column headings
* Enable VDC assignment during bulk import/edit of interfaces

### Bug Fixes

* Include parameters when exporting saved filters
* Fix cloning of saved filters
* Remove erroneous 802.3az PoE type
* Correct URL for tags in route targets list
* Enable cloning of export templates
* Restore missing description field on virtual chassis form
* Correct display of zero values for virtual chassis member priority
* Enable cloning of tags
* Enable cloning of config contexts

---

## v3.4.6 (2023-03-13)

### Enhancements

* Enable searching for devices/VMs by primary IP address
* Add ability to toggle visibility of virtual interfaces under device view
* Enable live preview of Markdown content
* Restore default page size when navigating between views
* Add `connected_endpoints` field to GraphQL API for cabled objects
* Include IP version in GraphQL API representations of aggregates, prefixes, and IP addresses
* Add Cisco StackWise 1T interface type
* Add IEEE 802.3az PoE type for interfaces
* Strip whitespace from CSV headers prior to validation

### Bug Fixes

* Avoid raising exception when filtering IPs by an invalid address
* Apply custom field defaults to IP address created during FHRP group creation
* Fix filtering changelog & journal entries by multiple content type IDs
* Support non-URL-safe characters in plugin menu titles
* When importing devices, restrict rack by location only if the location field is specified
* Fix filtering of cable terminations by object type
* Fix loading of CSV files containing a byte order mark
* Fix escaping of return URL values for action buttons in tables
* Correct loading of plugin resources with custom paths

---

## v3.4.5 (2023-02-21)

### Enhancements

* Add `start_address` and `end_address` filters for IP ranges
* Introduce `FILE_UPLOAD_MAX_MEMORY_SIZE` configuration parameter
* Match on containing prefixes and aggregates when querying for IP addresses using global search
* Upgrade script will automatically rebuild missing search cache

### Bug Fixes

* Fix false custom validation errors during component creation
* Ensure scripts and reports within submodules are automatically reloaded
* Enable evaluating null values in custom validation rules
* GraphQL requests specifying an invalid filter should return an empty queryset
* Ensure form validation errors are displayed when adding virtual chassis members
* Fix partial matching of start/end addresses for IP range search
* Fix CSV header attribute detection when auto-detecting import format
* Fix CSV import for multiple-object custom fields
* Circuit terminations should link to their associated circuits (rather than site or provider network)
* Skip checking for old search cache records when creating a new object
* List only applicable object types in form widget when filtering custom fields

---

## v3.4.4 (2023-02-02)

### Enhancements

* Permit selection custom fields to have only one choice
* Introduce AbortScript exception to elegantly abort scripts
* Add module types count to manufacturers list
* Add IP address filters for services
* Add buttons to easily switch between rack list and elevations views

### Bug Fixes

* Avoid catching ImportErrors when loading plugin resources
* Remove "set null" option from non-writable custom fields during bulk edit
* Show edit/delete buttons in user tokens table
* Permit import of devices using uploaded file
* Avoid inadvertent interpretation of search query as regular expression under global search
* Correct ordering of virtual chassis interfaces with duplicate names
* Fix exception when attempting to schedule reports/scripts
* Correct available filter choices for interface PoE type
* Pre-populate assigned VRF when following "first available IP" link from prefix view
* Display error message when attempting to create device component with duplicate name

---

## v3.4.3 (2023-01-20)

### Enhancements

* Introduce `CA_CERT_PATH` parameter to define SSL CA path for Redis servers
* Add a cable edit button for connected components in component lists
* Add L2VPN filters for VLANs and interfaces
* Add primary IPv4/v6 address filters for devices
* Add 800GE interface types
* List both devices & VMs under device role view
* Enable export templates for journal entries
* Introduce additional 100M Ethernet interface types

### Bug Fixes

* Fix AssertionError exception when removing some terminations from an existing cable
* Fix ValueError exception when attempting to bulk import cables attached to occupied terminations
* Avoid flagging cable termination changes erroneously
* Fix TypeError exception when bulk editing custom date fields
* Correct current time display on script & report forms
* Avoid LookupError exception when running scripts with commit disabled
* Fix exception when scheduling a job in the past
* Avoid AttributeError exception when deleting a cabled circuit termination
* Avoid AttributeError exception when generating API schema for views with custom schema
* Fix deletion of scheduled job using non-default queues
* Adding/removing a device from a device bay should record a pre-change snapshot on the device bay
* Correct count on interfaces tab when viewing a VC master device
* Apply configured formatting to custom date fields
* Add missing `description` fields to several REST API serializers
* Enforce `run_script` permission when executing scripts via REST API

---

## v3.4.2 (2023-01-03)

### Enhancements

* Enable specifying assigned component during bulk import of inventory items
* Match device name when using modules quick search
* Add VM resource totals to cluster view
* Enable selecting assigned component when editing inventory item in UI
* `reindex` management command should accept app label without model name
* Add controls for saved filters to rack elevations list
* Fix database migration when plugin with search indexer is enabled
* Add support for Redis username configuration

### Bug Fixes

* Fix errant newlines when exporting interfaces with multiple IP addresses assigned
* Correct reporting of scheduled job duration
* Enable partial & regular expression matching for non-string types in global search
* Correct cable trace URL under "connection" tab for device components
* Fix form validation for bulk import of modules

---

## v3.4.1 (2022-12-16)

### Enhancements

* Enable ordering of nested group models by name
* Introduce the `DEFAULT_LANGUAGE` configuration parameter

### Bug Fixes

* Fix cloning of fields containing special characters
* Pressing enter in quick search box should not trigger bulk operations
* Correct visualization of cable path which splits across multiple circuit terminations
* Fix TemplateSyntaxError when viewing custom script results
* Fix localization of dates & numbers
* Correct cloning behavior for recursively-nested models
* Avoid clearing assigned groups if `REMOTE_AUTH_DEFAULT_GROUPS` is invalid

---

## v3.4.0 (2022-12-14)

### Breaking Changes

* Device and virtual machine names are no longer case-sensitive.
* The `asn`, `noc_contact`, `admin_contact`, and `portal_url` fields have been removed from the provider model.
* The `content_type` fields on the CustomLink and ExportTemplate models have been renamed to `content_types`.
* Within the Python API, the `cf` property on an object with custom fields now returns deserialized values.
* The `NetBoxModelCSVForm` class has been renamed to `NetBoxModelImportForm`.

### New Features

#### New Global Search

NetBox's global search functionality has been completely overhauled and replaced by a new cache-based lookup.

#### Virtual Device Contexts

A new model representing virtual device contexts (VDCs) has been added.

#### Saved Filters

Object lists can be filtered by various fields and characteristics, and applied filters can now be saved for reuse.

#### JSON/YAML Bulk Imports

NetBox's bulk import feature has been extended to accept data formatted in JSON or YAML.

#### Update Existing Objects via Bulk Import

NetBox's CSV-based bulk import functionality has been extended to support modifying existing objects.

#### Scheduled Reports & Scripts

Reports and custom scripts can now be scheduled for execution at a desired future time.

#### API for Staged Changes

This release introduces a new programmatic API that enables plugins and custom scripts to prepare changes in NetBox without committing them.

### Enhancements

* Enable specifying terminations when bulk importing circuits
* Enable the inclusion of custom field values in global search
* Enable the assignment of tags during CSV import
* Enable GraphQL filtering of related objects
* Enable associating a custom link with multiple object types
* Enable journaling for all organizational models
* Introduce the `ALLOW_TOKEN_RETRIEVAL` config parameter
* Device and virtual machine names are no longer case-sensitive
* Add `link_peers` field to GraphQL types for cabled objects
* Add `weight` field to racks, device types, and module types
* Add `assigned_object` field to GraphQL type for IP addresses and L2VPN terminations
* Add `mounting_depth` field to rack model
* Add optional `name` field for FHRP groups
* Add decimal custom field type
* Add `status` field for modules
* Standardize the use of `description` and `comments` fields on all primary models
* Include a `display` field in all GraphQL object types
* Add GraphQL relationships for additional generic foreign key fields
* Add `max_weight` field to track maximum load capacity for racks
* Omit app label from content type in table columns
* Add `status` field to WirelessLAN
* Enable associating an export template with multiple object types
* Enable recurring execution of scheduled reports & scripts
* Introduce `QUEUE_MAPPINGS` configuration parameter

### Bug Fixes (from v3.4-beta1)

* Fix AttributeError exception when viewing a device with a primary IP and no platform assigned
* Linkify primary IPs for VDCs
* Fix validation of VDC primary IPs
* Add missing VDCs column to interface tables
* Fix device links in VDC table
* Fix view tabs for plugin objects
* Catch `NoReverseMatch` exception when rendering tabs with no registered URL
* Improve validation of YAML-formatted import data
* Fix exception when caching very large field values for search
* Fix querying of related objects under GraphQL API

### Plugins API

* Enable embedding custom content on core list views via `list_buttons()` method
* Enable inclusion of plugin models in global search via `SearchIndex`
* Enable plugins to register top-level navigation menus using PluginMenu
* Enable registration of tabbed plugin views for core NetBox models
* Enable plugins to install and register other Django apps via `django_apps` attribute
* Inspect `docs_url` property to determine link to model documentation
* Move `clone()` method from NetBoxModel to CloningMixin
* Introduce `get_plugin_config()` utility function
* Introduce `get_queryset()` method on generic views

### Other Changes

* Remove legacy ASN field from provider model
* Remove legacy contact fields from provider model
* The `cf` attribute on objects now returns deserialized custom field data
* Raise minimum required PostgreSQL version from 10 to 11
* Emit the `post_save` signal when creating device components in bulk
* Move application registry into core app
* Remove unused custom `import_object()` function
* Add support for Python v3.11
* Pass the current request as context when instantiating a FilterSet within UI views
* Switch timezone library from pytz to zoneinfo
* Enable data localization

### REST API Changes

* Added the `/api/dcim/virtual-device-contexts/` endpoint
* circuits.provider
    * Removed the `asn`, `noc_contact`, `admin_contact`, and `portal_url` fields
    * Added a `description` field
* dcim.Cable
    * Added `description` and `comments` fields
* dcim.Device
    * Added a `description` field
* dcim.DeviceType
    * Added `description`, `weight`, and `weight_unit` fields
* dcim.Module
    * Added a `description` field
* dcim.Interface
    * Added the `vdcs` field
* dcim.Module
    * Added a required `status` field
* dcim.ModuleType
    * Added `description`, `weight`, and `weight_unit` fields
* dcim.PowerFeed
    * Added a `description` field
* dcim.PowerPanel
    * Added `description` and `comments` fields
* dcim.Rack
    * Added `description`, `mounting_depth`, `weight`, `max_weight`, and `weight_unit` fields
* dcim.RackReservation
    * Added a `comments` field
* dcim.VirtualChassis
    * Added `description` and `comments` fields
* extras.CustomField
    * Added a `search_weight` field
* extras.CustomLink
    * Renamed `content_type` field to `content_types`
* extras.ExportTemplate
    * Renamed `content_type` field to `content_types`
* extras.JobResult
    * Added `interval`, `scheduled`, and `started` fields
* ipam.Aggregate
    * Added a `comments` field
* ipam.ASN
    * Added a `comments` field
* ipam.FHRPGroup
    * Added `name` and `comments` fields
* ipam.IPAddress
    * Added a `comments` field
* ipam.IPRange
    * Added a `comments` field
* ipam.L2VPN
    * Added a `comments` field
* ipam.Prefix
    * Added a `comments` field
* ipam.RouteTarget
    * Added a `comments` field
* ipam.Service
    * Added a `comments` field
* ipam.ServiceTemplate
    * Added a `comments` field
* ipam.VLAN
    * Added a `comments` field
* ipam.VRF
    * Added a `comments` field
* tenancy.Contact
    * Added a `description` field
* virtualization.Cluster
    * Added a `description` field
* virtualization.VirtualMachine
    * Added a `description` field
* wireless.WirelessLAN
    * Added a required `status` choice field
    * Added a `comments` field
* wireless.WirelessLink
    * Added a `comments` field
=== END FILE ===

**Version 3.3**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.3/
=== BEGIN FILE ===
# NetBox v3.3

## v3.3.10 (2022-12-13)

### Enhancements

* Add replication controls for module bulk import
* Introduce `LOGOUT_REDIRECT_URL` config parameter to control redirection of user after logout
* Enable reassigning an inventory item from one device to another
* Add vertical frame & cabinet rack types
* Add provider selection field for provider networks to circuit termination edit view
* Permit whitespace in MAC addresses
* Enable filtering L2VPNs by slug

### Bug Fixes

* Correct power utilization percentage precision
* Honor configured date format when displaying date custom field values in tables
* Fix background color of bottom banner content
* Correct circuits count under site view
* Fix nullification of custom object & multi-object fields via REST API
* Disable ordering changelog table by object to avoid exception
* Correct available choices for status under IP range filter form
* Honor `RQ_DEFAULT_TIMEOUT` config parameter when using Redis Sentinel
* Enable missing tags columns for contact, L2VPN lists

---

## v3.3.9 (2022-11-30)

### Enhancements

* Ensure logging of failed login attempts

### Bug Fixes

* Call `snapshot()` on object when processing deletions
* Fix serialization of array field values in change log
* Fix spurious error message when rendering REST API docs
* Fix TypeError exception when viewing PDU configured for three-phase power
* Support referencing custom field related objects by attribute in addition to PK
* Mark cable traces terminating to a provider network as complete
* Disable ordering by custom object field columns
* Raise validation error when attempting to create a duplicate cable termination
* Permit demotion of device/VM primary IP via IP address edit form
* `render_field` template tag should respect `label` kwarg
* Update cable paths ending at associated rear port when creating new front ports
* Hide checkboxes on child object lists when no bulk operations are available
* Fix exception when editing NAT IP for VM with no cluster
* Use natural ordering when sorting rack elevations by name
* Enable bulk clearing of color attribute of pass-through ports
* Cloning a rack reservation should replicate rack & user

---

## v3.3.8 (2022-11-16)

### Enhancements

* Add backplane Ethernet interface types
* Add location selector to power feed form
* Use front/rear port colors in cable trace SVG
* Include "add module type" button on manufacturer view
* Add count of L2VPNs to tenant view
* Include device location under cable view
* Include request cookies when queuing a custom script

### Bug Fixes

* Ensure thread safety of change logging functions
* Correct UI display for `azuread-v2-tenant-oauth2` SSO backend
* Fix bulk edit/delete buttons at top of object lists
* Correct cookie paths when `BASE_PATH` is set
* Remove erroneous link for contact assignment count
* Fix dark mode coloring for data on device status page
* Populate tag selection list for service filter form
* Fix form widget styling on FHRP group form
* Fix cable creation links on power port view

---

## v3.3.7 (2022-11-01)

### Bug Fixes

* Enforce advisory locks when allocating available IP addresses to prevent race conditions
* Fix social authentication for new users
* Permit nullifying VLAN group `scope_type` via REST API
* Fix exception when ordering contacts by number of assignments
* Permit nullifying site `time_zone` via REST API

---

## v3.3.6 (2022-10-26)

### Enhancements

* Enable filtering devices by device type slug
* Add LDAP configuration parameters to specify certificates
* Link "assigned" checkbox in IP address table to assigned interface
* Set cookie paths according to configured `BASE_PATH`
* Position A/Z termination cards above the fold under circuit view

### Bug Fixes

* Strip colons from usernames when using remote authentication
* Include OIDC dependencies for python-social-auth
* Fix service clone link
* Allow assignment of VC member to LAG on non-master peer
* Ensure consistent display of custom fields for all model forms
* Fix filtering of power feed by power panel when connecting a cable
* Correct display of assigned contacts in object tables
* Re-evaluate disabled LDAP user when processing API requests
* Correct home view links to connection lists
* Fix ModuleNotFoundError exception when generating API schema under Python 3.9+
* Add left/right page plugin content embeds for tag view
* Prevent user without sufficient permission from creating an IP address via FHRP group creation
* Distinguish between inside/outside NAT assignments for device/VM primary IPs
* Correct display of status field in clusters list
* Add missing status attribute to cluster view

---

## v3.3.5 (2022-10-05)

### Enhancements

* Include rack elevation under device view
* Omit extraneous URL query attributes during search
* Improve formatting of device heights and rack positions

### Bug Fixes

* Adjust non-racked device filter on site and location detailed view
* Fix validation when attempting to add redundant contact assignments
* Enforce object type validation when creating journal entries
* Fix exception when filtering VLANs by virtual machine with no cluster assigned
* Fix form widget styling for DeviceType airflow field
* Avoid rounding virtual machine memory values
* Restore missing connection details for device components
* Enable filtering by read-only custom fields in the UI
* Omit read-only custom fields from CSV import forms
* Cable trace SVG links should not force a new window
* Clarify representation of blocking contact assignments during contact deletion
* Disable the reassignment of a module to a new device
* Automatically inherit site assignment from cluster when creating a virtual machine
* Permit the pinning of a VM to a particular device within a cluster which has no site assignment
* Correct URL for contacts table tags column

---

## v3.3.4 (2022-09-16)

### Bug Fixes

* Fix assignment of component templates to module types via web UI
* Fix `MultiValueDictKeyError` exception when editing a device interface

---

## v3.3.3 (2022-09-15)

### Enhancements

* Add `occupied` filter for cabled objects to filter by cable or `mark_connected`
* Add `has_front_image` and `has_rear_image` filters for device types
* Omit trailing ".0" in device positions within UI
* Add region and site group columns to the devices table

### Bug Fixes

* Fix `empty` lookup expression for string filters
* Allow changing the pre-populated device/VM when creating new components
* Fix exception when CableTermination validation fails during bulk import of cables
* Enable the use of reports & scripts packaged in submodules
* Fix `NoReverseMatch` exception when listing available prefixes with "flat" column displayed
* Fix custom field validation when creating new services
* Fix "create & add another" for image attachments
* Fix spurious changelog diff for interface WWN field
* Enable cloning for custom fields & custom links
* Fix Virtual Chassis master field cannot be null according to the API
* Correct value for "Passive 48V (4-pair)" PoE type selection
* Show available values for `ui_visibility` field of CustomField for CSV import
* Display SSO links when local authentication fails
* Table action buttons should reserve return URL parameters
* Correct display of custom fields when editing an L2VPN termination

---

## v3.3.2 (2022-09-02)

### Enhancements

* Enable clearing applied table column ordering
* Add L2VPN column to interface and VLAN tables
* Add support for `limit` query parameter to available VLANs API endpoint
* Add journal entries to global search
* Enable filtering of device components by rack
* Enable sorting rack elevations by facility ID

### Bug Fixes

* Hide available IPs when non-default ordering is applied
* Update child device location when parent location changes
* Improve error message when validating rack reservation units
* Various corrections to OpenAPI spec
* SSO login should respect `next` URL query parameter
* Fix support for custom `CSRF_COOKIE_NAME` value
* Fix rear port display when editing front port template for module type 
* Avoid forcing SVG image links to open in a new window
* Restore "set null" option for custom fields during bulk edit
* Correct utilization display for empty racks
* Correct display of custom fields when editing VM interfaces
* Display manufacturer name alongside device type under device view
* Restore MultiPartParser (regression from #10031)
* Fix vertical alignment when displaying object attributes with buttons
* Fix permissions evaluation for interface actions dropdown menu
* Handle exception when trace splits to multiple rear ports
* Validate IP version when assigning primary IPs to a virtual machine
* Correct API schema definition for several serializer fields

---

## v3.3.1 (2022-08-25)

### Enhancements

* Include contextual help when creating first objects in UI
* Add 802.11ay and "other" wireless interface types
* Enforce `application/json` content type for REST API requests
* Disable "add termination" button for point-to-point L2VPNs with two terminations
* Add "child interface" option to actions dropdown in interfaces list
* Add "L2VPN termination" option to actions dropdown in interfaces list
* Add "assign FHRP group" option to actions dropdown in interfaces list
* Replicate type when cloning L2VPN instances
* Use fixed column widths for custom field values in UI
* Enable nullifying device location during bulk edit

### Bug Fixes

* Omit available IP annotations when filtering prefix child IPs list
* Fix exception when ordering prefixes by flat representation
* Custom fields header should not be displayed when editing circuit terminations with no custom fields
* Fix extraneous NAT indicator by device primary IP
* Fix AttributeError exception when global search results include rack reservations
* Add identifier column to L2VPN table
* Add unique constraint for L2VPN slug
* Correct display of far end in console/power/interface connections tables
* `linkify` template filter should escape object representation
* Fix 404 when using "create and add another" to add contact assignments
* Linkify inside NAT IPs for primary device IPs in UI
* Fix available prefixes calculation for container prefixes in the global table
* Fix ValueError exception when searching for L2VPN objects
* Fix display of connected LLDP neighbors for devices
* Custom fields data serializer should return a 400 response for invalid data
* Fix SSO support for SAML2 IDPs
* Permit the creation of 0U device types via REST API

---

## v3.3.0 (2022-08-17)

### Breaking Changes

* Device position, device type height, and rack unit values are now reported as decimals (e.g. `1.0` or `1.5`) to support modeling half-height rack units.
* The `nat_outside` relation on the IP address model now returns a list of zero or more related IP addresses, rather than a single instance (or None).
* Several fields on the cable API serializers have been altered or removed to support multiple-object cable terminations:

| Old Name             | Old Type | New Name              | New Type |
|----------------------|----------|-----------------------|----------|
| `termination_a_type` | string   | _Removed_             | -        |
| `termination_b_type` | string   | _Removed_             | -        |
| `termination_a_id`   | integer  | _Removed_             | -        |
| `termination_b_id`   | integer  | _Removed_             | -        |
| `termination_a`      | object   | `a_terminations`      | list     |
| `termination_b`      | object   | `b_terminations`      | list     |

* As with the cable model, several API fields on all objects to which cables can be connected (interfaces, circuit terminations, etc.) have been changed:

| Old Name                       | Old Type | New Name                        | New Type |
|--------------------------------|----------|---------------------------------|----------|
| `link_peer`                    | object   | `link_peers`                    | list     |
| `link_peer_type`               | string   | `link_peers_type`               | string   |
| `connected_endpoint`           | object   | `connected_endpoints`           | list     |
| `connected_endpoint_type`      | string   | `connected_endpoints_type`      | string   |
| `connected_endpoint_reachable` | boolean  | `connected_endpoints_reachable` | boolean  |

* The cable path serialization returned by the `/paths/` endpoint for pass-through ports has been simplified, and the following fields removed: `origin_type`, `origin`, `destination_type`, `destination`. (Additionally, `is_complete` has been added.)

### New Features

#### Multi-object Cable Terminations

When creating a cable in NetBox, each end can now be attached to multiple termination points. This allows accurate modeling of duplex fiber connections to individual termination ports and breakout cables, for example. (Note that all terminations attached to one end of a cable must be the same object type, but do not need to connect to the same parent object.) Additionally, cable terminations can now be modified without needing to delete and recreate the cable.

#### L2VPN Modeling

NetBox can now model a variety of L2 VPN technologies, including VXLAN, VPLS, and others. Interfaces and VLANs can be attached to L2VPNs to track connectivity across an overlay. Similarly to VRFs, each L2VPN can also have import and export route targets associated with it.

#### PoE Interface Attributes

Two new fields have been added to the device interface model to track Power over Ethernet (PoE) capabilities:

* **PoE mode**: Power supplying equipment (PSE) or powered device (PD)
* **PoE type**: Applicable IEEE standard or other power type 

#### Half-Height Rack Units

Device type height can now be specified in 0.5U increments, allowing for the creation of devices consume partial rack units. Additionally, a device can be installed at the half-unit mark within a rack (e.g. U2.5). For example, two half-height devices positioned in sequence will consume a single rack unit; two consecutive 1.5U devices will consume 3U of space.

#### Restrict API Tokens by Client IP

API tokens can now be restricted to use by certain client IP addresses or networks. For example, an API token with its `allowed_ips` list set to `[192.0.2.0/24]` will permit authentication only from API clients within that network; requests from other sources will fail authentication. This enables administrators to restrict the use of a token to specific clients.

#### Reference User in Permission Constraints

NetBox's permission constraints have been expanded to support referencing the current user associated with a request using the special `$user` token. As an example, this enables an administrator to efficiently grant each user to edit his or her own journal entries, but not those created by other users.

```json
{
  "created_by": "$user"
}
```

#### Custom Field Grouping

A `group_name` field has been added to the custom field model to enable organizing related custom fields by group. Similarly to custom links, custom fields which have been assigned to the same group will be rendered within that group when viewing an object in the UI. (Custom field grouping has no effect on API operation.)

#### Toggle Custom Field Visibility

The behavior of each custom field within the NetBox UI can now be controlled individually by toggling its UI visibility. Three options are available:

* **Read/write**: The custom field is included when viewing and editing objects (default).
* **Read-only**: The custom field is displayed when viewing an object, but it cannot be edited via the UI. (It will appear in the form as a read-only field.)
* **Hidden**: The custom field will never be displayed within the UI. This option is recommended for fields which are not intended for use by human users.

Custom field UI visibility has no impact on API operation.

### Enhancements

* Support overlapping assignment of NAT IP addresses
* Illustrate reservations vertically alongside rack elevations
* Enable highlighting devices within rack elevations
* A virtual machine may be assigned to a site and/or cluster
* Add `termination_date` field to Circuit
* Add `status` field to Location
* Populate next available address when cloning an IP
* Enable the assignment of a VM to a specific host device within a cluster
* Add `status` field to Cluster
* Enable custom fields and tags for circuit terminations
* Enable arbitrary ordering of REST API results
* Hide navigation menu items based on user permissions
* Add tenant assignment for wireless LANs & links
* Remove 500-character limit for custom link text & URL fields
* Track API token usage times
* Enable assigning config contexts based on device location

### Bug Fixes (from Beta2)

* Display parent object of connected termination
* Pre-populate site & rack fields for cable connection form
* Exclude virtual interfaces from terminations list when connecting a cable
* Fix list of next nodes for split paths under trace view

### Plugins API

* Introduce `AbortRequest` exception for cleanly interrupting object mutations
* Add support for `ObjectChildrenView` generic view
* Subclasses of `ChangeLoggingMixin` can override `serialize_object()` to control JSON serialization for change logging
* Add `clone()` method to NetBoxModel for copying instance attributes
* Introduce `customfield_value` template tag

### Other Changes

* `NetBoxTable` no longer automatically clears pre-existing calls to `prefetch_related()` on its queryset
* Enabled `django-rich` test runner for more user-friendly output
* Implement a mechanism for automatically updating denormalized fields

### REST API Changes

* List results can now be ordered by field, by appending `?ordering={fieldname}` to the query. Multiple fields can be specified by separating the field names with a comma, e.g. `?ordering=site,name`. To invert the ordering, prepend a hyphen to the field name, e.g. `?ordering=-name`.
* Added the following endpoints:
    * `/api/dcim/cable-terminations/`
    * `/api/ipam/l2vpns/`
    * `/api/ipam/l2vpn-terminations/`
* circuits.Circuit
    * Added optional `termination_date` field
* circuits.CircuitTermination
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
    * Added `custom_fields` and `tags` fields
* dcim.Cable
    * `termination_a_type` has been renamed to `a_terminations_type`
    * `termination_b_type` has been renamed to `b_terminations_type`
    * `termination_a` renamed to `a_terminations` and now returns a list of objects
    * `termination_b` renamed to `b_terminations` and now returns a list of objects
    * `termination_a_id` has been removed
    * `termination_b_id` has been removed
* dcim.ConsolePort
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* dcim.ConsoleServerPort
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* dcim.Device
    * The `position` field has been changed from an integer to a decimal
* dcim.DeviceType
    * The `u_height` field has been changed from an integer to a decimal
* dcim.FrontPort
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* dcim.Interface
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
    * Added the optional `poe_mode` and `poe_type` fields
    * Added the `l2vpn_termination` read-only field
* dcim.InterfaceTemplate
    * Added the optional `poe_mode` and `poe_type` fields
* dcim.Location
    * Added required `status` field (default value: `active`)
* dcim.PowerOutlet
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* dcim.PowerFeed
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* dcim.PowerPort
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* dcim.Rack
    * The `elevation` endpoint now includes half-height rack units, and utilizes decimal values for the ID and name of each unit
* dcim.RearPort
    * `link_peer` has been renamed to `link_peers` and now returns a list of objects
    * `link_peer_type` has been renamed to `link_peers_type`
    * `connected_endpoint` has been renamed to `connected_endpoints` and now returns a list of objects
    * `connected_endpoint_type` has been renamed to `connected_endpoints_type`
    * `connected_endpoint_reachable` has been renamed to `connected_endpoints_reachable`
* extras.ConfigContext
    * Added the `locations` many-to-many field to track the assignment of ConfigContexts to Locations
* extras.CustomField
    * Added `group_name` and `ui_visibility` fields
* ipam.IPAddress
    * The `nat_inside` field no longer requires a unique value
    * The `nat_outside` field has changed from a single IP address instance to a list of multiple IP addresses
* ipam.VLAN
    * Added the `l2vpn_termination` read-only field
* users.Token
    * Added the `allowed_ips` array field
    * Added the read-only `last_used` datetime field
* virtualization.Cluster
    * Added required `status` field (default value: `active`)
* virtualization.VirtualMachine
    * The `site` field is now directly writable (rather than being inferred from the assigned cluster)
    * The `cluster` field is now optional. A virtual machine must have a site and/or cluster assigned.
    * Added the optional `device` field
    * Added the `l2vpn_termination` read-only field
* wireless.WirelessLAN
    * Added `tenant` field
* wireless.WirelessLink
    * Added `tenant` field
=== END FILE ===

**Version 3.2**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.2/
=== BEGIN FILE ===
# NetBox v3.2

## v3.2.9 (2022-08-16)

### Enhancements

* Add PON interface types
* Enable bulk renaming of devices
* Pretty print JSON custom field data when editing
* Display extra addressing details for IPv4 prefixes
* Add phone & email details to contacts panel
* Add clear button to quick search fields
* Add DOCSIS interface type

### Bug Fixes

* Remove button for adding inventory item templates to module type components
* Fix Markdown rendering for custom fields in table columns
* Workaround for upstream timezone data bug

---

## v3.2.8 (2022-08-08)

### Enhancements

* Add/edit {module} substitution to help text for component template name
* Add site group field to rack reservation form
* Add `nat_outside` column to the IPAddress table
* Add contacts column to virtual machines table
* Increase granularity in utilization graph values
* Add manufacturer column to modules table
* Linkify location column in power panels table
* Include `color` attribute in front & rear port YAML import/export

### Bug Fixes

* Fix assignment of module bay position during bulk creation
* Fix utilization graph value alignments
* Prevent querying assigned VRF on prefix object init
* Fix child prefix counts when editing/deleting aggregates in bulk
* Ensure consistent ordering for tags during object serialization
* Fix potential XSS avenue via linked objects in tables
* Fix TypeError exception when requesting API tokens list as non-authenticated user
* Fix KeyError exception resulting from invalid API token provisioning request
* Prevent redirection to arbitrary URLs via `next` parameter on login URL
* Prevent InvalidMove when attempting to assign a nested child object as parent

---

## v3.2.7 (2022-07-20)

### Enhancements

* Support filter expressions for the `serial` field on racks, devices, and inventory items
* Check for UserConfig instance during user login
* Add wireless LANs and links to global search

### Bug Fixes

* Standardize form submission buttons and behavior when using enter key
* Fix filtered bulk deletion of VM Interfaces
* Fix image URLs in rack elevations when using external storage
* Fix `SOCIAL_AUTH_PIPELINE` config parameter not taking effect
* Fix regression introduced by #9632
* Permit filtering interfaces by arbitrary speed value in UI
* Retain original slug values when modifying object names
* Fix exception when viewing a report with no description

---

## v3.2.6 (2022-07-11)

### Enhancements

* Enable dynamic configuration for default powerfeed attributes
* Allow filtering modules by bay ID
* Enable modifying virtual chassis properties when creating/editing a device
* Add filters for assigned device & VM to IP addresses list
* Add tenant group column for all object tables with tenant assignments

### Bug Fixes

* Fix `REMOTE_AUTH_DEFAULT_GROUPS` for social-auth backends
* Fix AttributeError exception for FHRP group with an IP address assigned
* Include `installed_module` in module bay REST API serializer
* Automatically focus on search box when expanding dropdowns
* Fix filtering for custom fields and webhooks in the UI
* Fix bulk assignment of ASNs to sites
* Don't restrict custom text field lengths when entering via UI form
* Include `last_updated` field on JournalEntry REST API serializer

---

## v3.2.5 (2022-06-20)

### Enhancements

* Shift-click to select multiple objects in a list
* Support filtering IP addresses by multiple parent prefixes
* Include count of IP ranges under tenant view
* Initialize manufacturer selection when inserting a new module
* Add support for custom Jinja2 filters
* Linkify related power port on power outlet view
* Provide one-click edit link for objects in tables
* Move Markdown reference to local documentation
* Add VLAN group selector to interface bulk edit forms
* Leave dropdown open upon selection for multi-select fields

### Bug Fixes

* Fix rendering of Markdown links with colons
* Fix rendering of bracketed Markdown links
* Improve performance when retrieving devices/VMs with config context data
* Avoid sending webhooks after script/report failure
* Fix sorting services & service templates by port numbers
* Include services listening on "all IPs" under IP address view
* Fix redirect URL when adding device components from the module view
* Correct link to contacts in contact groups table column
* Hyperlinks in rack elevation SVGs must always use absolute URLs
* Fix duplicate site results when searching by ASN
* Correct order of VLAN fields under VM interface creation form
* Ensure consistent use of placeholder tag throughout UI
* Fix device counts for rack list under rack role view

---

## v3.2.4 (2022-05-31)

### Enhancements

* Display device type and asset tag if name is blank but asset tag is populated
* Add service list to IP address view
* Add "other" types for power ports/outlets, pass-through ports
* Enable filtering by contact group for all models which support contact assignment
* Introduce `CSRF_COOKIE_NAME` configuration parameter
* Include services in global search
* Redirect to virtual chassis view after adding a member device
* Add `export_raw` argument for TemplateColumn

### Bug Fixes

* Fix partial address search within Prefix and Aggregate filters
* Improve data validation for MultiObjectVar script fields
* Annotate circuit count for providers list under ASN view
* Ensure ActionsColumn `extra_buttons` are always displayed
* Fix custom field population when creating a virtual chassis
* Clean up display of prefixes values when exporting prefixes list
* Fix custom script class inheritance
* Fix bulk import for object and multi-object custom fields
* Fix passing of initial form data for DynamicModelChoiceFields

---

## v3.2.3 (2022-05-12)

### Enhancements

* Add "mixed" option for device airflow indication
* Include full names when listing users
* Enable filtering racks & reservations by site group
* Introduce `clearcache` management command & clear cache during upgrade
* Add definition list support for Markdown
* Apply user preferences to tables under object detail views
* Linkify device types count under manufacturers list
* Allow adopting existing components when installing a module
* Add device and VM filters for FHRP group assignments
* Introduce support for error reporting via Sentry
* Add Ubiquiti SmartPower power outlet type

### Bug Fixes

* Prevent exception when attempting to instantiate module components which already exist on the parent device
* Remove invalid entry in IP address role choices
* Improve Markdown link sanitization
* Include VC master interfaces when selecting a LAG/bridge for a VC member interface
* Permit creating contact assignment without a priority via the REST API
* Remove HTML code from CSV output of many-to-many relationships
* Add missing `module_type` field to REST API serializers for modular device component templates

---

## v3.2.2 (2022-04-28)

### Enhancements

* Add device type filters for device bays, module bays, and inventory items
* Annotate related object type under custom field view
* Add Ubiquiti SmartPower connector type
* Linkify cluster counts in cluster type & group tables

### Bug Fixes

* Treat 0th IP as unusable for IPv6 prefixes (excluding /127s)
* Fix dynamic dropdown behavior when browser is zoomed
* Prevent exception when refreshing scripts list (avoid race condition)
* Limit location options by selected site when creating a wireless link
* Upgrade script should require Python 3.8 or later
* Avoid inadvertent form submission when utilizing quick search field on object lists
* Child prefix counts not annotated on aggregates list under RIR view
* Fix loading UserConfig data from fixtures
* Do not list tags field for CSV forms which do not support tag assignment
* Support position assignment when add module bays to multiple devices
* Show header for comments field under module & module type creation views
* Fix circuit ID display under cable view
* Fix related object assignment when recording change record for interfaces

---

## v3.2.1 (2022-04-14)

### Enhancements

* Allow custom job timeouts for scripts & reports
* Improve filtering for wireless LAN VLAN selection
* Limit number of non-racked devices displayed
* Retain old script/report results for configured lifetime
* Display VLAN group count under site view
* Add `fhrpgroup_id` filter for IP addresses
* Enable display of installed module serial & asset tag in module bays list
* Add Neutrik proprietary power connectors
* Improve appearance of SSO login providers

### Bug Fixes

* Copy assigned tenant when cloning a location
* Restore ability to move inventory item to other device
* Fix missing instance counts for module types
* Fix general search for device components
* Min/max VID should not be required when filtering VLAN groups
* Fail validation when an inventory item is assigned as its own parent
* Remove duplicate filter tag when filtering by "none"
* Include position field in module type YAML export
* `assigned_to_interface` filter for IP addresses should not match FHRP group assignments
* Fix validation error when importing VM child interfaces
* Resolve component labels per module bay position when installing modules

---

## v3.2.0 (2022-04-05)

NetBox v3.2 requires Python 3.8 or later.

This release includes a database migration that will remove the `asn`, `contact_name`, `contact_phone`, and `contact_email` fields from the site model. The upgrade process will fail if any sites still have data in these fields. To bypass this safeguard, set the `NETBOX_DELETE_LEGACY_DATA` environment variable when running the upgrade script.

### Breaking Changes

* Automatic redirection of legacy slug-based URL paths has been removed.
* The `asn` field has been removed from the site model.
* The `contact_name`, `contact_phone`, and `contact_email` fields have been removed from the site model.
* The `created` field of all change-logged models now conveys a full datetime object.
* A `pre_run()` method has been added to the base Report class.
* Webhook URLs now support Jinja2 templating.

### New Features

#### Plugins Framework Extensions

NetBox's plugins framework has been extended considerably in this release with new generic view classes and base classes for various functionalities.

#### Modules & Module Types

New models have been added to represent field-replaceable device modules, allowing for better management of device components.

#### Custom Object Fields

Two new types of custom field have been introduced: object and multi-object.

#### Custom Status Choices

Custom choices can now be added to most object status fields in NetBox.

#### Improved User Preferences

A robust new mechanism for managing user preferences is included in this release.

#### Inventory Item Roles

A new model has been introduced to represent functional roles for inventory items.

#### Inventory Item Templates

Inventory items can now be templatized on a device type.

#### Service Templates

A new service template model has been introduced to assist in standardizing the definition and association of applications with devices and virtual machines.

#### Automatic Provisioning of Next Available VLANs

A new REST API endpoint has been added to manage available VLANs within groups.

### Enhancements

* Enable toggling the placement of table pagination controls
* Remember users' table ordering preferences
* Expose `AUTH_PASSWORD_VALIDATORS` setting
* Add actions menu to all object tables
* Add `service_id` field for provider networks
* Support cluster type assignment for config contexts
* Enable associating inventory items with device components
* Enable the assignment of interfaces to VRFs
* Add `speed` and `duplex` fields to device interface model
* Add `min_vid` and `max_vid` fields to VLAN group
* Jinja2 rendering is now supported for webhook URLs
* Allow disabling custom links
* Add `data_type` indicator to REST API serializer for custom fields
* Change the `created` field on all change-logged models from date to datetime
* Enable assigning multiple ASNs to a provider
* Add a `pre_run()` method for reports
* Add a `link` field for contacts
* Enable customization of configuration module using `NETBOX_CONFIGURATION` environment variable
* Enable custom fields, custom links, and tags for journal entries

### Bug Fixes (From Beta2)

* Fix display of assigned components under inventory item lists
* Fix FieldError exception during global search
* Correct default ASN formatting in table
* Fix NoReverseMatch exception when displaying tag w/assignments
* Enable filtering by custom object fields
* Permit nested inventory item templates on device types
* Add missing `object_type` field on CustomField REST API serializer
* Fix instantiation of front ports when provisioning a module
* Fix FieldError exception when instantiating a device type with nested inventory items

### Other Changes

* Require Python 3.8 or later
* Remove legacy ASN field from site model
* Remove legacy contact fields from site model
* Remove automatic redirection of legacy slug-based URLs
* Use 64-bit integers for all primary keys
* `CSRF_TRUSTED_ORIGINS` is now a discrete configuration parameter

### REST API Changes

* Added several new endpoints related to inventory items, modules, and VLANs.
* Various models have been updated with new fields and functionalities.
=== END FILE ===

**Version 3.1**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.1/
=== BEGIN FILE ===
# NetBox v3.1

## v3.1.11 (2022-04-05)

### Enhancements

* Show bridge interface members under interface view
* Enable filtering child devices by parent device ID
* Permit wildcard values in IP address DNS names
* Include site and prefixes columns in VLAN group VLANs table
* Add Checkpoint ClusterXL protocol for FHRP groups
* Use monospace font for text areas in config revision form
* Linkify circuits count in providers list
* Add bulk edit capability for site contact fields

### Bug Fixes

* Prevent exception when searching for a rack position with no rack specified under device edit view
* Fix device count for racks in global search results

---

## v3.1.10 (2022-03-25)

### Enhancements

* Use a different color for 100% utilization bars
* Enable adding non-racked devices from site & location views
* Add missing object types to global search form
* Add rack columns to cables list
* Enable filtering objects by assigned contacts & contact roles
* Add device type, role columns to device bay table

### Bug Fixes

* Fix help link under FHRP group assignment creation view
* Retain global search bar query after submitting
* Fix navbar background color in dark mode
* Show airflow field on device REST API serializer when config context data is included
* Disable ordering by assigned tags to prevent erroneous results
* Fix filtering of VLAN groups by site under prefix edit form
* Improve load time of custom script list
* Fix error when setting null value for interface `rf_role` via REST API
* Correct ordering of next/previous racks to use naturalized names
* Retain filter parameters when handling an export template exception
* Allow changing device type & platform to different manufacturer simultaneously
* Device images in rear rack elevations should be hyperlinked

---

## v3.1.9 (2022-03-07)

### Enhancements

* Enable filtering by exact description match for all applicable models
* Add description to tag table search function
* Show assigned ASNs/sites under list views
* Add PC and UPC fiber end faces for LC/SC/LSH port types
* Allow empty string substitution when renaming objects in bulk
* Link to rack elevations list from site view
* Add SCTP to service protocols list

### Bug Fixes

* Fix bulk import to restrict bridge, parent, and LAG to device interfaces
* Prevent navigation sidebar pin from disappearing at certain breakpoints
* Fix rendering of tabbed content in documentation
* Fix dynamic scope selection form fields when creating a VLAN group
* Restore missing "add" button on services list view
* Avoid returning multiple objects when restricting querysets using multiple tags in permissions
* Fix redirection after bulk edit/delete of prefixes from aggregate view
* Fix exception during device import with invalid device type
* Correct REST API URL for FHRP group assignments
* Fix members count under FHRP group list

---

## v3.1.8 (2022-02-15)

### Enhancements

* Linkify devices on the far side of a rack elevation
* Embiggen configuration form fields for banner message content
* Add full username column to changelog table
* Enable tab completion for `nbshell`

### Bug Fixes

* Implement `replaceAll` string utility function to improve browser compatibility
* Null date columns should return empty strings during CSV export
* Fix display of VC members when position is zero
* Include option to connect a rear port to a console port
* Fix errant table configuration key `available_columns`
* Show contact assignment counts in global search results
* Object change log tables should honor user's configured preferences
* Fix tag filter on config context list filter form
* Display validation error when attempting to assign VLANs to interface with no mode during bulk edit
* Fix bulk editing for certain custom link, webhook, and journal entry fields

---

## v3.1.7 (2022-02-03)

### Enhancements

* Include IP range data under IPAM role views
* Introduce alternative ASDOT-formatted column for ASNs
* Add ASNs to global search function
* Enable controlling the order of custom script form fields with `field_order`
* Add contacts to global search function
* Linkify manufacturer column in device type table
* Bring the ASN Web UI up to the standard set by other objects
* Include locations count under tenant view
* Render boolean custom fields as icons in object tables
* Indicate CSV or YAML as format for "all data" export

### Bug Fixes

* Fix display of NAT link for primary IPv4 address under device view
* Fix calculation of absolute cable lengths when specified in fractional units
* Fix exception when viewing change list/records with removed plugins
* Fix redundant display of VRF RD in prefix view
* Accept empty string values for Interface `rf_channel` in REST API
* Fix display of selected content type filters in object list views
* Content types REST API endpoint should not require model permission
* Correct file permissions to allow execution of housekeeping script
* Fix display of changelog retention period

---

## v3.1.6 (2022-01-17)

### Enhancements

* Show human-friendly values for commit rates in circuits table
* Add cable count to tenant stats
* Add Stackwise-n interface types
* Show 4-byte ASNs in ASDOT notation
* Linkify role column in device & VM tables
* Enable sorting object tables by created & updated times

### Bug Fixes

* Fix display of virtual chassis members in rack elevations
* Fix `cluster_count` under tenant REST API serializer
* Correct label in export template form
* Fix delete button for various object children views
* Fix assignment of custom field data to FHRP groups via UI
* Redirect user to previous page after login
* Prevent custom fields with default values from appearing as applied filters erroneously
* Fix CSV import of multi-select custom field values
* Custom URL fields should honor `ALLOWED_URL_SCHEMES` config parameter
* Restore `created` & `last_updated` fields missing from several REST API serializers
* Add missing tags field to location filter form
* Fix inconsistent styling of custom fields on filter & bulk edit forms

---

## v3.1.5 (2022-01-06)

### Enhancements

* Use in-page dialogs for confirming object deletion
* Add length & length unit fields to cable filter form
* Linkify type and group columns in clusters table

### Bug Fixes

* Fix ValueError exception under prefix IP addresses view
* Fix KeyError exception when creating FHRP group with IP address and protocol "other"
* Honor return URL after populating a device bay
* Optional ChoiceVar fields should not force a selection
* Fix bulk editing of authentication parameters for wireless LANs and links

---

## v3.1.4 (2022-01-03)

### Enhancements

* Add "add prefix" button to aggregate child prefixes view
* Enable bulk user assignment to groups under admin UI
* Allow filtering sites by group when connecting a cable
* Establish `netbox/local/` as a path for local resources

### Bug Fixes

* Fix rendering of tags column in object tables
* Fix return URL when adding IP addresses to VM interfaces
* Fix IndexError exception when viewing large IPv6 prefixes in UI
* Custom integer fields should allow negative integers as minimum/maximum values

---

## v3.1.3 (2021-12-29)

### Enhancements

* Enable the inclusion of custom links in tables
* Include count of available IPs on prefix view
* Enable specifying custom field validators during CSV import
* Add "other" choice for FHRP group protocol
* Display parent object when attaching an image

### Bug Fixes

* Don't attempt to URL-decode NAPALM response payloads
* Defer loading API-backed form fields
* Forward `HTTP_X_FORWARDED_FOR` to custom scripts
* Fix user menu under report/script result view
* Standardize name of `RemoteUserBackend` logger
* Fix styling of Markdown tables
* Fix disassociation of interface under IP address edit view
* Restore annotation of available IPs under prefix IPs view
* Fix bulk editing of objects within dynamic tables
* Fix rendering of table configuration form under VM interfaces view
* Restore missing fields on wireless LAN & link REST API serializers

---

## v3.1.2 (2021-12-20)

### Enhancements

* Remove forced styling of custom banners
* Add toggle to show only available child prefixes
* Add 6 GHz and 60 GHz wireless channels
* Dynamic object tables using HTMX
* Link to NAT IPs for device/VM primary IPs
* Allow creating services directly from navigation menu
* Removed "related devices" panel from device view
* Improve breadcrumb links for device/VM components

### Bug Fixes

* Fix inadvertent application of device type context to virtual machines
* Ordering VMs by name should reference naturalized value
* Fix exception when attaching image to location, circuit, or power panel
* Add missing wireless models to `lsmodels()` in `nbshell`
* Fix validation of LLDP neighbors when connected device has an asset tag
* Improve legibility of text in labels with light-colored backgrounds
* Rack elevations should not include device asset tags
* Fix DataError during change logging of objects with very long string representations
* Preserve return URL when using "create and add another" button
* Raise validation error when attempting to assign an IP address to multiple objects

---

## v3.1.1 (2021-12-13)

### Enhancements

* Display sorting indicator in table column headers

### Bug Fixes

* Fix permissions evaluation under available prefix/IP REST API endpoints
* Return a 409 status for unfulfillable available prefix/IP requests
* Fix custom field integer support for MultiValueNumberFilter
* Fix `title` display on contact detail view
* Show WWN field in interface creation form
* Correct verbose name for wireless LAN group model
* Fix cable tracing across bridged interfaces with no cable
* Fix contact email display
* Validate IP addresses for uniqueness when creating an FHRP group
* Allow filtering devices by multiple serial numbers
* Exclude metrics endpoint when `LOGIN_REQUIRED` is true
* Validate custom field names
* Fix display of zero values for custom integer fields in tables
* Redirect back to parent prefix after creating IP address(es) where applicable
* Placeholder filter should display zero integer values
* Contact group parent assignment should not be required under REST API

---

## v3.1.0 (2021-12-06)

NetBox v3.1 requires PostgreSQL 10 or later.

### Breaking Changes

* The `tenant` and `tenant_id` filters for the Cable model now filter on the tenant assigned directly to each cable.
* The `cable_peer` and `cable_peer_type` attributes of cable termination models have been renamed to `link_peer` and `link_peer_type`.
* Exported webhooks and custom fields now reference associated content types by raw string value.
* The 128GFC interface type has been corrected from `128gfc-sfp28` to `128gfc-qsfp28`.

### New Features

#### Contact Objects

A set of new models for tracking contact information has been introduced. Users may create individual contact objects to be associated with various models within NetBox.

#### Wireless Networks

This release introduces two new models to represent wireless networks:
* Wireless LAN
* Wireless Link

#### Dynamic Configuration Updates

Some parameters of NetBox's configuration are now accessible via the admin UI.

#### First Hop Redundancy Protocol (FHRP) Groups

A new FHRP group model has been introduced to aid in modeling configurations of protocols such as HSRP, VRRP, and GLBP.

#### Conditional Webhooks

Webhooks now include a `conditions` field to specify conditions under which a webhook triggers.

#### Interface Bridging

A `bridge` field has been added to the interface model for devices and virtual machines.

#### Multiple ASNs per Site

NetBox now supports the assignment of multiple ASNs per site.

#### Single Sign-On (SSO) Authentication

Support for single sign-on (SSO) authentication has been added.

### Enhancements

* Add WWN field to interfaces
* Relax uniqueness constraint on cluster names
* Add `airflow` field for devices types and devices
* Include a device's asset tag in its display value
* Extend tag support to organizational models
* Add filter lookups for custom fields
* Add `longtext` custom field type with Markdown support
* Add tenant assignment for cables
* Add tenant assignment for locations
* Relax uniqueness constraints on region, site group, and location names
* Add `json` custom field type
* Move device type component lists to separate views
* Model transmit power for interfaces
* Permit custom validation rules to be defined as plain data or dotted path to class
* Extend cable tracing across bridged interfaces
* Enable change logging for image attachments
* Standardize the representation of content types across import & export functions

### Bug Fixes

* Correct 128GFC interface type identifier

### Other Changes

* Raise minimum required PostgreSQL version from 9.6 to 10

### REST API Changes

* Added endpoints for ASNs, FHRP groups, contacts, and wireless networks.
* Renamed attributes in cable termination models and added new fields across various models.
=== END FILE ===

**Version 3.0**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-3.0/
=== BEGIN FILE ===
# NetBox v3.0

## v3.0.12 (2021-12-06)

### Enhancements

* Get API user from LDAP only when `FIND_GROUP_PERMS` is enabled
* Linkify VLAN name in VLANs table
* Add L22-30 power port & outlet types
* Improve performance of the "quick find" function
* Add multi-standard ITA power outlet type

### Bug Fixes

* Fix issue where `return_url` is not honored when 'Save & Continue' button is present
* Fix Markdown sanitization regex

---

## v3.0.11 (2021-11-24)

### Enhancements

* Add missing `q` filters for necessary models
* Add virtual chassis filters for device components
* Add Markdown support for strikethrough formatting
* Add optional VLAN group column to prefixes table
* Improve live reloading of custom scripts
* Add IEEE 802.15.1 interface type

### Bug Fixes

* Fix excessive CPU utilization when `AUTH_LDAP_FIND_GROUP_PERMS` is enabled
* Make change logging middleware thread-safe
* Fix initialization of custom script MultiObjectVar field with multiple values
* Fix permissions evaluation when displaying VLAN group VLANs table
* Fix exception when tracing cable across circuit with no far end termination
* Fix handling of errors during export template rendering
* Add missing cluster name filter for virtual machines
* Fix ordering IP addresses by assignment status
* Fix styling of form widgets under cable connection views
* `power_port` can be null when creating power outlets via REST API
* REST API should support null values for console port speeds

---

## v3.0.10 (2021-11-12)

### Enhancements

* Add mini-DIN 8 console port type
* Add `vid` filter field to VLANs list
* Add visual aids to interfaces table for type, enabled status

### Bug Fixes

* Fix assignment of members to virtual chassis with initial position of zero
* Fix conflation of assigned IP status & role in interface tables
* Fix 404 when attaching multiple images in succession
* Fix minimum version check under Python v3.10
* Add missing outer dimension columns to rack table
* Preserve multi-line values during CSV file import
* Fix indentation of locations under site view
* Improve XSS mitigation in Markdown renderer
* Enable sorting device bays table by installed device status
* Differentiate ID and VID columns in VLANs table
* Fix reference values for content type under custom field import form
* Add missing export template support for various models
* Fix restriction of user & group objects in GraphQL API queries

---

## v3.0.9 (2021-11-03)

### Enhancements

* Introduce the `runscript` management command
* Add an optional "ID" column to all tables
* Add "view elevations" button to location view

### Bug Fixes

* Improve color mode preference handling
* Correct devices count for locations within global search results
* Strip HTML from custom field descriptions
* Fix `load_yaml` method for custom scripts
* Fix circuit assignment when creating multiple terminations simultaneously
* Prevent inadvertent deletion of prior change records when deleting objects
* Require interface assignment when designating IP address as primary for device/VM during CSV import
* Preserve initial form data when bulk edit validation fails
* Restore missing tags column on IP range table
* Retain pagination preference when `MAX_PAGE_SIZE` is zero

---

## v3.0.8 (2021-10-20)

### Enhancements

* Add UI field to filter interfaces by kind
* Add a utilization column to the IP ranges table

### Bug Fixes

* Fix incorrect Device LLDP interface row coloring
* Fix navigation UI issue that caused improper element overlap
* Restore horizontal scrolling for tables in narrow viewports
* Avoid exception when utilizing "create and add another" twice in succession
* Fix multi-value filtering of custom field objects
* Fix incorrect display of update/delete events for webhooks
* Fix rendering of UTF8-encoded data in change records
* Fix display of version when new release is available
* Fix alignment of object identifier under object view

---

## v3.0.7 (2021-10-08)

### Enhancements

* Improve ability to toggle images/labels in rack elevations 
* Add USB micro AB type

### Bug Fixes

* Fix permissions evaluation and improve error handling for connected device REST API endpoint
* Correct redirect URL when attaching images via "add another" button
* Fix AttributeError exception when rendering a report or custom script
* Fix parent interface choices when bulk editing VM interfaces

---

## v3.0.6 (2021-10-06)

### Enhancements

* Default to current user when creating journal entries via REST API
* Include type, ID, and slug on object view
* Enable filtering cables by termination type & ID in REST API
* Include count of assigned virtual machines under platform view

### Bug Fixes

* Fix missing actions column on user-configured tables
* Fix exception when viewing a large number of child IPs within a prefix
* Fix site/provider network validation for circuit termination API serializer
* Pre-populate location data when adding a device to a rack
* Fix filtering connections by site ID

---

## v3.0.5 (2021-10-04)

### Enhancements

* Always show IP addresses tab under prefix view
* Cache rendered REST API specifications
* Add image attachment support for circuits, power panels
* Enable arbitrary ordering of custom scripts

### Bug Fixes

* Fix bulk editing of child prefixes under aggregate view
* Custom field columns should be removed from tables upon their deletion
* Remove errant markup for null values in CSV export
* Prevent rack elevations from overlapping when higher width is specified
* Fix flashing when server, client, and browser color-mode preferences are mismatched
* Fix AttributeError exception when rendering export template for devices via REST API
* Pin `jsonschema` package to v3.2.0 to fix REST API docs rendering
* Fix exception in UI when adding member devices to virtual chassis
* Fix exception in UI when adding child device to device bay
* Prevent exception when filtering objects list by invalid tag
* Housekeeping command should honor zero verbosity
* Don't select hidden rows when selecting all in a table

---

## v3.0.4 (2021-09-29)

### Enhancements

* Make IP assigned checkmark in IP table link to interface
* Enable custom ordering of reports
* Add ITA type C (CEE 7/16) power port type
* Render URL custom fields as hyperlinks in object tables
* Add SMA 905/906 fiber port types
* Add serial filter field for racks & devices
* Link to local docs for model from object add/edit views
* Linkify tenant group in tenants list

### Bug Fixes

* Validate IP range size does not exceed max supported value
* Fix SVG rendering for cable traces ending at unoccupied front ports
* Require explicit values for all required choice fields during CSV import
* Don't overwrite multi-select custom fields during bulk edit
* Fix TypeError exception in web UI when filtering objects using single-choice filters
* Prevent inadvertent deletion of prior change records when deleting objects
* Fix incorrect URL in circuit breadcrumbs
* Fix bulk creation of device/VM components via list view
* Fix display of model documentation when adding device components
* Add missing `choices` column to custom field CSV import form
* Correct redirection URL after removing child device from device bay
* Optimize performance when calculating prefix utilization
* Add missing `face` parameter to API elevations request when editing device
* Fix "help" links for custom fields, other models

---

## v3.0.3 (2021-09-20)

### Enhancements

* Enable synchronization of groups for remote authentication backend
* Add xDSL interface type
* Order tenants alphabetically without regard to group assignment
* Add URM port types
* Add `local_context_data` filter for virtual machines list
* Add navigation breadcrumbs for custom scripts & reports
* Add search/filter forms for all organizational models
* Redirect global search to filtered object list when an object type is selected
* Include comments field in table/export for all appropriate models

### Bug Fixes

* Ensure consistent font size when using monospace formatting
* Exempt GraphQL API requests from CSRF inspection
* Improve temperature conversions under device status
* Fix global search results section links
* Tweak font color for form field placeholder text
* Fix natural ordering of device components in UI form fields
* Fix exception when tracing cable with no associated path
* Fix KeyError exception when `INSECURE_SKIP_TLS_VERIFY` is true
* Restore missing object names from applied object list filters
* Fix exception when deleting a large number of child prefixes

---

## v3.0.2 (2021-09-08)

### Bug Fixes

* Fix issue where Site fields were hidden when editing a VLAN group
* Fix issue where static query parameters with multiple values were not queried properly
* Allow clearing of assigned device type images
* Ensure consistent treatment of `BASE_PATH` for UI-driven API requests
* Fix styling of "decommissioned" label for circuits
* Fix CSV import file upload
* Fix issue where query parameters were duplicated across different forms of the same type
* Prevent obscuring "connect" pop-up for interfaces under device view
* Fix issue where select fields with `null_option` did not render or send the null option
* Set connection factory for django-redis when Sentinel is in use
* Fix issue where API-backed multi-select elements cleared selected options when adding new options
* Fix prefix (flat) template issue when viewing child prefixes with prefixes available
* Fix issue where selected fields with `null_option` set were not added to applied filters
* Allow unlimited API results when `MAX_PAGE_SIZE` is disabled

---

## v3.0.1 (2021-09-01)

### Bug Fixes

* Properly format JSON config object returned from a NAPALM device
* Fix exception when filtering by prefix max length in UI
* Fix exception when removing a primary IP from a device/VM
* Fix table configuration under prefix child object views
* Fix UI bug when a custom field has a space in the name
* Fix missing image previews
* Fix UI bug that did not properly request and handle paginated data
* Avoid exception when referencing invalid content type in table
* Correct labeling for VM memory attribute
* Fix KeyError exception when editing access VLAN on an interface
* Fix issue where hidden VLAN form fields were incorrectly included in the form submission
* Fix filtering of change log by content type
* Allow decimal input on length field when bulk editing cables
* Ensure API requests from the UI are aware of `BASE_PATH`
* Fix missing bulk edit buttons on Prefix IP Addresses table
* Multi-select custom field filters should employ exact match
* Home links should honor `BASE_PATH` configuration
* Enforce `MAX_PAGE_SIZE` for table and REST API pagination
* Fix incorrect "Map It" button URL on a site's physical address field
* Fix missing search button and search results in IP address assignment "Assign IP" tab
* Ensure human readability of exceptions raised during REST API requests
* Show bulk edit/delete actions for prefix child objects
* Remove "Global" placeholder for null VRF field
* Fix duplicate static query param values in API Select

---

## v3.0.0 (2021-08-30)

!!! warning "Existing Deployments Must Upgrade from v2.11"
    Upgrading an existing NetBox deployment to version 3.0 **must** be done from version 2.11.0 or later. If attempting to upgrade a deployment of NetBox v2.10 or earlier, first upgrade to a NetBox v2.11 release, and then upgrade from v2.11 to v3.0. This will avoid any problems with the database migration optimizations implemented in version 3.0. (This is not necessary for _new_ installations.)

### Breaking Changes

* Python 3.6 is no longer supported. NetBox v3.0 supports Python 3.7, 3.8, and 3.9.
* The secrets functionality present in prior releases of NetBox has been removed. The NetBox maintainers strongly recommend the adoption of Hashicorp Vault in place of this feature. Development of a NetBox plugin to replace the legacy secrets functionality is also underway.
* The default CSV export format for all objects now includes all available data from the object list. Additionally, the CSV headers now use human-friendly titles rather than raw field names. If backward compatibility with the old format is desired, export templates can be written to reproduce it.
* The `invalidate` management command (which clears cached database queries) is no longer needed and has been removed.
* Support for queryset caching configuration (`caching_config`) has been removed from the plugins API.
* The `cacheops_*` metrics have been removed from the Prometheus exporter.
* The `display_field` keyword argument has been removed from custom script ObjectVar and MultiObjectVar fields. These widgets will use the `display` value provided by the REST API.
* The deprecated `display_name` field has been removed from all REST API serializers. (API clients should reference the `display` field instead.)
* The redundant REST API endpoints for console, power, and interface connections have been removed. The same data can be retrieved by querying the respective model endpoints with the `?connected=True` filter applied.

### New Features

#### Updated User Interface

The NetBox user interface has been completely overhauled with a fresh new look! Beyond the cosmetic improvements, this initiative has allowed us to modernize the entire front end, upgrading from Bootstrap 3 to Bootstrap 5, and eliminating dependencies on outdated libraries such as jQuery and jQuery-UI. The new user interface also features a dark mode option.

#### GraphQL API

A new GraphQL API has been added to complement NetBox's REST API. GraphQL allows the client to specify which fields of the available data to return in each request. NetBox's implementation, which employs Graphene, also includes a user-friendly query interface known as GraphiQL.

Here's an example GraphQL request:

```
{
  circuit_list {
    cid
    provider {
      name
    }
    termination_a {
      id
    }
    termination_z {
      id
    }
  }
}
```

And the response:

```
{
  "data": {
    "circuit_list": [
      {
        "cid": "1002840283",
        "provider": {
          "name": "CenturyLink"
        },
        "termination_a": null,
        "termination_z": {
          "id": "23"
        }
      },
...
```

All GraphQL requests are made at the `/graphql` URL (which also serves the GraphiQL UI). The API is currently read-only, however users who wish to disable it until needed can do so by setting the `GRAPHQL_ENABLED` configuration parameter to False. For more detail on NetBox's GraphQL implementation, see the GraphQL API documentation.

#### IP Ranges

NetBox now supports modeling arbitrary IP ranges, which are defined by specifying a starting and ending IP address (e.g. to denote DHCP pools). Similar to prefixes, each IP range may optionally be assigned to a VRF and/or tenant, and can be assigned a functional role. An IP range must be assigned a status of active, reserved, or deprecated. The REST API implementation for this model also includes an "available IPs" endpoint which functions similarly to the endpoint for prefixes.

More information about IP ranges is available in the documentation.

#### Custom Model Validation

This release introduces the `CUSTOM_VALIDATORS` configuration parameter, which allows administrators to map NetBox models to custom validator classes to enforce custom validation logic. For example, the following configuration requires every site to have a name of at least ten characters and a description:

```python
from extras.validators import CustomValidator

CUSTOM_VALIDATORS = {
    'dcim.site': (
        CustomValidator({
            'name': {
                'min_length': 10,
            },
            'description': {
                'required': True,
            }
        }),
    )
}
```

CustomValidator can also be subclassed to enforce more complex logic by overriding its `validate()` method. See the custom validation documentation for more details.

#### SVG Cable Traces

Cable trace diagrams are now rendered as atomic SVG images, similar to rack elevations. These images are embedded in the UI and can be easily downloaded for use outside NetBox. SVG images can also be generated directly through the REST API, by specifying SVG as the render format for the `trace` endpoint on a cable termination:

```no-highlight
GET /api/dcim/interfaces/<ID>>/trace/?render=svg
```

The width of the rendered image in pixels may optionally be specified by appending the `&width=<width>` parameter to the request. The default width is 400px.

#### New Views for Models Previously Under the Admin UI

New UI views have been introduced to manage the following models:

* Custom fields
* Custom links
* Export templates
* Webhooks

These models were previously managed under the admin section of the UI. Moving them to dedicated views ensures a more consistent and convenient user experience.

#### REST API Token Provisioning

The new REST API endpoint `/api/users/tokens/` has been added, which includes a child endpoint for provisioning new REST API tokens using a username and password. This allows a user to gain REST API access without needing to first create a token via the web UI.

```
$ curl -X POST \
-H "Content-Type: application/json" \
-H "Accept: application/json; indent=4" \
https://netbox/api/users/tokens/provision/ \
--data '{
    "username": "hankhill",
    "password: "I<3C3H8",
}'
```

If the supplied credentials are valid, NetBox will create and return a new token for the user.

#### New Housekeeping Command

A new management command has been added: `manage.py housekeeping`. This command is intended to be run nightly via a system cron job. It performs the following tasks:

* Clear expired authentication sessions from the database
* Delete change log records which have surpassed the configured retention period (if configured)
* Check for new NetBox releases (if enabled)

A convenience script for calling this command via an automated scheduler has been included at `/contrib/netbox-housekeeping.sh`. Please see the housekeeping documentation for further details.

#### Custom Queue Support for Plugins

NetBox uses Redis and Django-RQ for background task queuing. Whereas previous releases employed only a single default queue, NetBox now provides a high-, medium- (default), and low-priority queue for use by plugins. (These will also likely be used internally as new functionality is added in future releases.)

Plugins can also now create their own custom queues by defining a `queues` list within their PluginConfig class:

```python
class MyPluginConfig(PluginConfig):
    name = 'myplugin'
    ...
    queues = [
        'queue1',
        'queue2',
        'queue-whatever-the-name'
    ]
```

Note that NetBox's `rqworker` process will _not_ service custom queues by default, since it has no way to infer the priority of each queue. Plugin authors should be diligent in including instructions for proper worker configuration in their plugin's documentation.

### Enhancements

* Add option to assign IP address upon creating a new interface
* Enable rendering export templates via REST API
* Add `color` field to front and rear ports
* Allow marking prefixes as fully utilized
* Remember user preference when toggling display of device images in rack elevations
* Add kilometer and mile as choices for cable length unit
* Allow decimal values for cable lengths
* Build and serve documentation locally

### Bug Fixes (from v3.0-beta2)

* Truncate global search dropdown on small screens
* Hide "create & add another" button for circuit terminations
* Fix styling of empty dropdown list under dark mode
* Global search bar should be full width on mobile
* Fix page focus on load
* Fix toggling of VLAN group scope selector fields
* Fix navigation menu rendering under Chrome

### Other Changes

* Remove the console/power/interface connections REST API endpoints
* Remove the secrets functionality from NetBox core
* Drop support for Python 3.6
* Drop support for `display_field` argument on ObjectVar
* Drop support for legacy static CSV export
* Decimal fields are no longer coerced to strings in REST API
* Optimize database migrations
* Drop support for queryset caching (django-cacheops)
* Checking for new releases is now done as part of the housekeeping routine
* Add support for Python 3.9

### Configuration Changes

* The `CACHE_TIMEOUT` configuration parameter has been removed.
* The `RELEASE_CHECK_TIMEOUT` configuration parameter has been removed.

### REST API Changes

* Removed all endpoints related to the secrets functionality:
    * `/api/secrets/generate-rsa-key-pair/`
    * `/api/secrets/get-session-key/`
    * `/api/secrets/secrets/`
    * `/api/secrets/secret-roles/`
* Removed the following "connections" endpoints:
    * `/api/dcim/console-connections/`
    * `/api/dcim/power-connections/`
    * `/api/dcim/interface-connections/`
* Added the `/api/ipam/ip-ranges/` endpoint
* Added the `/api/users/tokens/` endpoint
    * The `provision/` child endpoint can be used to provision new REST API tokens by supplying a valid username and password
* dcim.Cable
    * `length` is now a decimal value
* dcim.Device
    * Removed the `display_name` attribute (use `display` instead)
* dcim.DeviceType
    * Removed the `display_name` attribute (use `display` instead)
* dcim.FrontPort
    * Added `color` field
* dcim.FrontPortTemplate
    * Added `color` field
* dcim.Rack
    * Removed the `display_name` attribute (use `display` instead)
* dcim.RearPort
    * Added `color` field
* dcim.RearPortTemplate
    * Added `color` field
* dcim.Site
    * `latitude` and `longitude` are now decimal fields rather than strings
* extras.ContentType
    * Removed the `display_name` attribute (use `display` instead)
* ipam.Prefix
    * Added the `mark_utilized` boolean field
* ipam.VLAN
    * Removed the `display_name` attribute (use `display` instead)
* ipam.VRF
    * Removed the `display_name` attribute (use `display` instead)
* virtualization.VirtualMachine
    * `vcpus` is now a decimal field rather than a string
=== END FILE ===

**Version 2.11**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.11/
=== BEGIN FILE ===
# NetBox v2.11

## v2.11.12 (2021-08-23)

### Enhancements

* Add site group filter to devices list
* Recognize a /32 IPv4 address as a child of a /32 IPv4 prefix
* Add table configuration button to child prefixes view
* Introduce `LOGIN_PERSISTENCE` configuration parameter to persist user sessions
* Add search field to VM interfaces filter form

### Bug Fixes

* Model forms should save empty custom field values as null
* Enable filtering assigned VLANs by group in interface edit form
* Force assignment of null custom field values to objects
* Fix erroneous webhook dispatch on failure to save objects
* Show contextual label for IP address role
* Fix hidden "add components" dropdown on devices list

---

## v2.11.11 (2021-08-12)

### Enhancements

* Add C21 & C22 power types
* Employ a sandbox when rendering Jinja2 code for increased security

### Bug Fixes

* Add import button to VM interfaces list
* Fix validation of unit ranges when creating a rack reservation
* Fix validation of IP address assigned as device/VM primary via NAT relation
* Populate device field when cloning device components
* Allow assignment of scope to VLAN groups upon import
* Remove extraneous `site` column from VLAN group import form
* Fix exception on invalid CSV import column name
* Fix return URL persistence when adding multiple objects sequentially
* Remove extraneous columns from inventory item and device bay tables
* Add missing `parent` column to inventory item import form

---

## v2.11.10 (2021-07-28)

### Enhancements

* Enable CSV import via uploaded file
* Add 6P/4P pass-through port types
* Add count of inventory items to manufacturer view
* Add "hardwired" type for power port types

### Bug Fixes

* Fix assignment of permissions based on LDAP groups
* Fix filtering of interface connections list
* Fix assignment of parent interfaces for bulk import
* Add missing `display` field to rack unit serializer
* Fix A/Z assignment when swapping circuit terminations
* Fix default value validation for custom text fields
* Rack reservation should display rack's location
* Include rack location in navigation breadcrumbs
* Fix device name display on device status view
* Limit reported prefix utilization to 100%
* Use consistent maximum value for interface MTU

### Other Changes

* Database query caching is now disabled by default

---

## v2.11.9 (2021-07-08)

### Bug Fixes

* API schema type should be boolean for `_occupied` on cable termination models
* Fix assignment of VM interface parent via REST API
* Fix rendering of device type component creation forms

---

## v2.11.8 (2021-07-06)

### Enhancements

* Annotate short date & time fields with their longer form
* Add an `empty` filter modifier for character fields
* Add rack reservations to global search
* Enable virtual chassis assignment during bulk import of devices
* Show assigned VMs count under device role view
* Show management-only status under interface detail view
* Display VM memory as GB/TB as appropriate

### Bug Fixes

* Fix site field on VM search form; add site group
* Fix group assignment in "available VLANs" link under VLAN group view
* Disallow numeric values in custom text fields
* Fix exception when adding components in bulk to multiple devices
* Fix device/VM counts per cluster under cluster type/group views
* Allow setting custom field values for VM interfaces on initial creation
* Fix exception when importing device type with invalid front port definition

---

## v2.11.7 (2021-06-16)

### Enhancements

* Permit /32 IPv4 and /128 IPv6 prefixes
* Show change log diff for non-atomic (pre-2.11) changes
* Add N connector type for pass-through ports
* Add support for webp files as front/rear device type images
* Standardize breadcrumb navigation for power panels and feeds

### Bug Fixes

* ProviderNetwork search should match on name
* Disable ordering of secrets by assigned object
* Fix filtering by location for cable connection forms
* Fix ordering of nested inventory items
* Fix deletion of devices with cables attached

---

## v2.11.6 (2021-06-04)

### Bug Fixes

* Fix migration error when upgrading with VRF(s) defined

---

## v2.11.5 (2021-06-04)

**NOTE:** This release includes a database migration that calculates and annotates prefix depth. It may impose a noticeable delay on the upgrade process: Users should anticipate roughly one minute of delay per 100 thousand prefixes being updated.

### Enhancements

* Improved prefix hierarchy rendering
* Add location filter to cable connection form
* Expose prefix depth and children on REST API serializer
* Support Markdown for report descriptions
* Add a "flat" column to the prefix table

### Bug Fixes

* Fix object permission assignments for user and group models
* Disallow passing of string values for integer custom fields
* Avoid sending redundant webhooks when adding/removing tags
* Correct tag population in post-change data resulting from REST API changes
* Fix upgrade script when Python installed in nonstandard path
* Correct permissions evaluation for running a report via the REST API
* Fix assignment of user when creating rack reservations via REST API
* Paginate related IPs table under IP address view

---

## v2.11.4 (2021-05-25)

### Enhancements

* Add content type filters for tags
* Add search field for VLAN groups
* Add `description` filter for IP addresses
* Add cyan color choice for plugin buttons
* Enable filtering users by group under admin UI
* Improve UI paginator to optimize page object count

### Bug Fixes

* Fix assignment of VLAN groups to clusters, cluster groups via REST API
* Avoid exception when deleting device connected to self via circuit
* Allow assigning virtual chassis member interfaces to LAG on VC master
* Fix missing descriptions and label for device type imports and exports
* Fix typo in installed plugins REST API endpoint
* Fix access to metrics on custom `BASE_PATH` when login is required
* Disable ordering VLAN groups list by scope object

---

## v2.11.3 (2021-05-07)

### Enhancements

* Introduced `SESSION_COOKIE_NAME` config parameter
* Add OM5 MMF cable type
* Add aggregates count to tenant view
* Enable custom links for organizational and nested group models

### Bug Fixes

* Fix display of available VLAN ranges under VLAN group view
* Fix linking of available VLANs in VLAN group view
* Restrict parent VM interface assignment to the parent VM
* Interface device filter should return all virtual chassis interfaces only if device is master
* Fix device type instance count under manufacturer view
* Restore "add an IP" button under prefix IPs view
* Fix filtering of circuit terminations by primary key
* Improve ordering of interfaces when viewing virtual chassis master
* Include first & last IP addresses when allocating available IPv6 addresses via the REST API
* Fix caching error when swapping A/Z circuit terminations
* Fix ProviderNetwork nested API serializer
* Correct pre-population of cluster group when creating a cluster
* Fix interface assignment for VLANs in non-scoped groups

---

## v2.11.2 (2021-04-27)

### Enhancements

* Linkify rack, device counts on locations list
* Note device locations on cable traces
* Add option to clear assigned max length filter on prefixes list

### Bug Fixes

* Journal entry title should account for configured timezone
* Permit full-length descriptions when creating device components and VM interfaces
* Fix table column reconfiguration under Chrome
* Fix assignment of console port speed values above 19.2kbps
* Disable ordering of space column in racks table
* Fix parent assignment for SiteGroup API serializer
* Support filtering by created/updated time for all relevant objects
* Fix cable tracing API endpoint for circuit terminations
* Fix assignment of VC member interfaces to LAG interfaces

---

## v2.11.1 (2021-04-21)

### Enhancements

* Enable ordering of device component tables
* Enable natural ordering for virtual machines
* Add ability to search for locations by name or description
* Allow filtering devices with no location assigned
* Include child locations on location view

### Bug Fixes

* Fix parent object table column in prefix IP addresses list
* Support custom field filtering for regions, site groups, and locations
* Fix object list display for users with read-only permissions
* Restore tenancy section in virtual machine form

---

## v2.11.0 (2021-04-16)

**Note:** NetBox v2.11 is the last major release that will support Python 3.6. Beginning with NetBox v3.0, Python 3.7 or later will be required.

### Breaking Changes

* All objects now use numeric IDs in their UI view URLs instead of slugs. You may need to update external references to NetBox objects. (Note that this does _not_ affect the REST API.)
* The UI now uses numeric IDs when filtering object lists. You may need to update external links to filtered object lists. (Note that the slug- and name-based filters will continue to work, however the filter selection fields within the UI will not be automatically populated.)
* The RackGroup model has been renamed to Location. Its REST API endpoint has changed from `/api/dcim/rack-groups/` to `/api/dcim/locations/`.
* The foreign key field `group` on dcim.Rack has been renamed to `location`.
* The foreign key field `site` on ipam.VLANGroup has been replaced with the `scope` generic foreign key.
* Custom script ObjectVars no longer support the `queryset` parameter: Use `model` instead.

### New Features

#### Journaling Support

NetBox now supports journaling for all primary objects. The journal is a collection of human-generated notes and comments about an object maintained for historical context. It supplements NetBox's change log to provide additional information about why changes have been made or to convey events which occur outside NetBox. Unlike the change log, in which records typically expire after some time, journal entries persist for the life of the associated object.

#### Parent Interface Assignments

Virtual device and VM interfaces can now be assigned to a "parent" interface by setting the `parent` field on the interface object. This is helpful for associating subinterfaces with their physical counterpart.

#### Pre- and Post-Change Snapshots in Webhooks

Outgoing webhooks now include both pre- and post-change representations of the modified object.

#### Mark as Connected Without a Cable

Cable termination objects can now be marked as "connected" without actually attaching a cable.

#### Allow Assigning Devices to Locations

Devices can now be assigned to locations (formerly known as rack groups) within a site without needing to be assigned to a particular rack.

#### Dynamic Object Exports

Users now have the option of selecting the "current view" when exporting a list of objects in NetBox.

#### Variable Scope Support for VLAN Groups

A VLAN group can now be assigned to a region, site group, site, location, or rack.

#### New Site Group Model

This release introduces the new SiteGroup model, which can be used to organize sites.

#### Improved Change Logging

The ObjectChange model now explicitly records the pre-change and post-change state of each object.

#### Provider Network Modeling

A new provider network model has been introduced to represent the boundary of a network that exists outside the scope of NetBox.

### Enhancements

* Allow assigning config contexts by device type
* Add support for custom fields in tables
* Extend custom field support to organizational models
* Add `speed` attribute to console port models
* Extend custom field support to device component models
* Create separate tabs for VMs and devices under the cluster view
* Add support for multiple-selection custom fields
* Add REST API endpoint for custom links
* Add REST API endpoint for webhooks
* Add unique identifier to every object view
* Add `as_attachment` to ExportTemplate to control download behavior
* Filter custom fields by content type in format `<app_label>.<model>`
* Add `display` field to all REST API serializers
* Use primary keys when filtering object lists by related objects in the UI
* Rename RackGroup to Location
* Add `created` and `last_updated` fields to device component models
* Add dedicated views for organizational models
* Enable bulk editing for organizational models
* Allow partial (decimal) vCPU allocations for virtual machines
* Paginate component tables under device views
* Include tagged objects list on tag view
* Improved table configuration form
* Redirect old slug-based object views
* Add locations count to home page
* Add bulk disconnect support for power feeds
* Support image attachments for locations

### Bug Fixes (from v2.11-beta1)

* Eliminate redundant change records when adding/removing tags
* Fix VM interfaces table "add interfaces" link
* Fix location column on racks table
* Hide checkboxes for VMs under cluster VMs view
* Allow assigning a virtual interface as the parent of an existing interface
* Fix rack selection field on device form
* Fix handling of TemplateColumn values for table export
* Prevent device from being assigned to mismatched site and location
* Location `parent` filter should return all child locations
* Improve display of assigned models in custom fields list
* Fix admin links for plugins, background tasks
* Fix display of horizontally-scrolling object lists
* Fix assigned device/VM count when bulk editing/deleting device roles
* Correct position of MAC address field when creating VM interfaces
* Prevent VM interface from being assigned as its own parent

### Other Changes

* Migrate all primary keys to 64-bit integers
* Use numeric IDs in all object URLs
* Deprecated support for Python 3.6
* Dropped backward compatibility for `queryset` parameter on ObjectVar and MultiObjectVar (use `model` instead)
* Moved the virtual machine interfaces list to a separate view
* Cable traces now traverse circuits

### REST API Changes

* All primary keys are now 64-bit integers
* All model serializers now include a `display` field
* Added support for custom fields to all device components and organizational models
* Renamed RackGroup to Location
* Added the `provider_network` field to circuits.CircuitTermination
* Added the `/api/circuits/provider-networks/` endpoint
* Added the `location` field to dcim.Device
* Added the `parent` field to dcim.Interface
* Renamed `rack_group` field to `location` in dcim.PowerPanel
* Renamed `group` field to `location` in dcim.Rack
* Added the `group` foreign key field to SiteGroup
* Added the `site_groups` many-to-many field to extras.ConfigContext
* Added new custom field type: `multi-select`
* Added the `/api/extras/custom-links/` endpoint
* Added the `prechange_data` field to extras.ObjectChange
* Added the `/api/extras/webhooks/` endpoint
* Added the `scope_type`, `scope_id`, and `scope` fields to ipam.VLANGroup
* Changed `vcpus` from an integer to a decimal value in virtualization.VirtualMachine
* Added the `parent` field to virtualization.VMInterface
=== END FILE ===

**Version 2.10**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.10/
=== BEGIN FILE ===
# NetBox v2.10

## v2.10.10 (2021-04-15)

### Enhancements

* Add DC terminal power port, outlet types
* Add Saf-D-Grid power port, outlet types
* Support Markdown rendering for report logs
* Add F connector port type
* Add SFP56 50GE interface type

### Bug Fixes

* Update parent device/VM when deleting a primary IP
* Fix VLAN assignment when editing VM interfaces in bulk
* Update object data when renaming a custom field
* Optimize change log cleanup
* Fix MAC address field display in VM interfaces search form
* Fix custom field filtering for cables, virtual chassis
* Fix choice field filters (multiple models)

---

## v2.10.9 (2021-04-12)

### Enhancements

* Add MAC address search field to VM interfaces list
* Omit child devices from non-racked devices list under rack view
* Add column to cable termination objects to display cable color
* Display NAPALM-enabled device tabs only when relevant
* Support disabling TLS certificate validation for Redis

### Bug Fixes

* Fix missing custom field filters for cables, rack reservations
* Add missing `count_ipaddresses` attribute to VMInterface serializer
* Permit users to manage their own REST API tokens without needing explicit permission
* Fix interface connections REST API endpoint
* Support colons in webhook header values
* Do not infer tenant assignment from parent objects for prefixes, IP addresses
* Handle exception when attempting to assign an MPTT-enabled model as its own parent
* Correct handling of boolean fields when cloning objects

---

## v2.10.8 (2021-03-26)

### Bug Fixes

* Fix exception on cable trace in UI (regression from #5650)

---

## v2.10.7 (2021-03-25)

### Enhancements

* Allow filtering device components by label
* Allow customization of the geographic mapping service via `MAPS_URL` config parameter
* Allow changing site assignment when bulk editing devices
* Support Markdown rendering for custom script descriptions
* Add UI search fields for asset tag for devices and racks

### Bug Fixes

* Restore ability to delete an uploaded device type image
* Denote when the total length of a cable trace may exceed the indicated value
* Ensure consistent display of change log action labels
* Skip Markdown reference link when tabbing through form fields
* Correct validation of `RELEASE_CHECK_URL` config parameter
* Fix VLAN group/site association for bulk prefix import
* Eliminate duplicate virtual chassis search results
* Pre-populate attributes when creating an available child prefix via the UI
* Fix display of bottom banner with uBlock Origin enabled

---

## v2.10.6 (2021-03-09)

### Enhancements

* Add IP addresses count to VRF view
* Add QSFP+ (64GFC) FibreChannel Interface option
* Enable custom links for device components
* Add edit/delete buttons for IP addresses on interface view
* Add button to add a new IP address on interface view

### Bug Fixes

* Fix VRF and Tenant field population when adding IP addresses from prefix
* Enable ordering of virtual machines by primary IP address
* Ordering of devices by primary IP should respect `PREFER_IPV4` configuration parameter
* Fix options for filtering object permissions in admin UI
* Fix filtering prefixes list by multiple prefix values
* Invalidate cached queries when running `renaturalize`

---

## v2.10.5 (2021-02-24)

### Bug Fixes

* Fix site unassignment from VLAN when using "None" option
* Fix REST API representation for circuit terminations connected to non-interface endpoints
* Fix filtering rack reservations by custom field
* Fix bulk editing of services when no port(s) are defined
* Ensure consistent treatment of duplicate IP addresses
* Fix redirect to device components view after disconnecting a cable
* Fix Redis Sentinel password application for caching
* Allow setting null tenant group on tenant via REST API
* Disallow the creation of available prefixes/IP addresses in violation of assigned permission constraints

---

## v2.10.4 (2021-01-26)

### Enhancements

* Show cable trace lengths in both meters and feet
* Add "management only" filter widget for interfaces list
* Allow filtering virtual chassis by name and master
* Add GG45 and TERA port types, and CAT7a and CAT8 cable types
* Show available type choices for all device component import forms

### Bug Fixes

* Correct swagger definition for ip_prefixes_available-ips_create API
* Restrict the creation of device bay templates on non-parent device types
* Restore power utilization panel under device view
* Fix ordering devices by primary IP address
* Fix display of white cables in trace view
* Fix filtering connection lists by device name
* Fix permissions assessment when adding VM interfaces in bulk
* Include VC member interfaces on interfaces tab count when viewing VC master
* Validate rack group is assigned to same site when creating a rack
* Correct rack elevation displayed when viewing a reservation

---

## v2.10.3 (2021-01-05)

### Bug Fixes

* Add check for LLDP neighbor chassis name to lldp_neighbors
* Fix misleading error when racking a device with invalid parameters
* Update child objects when a rack group is moved to a new site
* Fix persistent vertical scrollbar
* Fix bulk editing of objects with required custom fields
* Fix exception when viewing a provider with one or more tags assigned
* Fix rendering of config contexts with cluster assignment for devices
* Add custom field bulk edit support for cables, power panels, rack reservations, and virtual chassis
* Add custom field bulk import support for cables, power panels, rack reservations, and virtual chassis
* Restore missing import button on services list
* Fix VRF route target assignment via REST API
* Fix regex validation support for custom URL fields
* Fix power feed cable trace link
* Raise validation error if a power port template's `allocated_draw` exceeds its `maximum_draw`
* Ensure consistent labeling of interface `mgmt_only` field
* Report inconsistent values when migrating custom field data

---

## v2.10.2 (2020-12-21)

### Enhancements

* Add filters for type and width to racks list
* Add form field to filter rack reservation by user

### Bug Fixes

* Require plugin authors to set zip_safe=False
* Fix unlocking secrets from device/VM view
* Fix alignment of rack names in elevations list
* Fix display of route target description
* Fix "tagged" indication in VLAN members list
* Optimize retrieval of config context data for device/VM REST API views
* Support filtering rack type/width with multiple values
* Fix caching error when viewing cable trace after toggling cable status
* Fix filtering rack reservations by username
* Fix filtering of displayed device/VM interfaces by regex
* Fix custom field data assignment via UI for IP addresses, secrets
* Fix filtering by boolean custom fields

---

## v2.10.1 (2020-12-15)

### Bug Fixes

* Don't force overwriting of boolean fields when bulk editing interfaces
* API serializer foreign count fields do not have a default value
* Correct change log representation when creating a cable
* Creating a component template throws an exception
* Rack Elevations throw reverse match exception
* Back-to-back Circuit Termination throws AttributeError exception
* Correct return URL when disconnecting a cable from a device
* Fix validation for required custom fields
* Fix exception when making `OPTIONS` request for a REST API list endpoint

---

## v2.10.0 (2020-12-14)

**NOTE:** This release completely removes support for embedded graphs.

**NOTE:** The Django templating language (DTL) is no longer supported for export templates. Ensure that all export templates use Jinja2 before upgrading.

### New Features

#### Route Targets

This release introduces support for modeling L3VPN route targets, which can be used to control the redistribution of advertised prefixes among VRFs. Each VRF may be assigned one or more route targets in the import and/or export direction. Like VRFs, route targets may be assigned to tenants and support tag assignment.

#### REST API Bulk Deletion

The REST API now supports the bulk deletion of objects of the same type in a single request. Send a `DELETE` HTTP request to the list to the model's list endpoint (e.g. `/api/dcim/sites/`) with a list of JSON objects specifying the numeric ID of each object to be deleted.

#### REST API Bulk Update

Similar to bulk deletion, the REST API also now supports bulk updates. Send a `PUT` or `PATCH` HTTP request to the list to the model's list endpoint (e.g. `/api/dcim/sites/`) with a list of JSON objects specifying the numeric ID of each object and the attribute(s) to be updated.

#### Reimplementation of Custom Fields

NetBox v2.10 introduces a completely overhauled approach to custom fields. Custom field data is now stored directly on each model instance as JSON data and may be accessed using the `cf` property.

#### Improved Cable Trace Performance

All end-to-end cable paths are now cached using the new CablePath backend model. This allows NetBox to now immediately return the complete path originating from any endpoint directly from the database.

### Enhancements

* Add min/max value and regex validation for custom fields
* Allow assignment of secrets to virtual machines
* Allow assignment of inventory items to parent items in web UI
* Support the use of multiple port numbers when defining a service
* Allow filtering by content type identified as `<app>.<model>` string
* Add a REST API endpoint which returns NetBox's current operational status
* Include inventory items on primary device view
* Support tenant assignment for aggregates
* CSV import now accepts slug values for choice fields
* Add custom field support for cables, power panels, rack reservations, and virtual chassis
* The web interface now consumes the entire browser window
* Add REST API support for custom fields
* Show options for cable endpoint types during bulk import
* Include cable tags in trace view

### Other Changes

* Enable MPTT for InventoryItem hierarchy
* Switched from Font Awesome/Glyphicons to Material Design icons
* Dropped support for embedded graphs
* Dropped support for the Django template language from export templates
* `commit` argument is now required argument in a custom script's `run()` method
* Standardized name field lengths across all models
* Omit utilization statistics from RIR list
* Circuit termination port speed is now an optional field

### REST API Changes

* Added support for `PUT`, `PATCH`, and `DELETE` operations on list endpoints (bulk update and delete)
* Added the `/extras/content-types/` endpoint for Django ContentTypes
* Added the `/extras/custom-fields/` endpoint for custom fields
* Removed the `/extras/_custom_field_choices/` endpoint (replaced by new custom fields endpoint)
* Added the `/status/` endpoint to convey NetBox's current status
* circuits.CircuitTermination:
    * Added the `/trace/` endpoint
    * Replaced `connection_status` with `connected_endpoint_reachable` (boolean)
    * Added `cable_peer` and `cable_peer_type`
    * `port_speed` may now be null
* dcim.Cable: Added `custom_fields`
* dcim.ConsolePort:
    * Replaced `connection_status` with `connected_endpoint_reachable` (boolean)
    * Added `cable_peer` and `cable_peer_type`
* dcim.ConsoleServerPort:
    * Replaced `connection_status` with `connected_endpoint_reachable` (boolean)
    * Added `cable_peer` and `cable_peer_type`
* dcim.FrontPort:
    * Replaced the `/trace/` endpoint with `/paths/`, which returns a list of cable paths
* dcim.Interface:
    * Replaced `connection_status` with `connected_endpoint_reachable` (boolean)
    * Added `cable_peer` and `cable_peer_type`
* dcim.InventoryItem: The `_depth` field has been added to reflect MPTT positioning
* dcim.PowerFeed:
    * Added the `/trace/` endpoint
    * Added fields `connected_endpoint`, `connected_endpoint_type`, `connected_endpoint_reachable`, `cable_peer`, and `cable_peer_type`
* dcim.PowerOutlet:
    * Replaced `connection_status` with `connected_endpoint_reachable` (boolean)
    * Added `cable_peer` and `cable_peer_type`
* dcim.PowerPanel: Added `custom_fields`
* dcim.PowerPort
    * Replaced `connection_status` with `connected_endpoint_reachable` (boolean)
    * Added `cable_peer` and `cable_peer_type`
* dcim.RackReservation: Added `custom_fields`
* dcim.VirtualChassis: Added `custom_fields`
* extras.ExportTemplate: The `template_language` field has been removed
* extras.Graph: This API endpoint has been removed
* extras.ImageAttachment: Filtering by `content_type` now takes a string in the form `<app>.<model>`
* extras.ObjectChange: Filtering by `changed_object_type` now takes a string in the form `<app>.<model>`
* ipam.Aggregate: Added `tenant` field
* ipam.RouteTarget: New endpoint
* ipam.Service: Renamed `port` to `ports`; now holds a list of one or more port numbers
* ipam.VRF: Added `import_targets` and `export_targets` fields
* secrets.Secret: Removed `device` field; replaced with `assigned_object` generic foreign key.
=== END FILE ===

**Version 2.9**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.9/
=== BEGIN FILE ===
# NetBox v2.9

## v2.9.11 (2020-12-11)

### Enhancements

* Allow passing Python code to `nbshell` using `--command`
* Add CS and SN fiber port types

### Bug Fixes

* Fix setting user password via REST API
* Fix uniqueness constraint for virtual machine names
* Fix error when rendering config contexts with multiple tags
* Add direct link to secret on secrets list
* Fix updating secrets without setting new plaintext
* Restore tags field on cable connection forms
* Exclude SVG files from front/rear image upload for device types
* Show assigned IP addresses in interfaces list
* Fix validation for plugin version and required settings

---

## v2.9.10 (2020-11-24)

### Enhancements

* Add USB types for power ports and outlets
* Add "splice" type for pass-through ports

### Bug Fixes

* Fix exception when editing IP address with a NAT IP assigned to a non-racked device
* Avoid extraneous database queries when manipulating objects
* Fix non-deterministic ordering of prefixes and IP addresses
* Filter available racks by selected group when creating a rack reservation
* Limit rack groups by selected site when editing a rack
* Populate manufacturer field when adding a device component template
* Clear VLAN assignments when setting interface mode to none

---

## v2.9.9 (2020-11-09)

### Enhancements

* Return server error messages as JSON for REST API requests
* Link to rack groups within rack list table
* Be more strict when capturing anticipated ImportError exceptions

### Bug Fixes

* Fix auto-population of region field when editing a device
* Fix config context rendering with multiple tags
* Dry running scripts should not trigger webhooks
* Add missing template extension tags for plugins for VM interface view
* Fix CreatedUpdatedFilterTest in non-UTC timezone
* Fix filtering of sites by null region

---

## v2.9.8 (2020-10-30)

### Enhancements

* Improve device/VM context data rendering performance

### Bug Fixes

* Fix caching issue causing incorrect related object counts in API responses
* Fix incorrect caching of permission object assignments to user groups
* Redirect user to appropriate tab after modifying device components
* Fix exception when validating a new permission with no models selected
* Fix high CPU load when LDAP authentication is enabled
* Plugins no longer need to define `app_name` for API URLs

---

## v2.9.7 (2020-10-12)

### Bug Fixes

* Fix KeyError exception when viewing object with custom link and debugging is disabled

---

## v2.9.6 (2020-10-09)

### Bug Fixes

* Fix AttributeError exception when LDAP authentication is enabled

---

## v2.9.5 (2020-10-09)

### Enhancements

* Extend available context data when rendering custom links

### Bug Fixes

* Populate site vlan list when bulk editing interfaces
* Ensure consistent alignment of rack elevations
* Fix toggling of rack elevation order
* Fix missing Power Utilization
* Limit duplicate IPs shown on IP address view
* Change default LDAP logging to INFO
* Fix missing querystring when bulk editing/deleting VLAN Group VLANs
* Apply user pagination preferences to all paginated object lists
* Add missing `has_primary_ip` filter for virtual machines
* Prevent erroneous removal of prefetched GenericForeignKey data
* Raise validation error if a power port's `allocated_draw` exceeds its `maximum_draw`
* Fix API patch request against IP Address endpoint with null assigned_object_type 
* Fix bulk component creation for virtual machines
* Don't allow a rear port to have fewer positions than mapped front ports
* Custom choice fields should be blank initially if no default choice has been designated

---

## v2.9.4 (2020-09-23)

**NOTE:** This release removes support for the `DEFAULT_TIMEOUT` parameter under `REDIS`. Set `RQ_DEFAULT_TIMEOUT` instead.

### Enhancements

* Toggle order in which rack elevations are displayed
* Increase maximum rear port positions from 64 to 1024
* Display full hierarchy in breadcrumbs for sites/racks
* Add rack group field to device edit form
* Show total rack count per rack group under site view
* Introduce the `RQ_DEFAULT_TIMEOUT` configuration parameter

### Bug Fixes

* Fix potential failure on `0016_replicate_interfaces` schema migration
* Update `view_reportresult` to `view_report` permission
* Include a VLAN membership view for VM interfaces
* Validation should fail when reassigning a primary IP from device to VM
* Fix representation of custom choice field values for webhook data
* Fix execution of reports via CLI
* Allow use of tuples when specifying ObjectVar `query_params`
* Specifying an empty list of tags should clear assigned tags
* Fix disassociation of an IP address from a VM interface
* Fix exception when bulk editing interface 802.1Q mode
* Add missing "add" button to rack reservations list
* Support filtering ObjectChanges by multiple users

---

## v2.9.3 (2020-09-04)

### Enhancements

* Redirect authenticated users from login view
* Show the device/VM name when editing a component
* Add REST API filters for image attachments
* Add 8P6C, 8P4C, 8P2C port types

### Bug Fixes

* Disabled plugin menu items are no longer clickable
* Fix "add device" link in rack elevations for opposite side of half-depth devices
* Fix inclusion of VC member interfaces when viewing VC master
* Fix assignment of existing IP addresses to interfaces via web UI
* Fix exception during webhook processing with custom select field
* Fix ordering by assignment in IP addresses table
* Restore label field when editing console server ports, power ports, and power outlets
* Redirect to device view after editing component
* Fix status display for console/power/interface connections
* Avoid KeyError when handling invalid table preferences
* Show assigned prefixes in VLANs list

---

## v2.9.2 (2020-08-27)

### Enhancements

* Add tags column to device/VM component list tables
* Add interface and parent columns to IP address list

### Bug Fixes

* Fix ordering of rack reservations with identical creation times
* Correct OpenAPI definition for `available-prefixes` endpoint
* Fix exception when modifying an IP address assigned to a VM
* Fix validation of primary IPs assigned to virtual machines
* Limit SLAAC status to IPv6 addresses
* Fix form tabs when assigning an IP to a VM interface
* Fix display of SLAAC label for IP addresses status
* Allow assignment of interfaces to non-master VC peer LAG during import
* Correct URL for front rack elevation images when using external storage
* Fix inclusion of checkboxes for interfaces in virtual machine view
* Fix validation when bulk-importing child devices
* Allow adding/removing tags when bulk editing virtual machine interfaces

---

## v2.9.1 (2020-08-22)

### Enhancements

* Add IP address status type for SLAAC
* Allow nested LAG interfaces
* Add Python and NetBox versions to error page
* Support backward compatibility for `REMOTE_AUTH_BACKEND` configuration parameter

---

## v2.9.0 (2020-08-21)

**Note:** Redis 4.0 or later is required.

### New Features

#### Object-Based Permissions

NetBox v2.9 replaces Django's built-in permissions framework with one that supports object-based assignment of permissions using arbitrary constraints.

#### Background Execution of Scripts & Reports

Execution of reports or custom scripts is queued for background processing, preventing timeout errors.

#### Named Virtual Chassis

The VirtualChassis model now has a mandatory `name` field.

#### Changes to Tag Creation

Tags must be created by a user before being applied to any object.

#### Dedicated Model for VM Interfaces

A new model represents virtual machine interfaces.

#### REST API Endpoints for Users and Groups

New endpoints facilitate retrieval and manipulation of users and groups.

### Enhancements

* Add `label` field for all device components
* Improve performance of web UI prefixes list
* Add tagging for cables, power panels, and rack reservations
* Add dedicated views for all device components
* Add bulk rename capability for console and power ports
* Add `description` field to device component templates
* Add bulk disconnect capability for console and power ports
* Add a `url` field to all API serializers
* Add bulk edit ability for device bay templates
* Standardize device/VM component `name` field to 64 characters
* Use dynamic form widget for relationships to MPTT objects
* Enable change logging for config contexts
* Add MultiChoiceVar for custom scripts
* Add an `occupied` field to rack unit representations
* Add a user-friendly 403 error page
* Replace secret role user/group assignment with object permissions
* Extended ObjectVar to allow filtering API query
* Add `cable` attribute to PowerFeed API serializer
* The browsable API now lists available endpoints alphabetically
* List available options for choice fields within CSV import forms

### Configuration Changes

* Update `REMOTE_AUTH_BACKEND` for NetBox's built-in remote authentication backend.
* Set `REMOTE_AUTH_BACKEND` for LDAP authentication.
* `REMOTE_AUTH_DEFAULT_PERMISSIONS` now takes a dictionary rather than a list.
* Backward compatibility for the old `webhooks` Redis queue name has been dropped.

### REST API Changes

* Added new endpoints for users, groups, and permissions.
* A `url` field is now included on all object representations.
* The `tags` field now includes a more complete representation of each tag.
* Legacy numeric values for choice fields are no longer conveyed or accepted.

### Other Changes

* A new model, `VMInterface`, has been introduced.
* The `secrets.activate_userkey` permission no longer exists.
* The `users.delete_token` permission is no longer enforced.
* Dropped backward compatibility for the `webhooks` Redis queue configuration.
* Virtual chassis are now created by navigating to `/dcim/virtual-chassis/add/`.
=== END FILE ===

**Version 2.8**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.8/
=== BEGIN FILE ===
# NetBox v2.8

## v2.8.9 (2020-08-04)

### Enhancements

* Add MAC address search field to interfaces list
* Add MAC address column to interfaces table

### Bug Fixes

* Fix ordering of prefixes beneath aggregate when available space is hidden
* Fix documentation for image attachments
* Fix labels for sites in staging or decommissioning status
* Fix removal of tagged VLANs if not assigned in bulk interface editing
* Don't disable NAPALM tabs when device has no primary IP
* Fix display of device/VM counts on platforms list
* Force UTF-8 encoding when embedding model documentation
* Unpin redis dependency to fix exception in RQ worker
* Fix ordering of VM interfaces in REST API endpoint
* Fix validation error when updating an existing secret
* Correct log message when creating a new object

---

## v2.8.8 (2020-07-21)

### Enhancements

* Improve handling of plugin loading errors
* Add NEMA 15 power port and outlet types
* Allow NAPALM to resolve device name when primary IP is not set
* Add staging and decommissioning statuses for sites

### Bug Fixes

* Correct OpenAPI definition for available-prefixes endpoint
* Ensure consistent display of non-racked and child devices on rack view
* Return IP family (4 or 6) as integer rather than string
* Restrict group options by selected site when bulk editing VLANs
* Support passing multiple initial values for multiple choice fields
* Fix rack power utilization display for racks without devices
* Show locally connected peer on circuit terminations
* Redirect user back to circuit after connecting a termination
* Enable filtering virtual machine interfaces by tag

---

## v2.8.7 (2020-07-02)

### Enhancements

* Introduce configuration parameters for default rack elevation size
* Allow changing page size when displaying only a single page of results

### Bug Fixes

* Expose cable termination type choices in OpenAPI spec
* Relax connection constraints for multi-position rear ports
* Fix redirect after login when `next` is not specified
* Fix add/remove tag population when bulk editing objects
* Fix "brief" format for the secrets REST API endpoint
* Fix exception when deleting a device with device bays
* Allow selecting an alternate device type when creating component templates

---

## v2.8.6 (2020-06-15)

### Enhancements

* Improve display of template code for object in admin UI
* Introduce `ALLOWED_URL_SCHEMES` configuration parameter to mitigate dangerous hyperlinks
* Hide "IP addresses" tab when viewing a container prefix
* Enable creation of rack reservations directly from navigation menu
* Enable tag assignment during bulk creation of IP addresses

### Bug Fixes

* Fix API definition for available prefix and IP address endpoints
* Catch IntegrityError exception when adding a non-unique secret
* Fix `prefix_count` population on VLAN API serializer
* Fix merging of form fields among custom scripts
* Fix "brief" rendering of various REST API endpoints
* Add cable trace endpoints for pass-through ports
* Fix display of role labels in virtual machines table
* Allow users to create "next available" IPs without needing permission to create prefixes
* Filter parent group by site when creating rack groups
* Enable power port template assignment when bulk editing power outlet templates

---

## v2.8.5 (2020-05-26)

**Note:** The minimum required version of PostgreSQL is now 9.6.

### Enhancements

* Expose `INTERNAL_IPS` configuration parameter
* Add `csrf_token` context for plugin templates
* Add permissions context for plugin templates
* Add NEMA L14 and L21 power port/outlet types
* Set default color for rack and devices roles

### Bug Fixes

* Fix caching invalidation issue related to device/virtual machine primary IP addresses
* Allow passing initial data to custom script MultiObjectVar
* Fix ordering of services table by parent
* Correct UI link for reports with custom name
* Fix caching invalidation issue related to assigning new IP addresses to interfaces
* Fix bulk CSV import of child devices
* Fix interface assignment for bulk-imported IP addresses
* Set default value of `REMOTE_AUTH_AUTO_CREATE_USER` as `False` in docs
* Respect `comments` field when importing device type in YAML/JSON format

---

## v2.8.4 (2020-05-13)

### Enhancements

* Extend email configuration parameters to support SSL/TLS

### Bug Fixes

* Display error message when invalid cable length is specified
* Multi-position rear ports may only be connected to other rear ports
* Missing Contextual help for API Tokens
* Fix tag assignment on config contexts (regression from #4527)
* Restore IP prefix depth notation in list view
* Replicate assigned interface when cloning IP addresses
* Bump django-rq to v2.3.2 to fix ImportError with rq 1.4.0
* Inventory Item List view exception caused by incorrect accessor definition 

---

## v2.8.3 (2020-05-06)

### Bug Fixes

* Fix AttributeError exception when viewing object lists as a non-authenticated user

---

## v2.8.2 (2020-05-06)

### Enhancements

* Enable toggling and rearranging table columns
* Allow specifying related objects by arbitrary attribute during CSV import
* Include tags in object lists as a toggleable table column
* Implement mechanism for storing user preferences
* Retain user's preference for config context format
* Enable configuration of proxies for outbound HTTP requests
* Retain user's preference for page length
* Add ServerTech's HDOT Cx power outlet type

### Bug Fixes

* Fix assignment of certain tags to config contexts
* Removed all squashed schema migrations to allow direct upgrades from very old releases
* Fix tracing cables through a single RearPort
* Fix encoding unicode webhook body data
* Update form for adding devices to clusters
* Prevent setting 0U height on device type with racked instances
* Ensure consistent support for filtering objects by `id` across all REST API endpoints
* Restore ability to add/remove tags on services, virtual chassis in bulk

---

## v2.8.1 (2020-04-23)

### Notes

In accordance with the fix in [#4459](https://github.com/netbox-community/netbox/issues/4459), users that are experiencing invalid nested data with regions, rack groups, or tenant groups can perform a one-time operation using the NetBox shell to rebuild the correct nested relationships after upgrading:

```text
$ python netbox/manage.py nbshell
### NetBox interactive shell (localhost)
### Python 3.6.4 | Django 3.0.5 | NetBox 2.8.1
### lsmodels() will show available models. Use help(<model>) for more info.
>>> Region.objects.rebuild()
>>> RackGroup.objects.rebuild()
>>> TenantGroup.objects.rebuild()
```

### Enhancements

* Add 21-inch rack width (ETSI)

### Bug Fixes

* Prevent modifying termination points of existing cable to ensure end-to-end path integrity
* Correct Swagger schema specification for the available prefixes/IPs API endpoints
* Enable assigning all relevant attributes during bulk device/VM component creation
* Ensure interfaces without a subinterface ID are ordered before subinterface zero
* Fix Type of `connection_state` in Swagger schema
* Fix detection of connected endpoints when connecting rear ports
* Fix caching issue resulting in erroneous nested data for regions, rack groups, and tenant groups
* Fix display of parent/child role on device type view
* Fix exception when validating certain models via REST API
* Enforce address family for device primary IPv4/v6 addresses

---

## v2.8.0 (2020-04-13)

**NOTE:** Beginning with release 2.8.0, NetBox requires Python 3.6 or later.

### New Features (Beta)

This releases introduces two new features in beta status. While they are expected to be functional, their precise implementation is subject to change during the v2.8 release cycle. It is recommended to wait until NetBox v2.9 to deploy them in production.

#### Remote Authentication Support

Several new configuration parameters provide support for authenticating an incoming request based on the value of a specific HTTP header. This can be leveraged to employ remote authentication via an nginx or Apache plugin, directing NetBox to create and configure a local user account as needed. The configuration parameters are:

* `REMOTE_AUTH_ENABLED` - Enables remote authentication (disabled by default)
* `REMOTE_AUTH_HEADER` - The name of the HTTP header which conveys the username
* `REMOTE_AUTH_AUTO_CREATE_USER` - Enables the automatic creation of new users (disabled by default)
* `REMOTE_AUTH_DEFAULT_GROUPS` - A list of groups to assign newly created users
* `REMOTE_AUTH_DEFAULT_PERMISSIONS` - A list of permissions to assign newly created users

If further customization of remote authentication is desired, NetBox allows you to inject a custom Django authentication backend to retain full control over the authentication and configuration of remote users.

#### Plugins

This release introduces support for custom plugins, which can be used to extend NetBox's functionality beyond what the core product provides. For example, plugins can be used to:

* Add new Django models
* Provide new views with custom templates
* Inject custom template into object views
* Introduce new API endpoints
* Add custom request/response middleware

For NetBox plugins to be recognized, they must be installed and added by name to the `PLUGINS` configuration parameter. (Plugin support is disabled by default.) Plugins can be configured under the `PLUGINS_CONFIG` parameter.

### Enhancements

* Added support for nested rack groups
* Added support for nested tenant groups
* Standardized description fields across all models
* Enabled application logging

### Bug Fixes

* Fix population of device types when bulk editing devices
* Correct typo in slugs for Infiniband interface types

### API Changes

* The `_choices` API endpoints have been removed. Instead, use an `OPTIONS` request to a model's endpoint to view the available values for all fields.
* The `id__in` filter has been removed from all models. Use the format `?id=1&id=2` instead.
* Added a `description` field to various models.

### Other Changes

* The `family` field has been removed from the Aggregate, Prefix, and IPAddress models. The field remains available in the API representations of these models, however the column has been removed from the database table.
=== END FILE ===

**Version 2.7**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.7/
=== BEGIN FILE ===
# NetBox v2.7 Release Notes

## v2.7.12 (2020-04-08)

### Enhancements

* Reference VRF by name rather than RD during IP/prefix import
* Use absolute URLs in rack elevation SVG renderings
* Allow connecting cables between two circuit terminations
* Add the `webhook_receiver` management command to assist in troubleshooting outgoing webhooks

### Bug Fixes

* Fix typing of count_ipaddresses on interface serializer
* Fail cleanly when trying to import multiple device types simultaneously
* Fix exception when disconnecting a cable from a power feed
* Tweak display of unset custom integer fields
* Fix reservation edit/delete button URLs on rack view

---

## v2.7.11 (2020-03-27)

### Enhancements

* Add ability to automatically check for new releases (must be enabled by setting `RELEASE_CHECK_URL`)
* Custom script object variables now utilize dynamic form widgets
* Add descriptive tooltip to custom fields on object views
* Add a dedicated view for rack reservations
* Enable webhooks for rack reservations
* Enable export templates for rack reservations
* Enable custom links for rack reservations
* Update admin links for Django RQ to reflect multiple queues
* Add a bulk edit view for device bays
* Add cable trace button for circuit terminations

### Bug Fixes

* Improve `prefix_length` validation on available-prefixes API
* Fix cable tracing across multiple rear ports
* Enforce unique constraints for device and virtual machine names in the API
* Fix Markdown support for tables
* Fix exception raised on IP address bulk add view
* Fix duplicate name validation on device model

---

## v2.7.10 (2020-03-10)

**Note:** If your deployment requires any non-core Python packages, list them in a file named `local_requirements.txt`.

### Enhancements

* Embed model documentation within web UI
* Add bulk edit view for power panels
* Add CSV import view for services
* Add CSV import view for rack reservations
* Redirect to a user-friendly error page when CSS/JS resources fail to load

### Bug Fixes

* Exclude Python modules without Script classes from scripts list
* Allow bulk editing/deletion of all device components matching a query
* Catch `AddrFormatError` exception when filtering aggregates/prefixes by an invalid prefix

---

## v2.7.9 (2020-03-06)

**Note:** This release will deploy a Python virtual environment on upgrade in the `venv/` directory.

### Enhancements

* Revised the installation docs and upgrade script to employ a Python virtual environment
* Enumerate ChoiceField type and value in API
* Extend upgrade script to clear expired user sessions
* Add dynamic lookup expressions for all filters
* Allow negative voltage for DC power feeds
* Allow filtering device component list views by type
* Add MRJ21 port and cable types
* Include device name in tooltip on rack elevations
* Add 10-inch option for rack width

### Bug Fixes

* Fix incorrect schema definition of `int` type choicefields
* Fix filtering of clusters by tenant
* Fix label on export button for device types
* Include A/Z termination sites in provider circuits table
* Fix assignment of parent LAG during interface bulk edit
* Fix bulk creation of objects with custom fields via REST API
* Pass "commit" argument when executing scripts via REST API
* Fix exception when deleting device type with components
* Fix toggling of device images for all racks in elevations view

---

## v2.7.8 (2020-02-25)

### Enhancements

* Add a "decommissioning" cable status
* Return graceful error message when webhook queuing fails
* Omit internal fields from the change log data
* Support Jinja2 templating for webhook payload and headers
* Extend custom scripts to pass the `commit` value via `run()`
* Denote rack role on rack elevations list

### Bug Fixes

* Fix exception when deleting a device with interface connections when an interfaces webhook is defined
* Escape double quotes on encapsulated values during CSV export
* Fix display of rear device image if front image is not defined
* Improve fit of device images in rack elevations
* Fix rack units filtering on elevation endpoint
* Enforce consistent background striping in rack elevations
* Fix API representation of `content_type` for export templates
* Fix exception when selecting all filtered objects during bulk edit
* Fix exception when filtering foreign keys by NULL
* Correct IP address hyperlinks on interface view
* Fix duplication of field attributes when multiple IPNetworkVars are present in a script
* Fix power port assignment for power outlet templates created via REST API
* Interface type should be required by API serializer

---

## v2.7.7 (2020-02-20)

**Note:** This release fixes a bug affecting the natural ordering of interfaces.

### Enhancements

* Enable display of device images in rack elevations
* Compare object change to the previous change
* Preserve slug value when editing existing objects
* Enhance search function when selecting VLANs for interface assignment
* Improve color contrast in rack elevation drawings
* Add RJ-11 console port type
* Enable filtering interfaces list view by enabled

### Bug Fixes

* Avoid race condition when provisioning "next available" IPs/prefixes via the API
* Fix missing migration for interface templates of type "other"
* Role is not required when creating a virtual machine
* Fix potential exception when bulk editing objects from a filtered list
* Site is required when creating a rack group or power panel
* Fix representation of NaturalOrderingField values in change log
* Role field should not be required when searching/filtering secrets
* Fix exception when viewing LLDP neighbors page
* Prevent reassignment to master device when bulk editing VC member interfaces
* Fix assignment of mask length when bulk editing prefixes
* Include trailing text when naturalizing interface names
* Restore display of tags and custom fields on power feed view

---

## v2.7.6 (2020-02-13)

### Bug Fixes

* Fix schema migrations to enforce maximum character length for naturalized fields

---

## v2.7.5 (2020-02-13)

**Note:** This release includes several database schema migrations.

### Enhancements

* Allow custom script authors to specify the form widget for each variable
* Greatly improve performance when ordering device components
* Add support for Redis Sentinel
* Include position numbers in SVG image when rendering rack elevations
* Add more status choices for virtual machines
* Add device filter to component list views
* Add bulk edit functionality for device type components
* Enable bulk edit and delete functions for device component list views
* Add buttons to delete individual device type components

### Bug Fixes

* Fix filtering IP addresses by multiple devices
* Make dropdown menus in the navigation bar scrollable on small screens
* Permit nullifying applicable choice fields via API requests
* Selection of power outlet type during bulk update is optional
* Render URL custom fields as links under object view
* Fix filtering of objects by custom fields using UI search form
* Avoid extraneous database queries when rendering search forms
* Device power ports and outlets should inherit type from the parent device type
* Disable occupied terminations when connecting a cable to a circuit
* Restore device bay counts in rack elevation diagrams
* Fix enforcement of secret role assignment for secret decryption
* Correct YAML rendering of config contexts
* Fix implementation of Redis caching configuration

---

## v2.7.4 (2020-02-04)

### Enhancements

* Allow custom fields to be imported and exported using CSV
* Replace tags filter with Select2 widget
* Toggle config context display between JSON and YAML
* Enable assigning config contexts by cluster and cluster group
* Disable the `makemigrations` management command

### Bug Fixes

* Fix exception when bulk editing interfaces
* Fix toggling of required fields in custom scripts
* Restore missing `tags` field in IPAM service serializer
* Fix error when bulk importing interfaces to virtual machines
* Repair schema migration for Rack.outer_unit
* Correct permission checked when creating a rack
* Enforce "view tag" permission on individual tag view
* Fix assignment of power panel when bulk editing power feeds
* Fix exception when creating an interface with tagged VLANs

---

## v2.7.3 (2020-01-28)

### Enhancements

* Pre-select site/rack for B side when creating a new cable
* Include circuit terminations in API representation of circuits
* Add IP address variables for custom scripts
* Add VRF filtering to search NAT IP
* Include timezone context in webhook timestamps

### Bug Fixes

* Automatically select parent manufacturer when specifying initial device type during device creation
* Restore tooltip for reservations on rack elevations
* Permit the creation of multiple unnamed devices
* Correct HTTP content type assignment for webhooks
* Do not filter child results by null if non-required parent fields are blank
* Toggle rack elevation face using front/rear strings
* Remove redundant tenant field from cluster form
* Restore border around background devices in rack elevations
* Fix display of assigned IPs when filtering device interfaces
* Correct display of cable status
* Repair schema migration for IP addresses with DHCP status
* Correct URL patterns to match Unicode characters in tag slugs
* Fix exception when setting interfaces to tagged mode in bulk
* Restore missing comments field label of various bulk edit forms

---

## v2.7.2 (2020-01-21)

### Enhancements

* Documented power modelling
* Add 802.11ax interface type
* Add `device_bays` filter for devices and device types

### Bug Fixes

* Allow Unicode characters in tag slugs
* Indicate validation failure when using SSH-style RSA keys
* Fix exception in webhook worker due to missing constant
* Fix validation error when creating child devices
* Fix legacy device status choice
* Fix display of unnamed devices in rack elevations
* Restore tooltip for devices in rack elevations
* Show borders around devices in rack elevations
* Indicate the presence of "background" devices in rack elevations
* Fix filtering of device components by region/site
* Resolve migration of "other" interface type

---

## v2.7.1 (2020-01-16)

### Bug Fixes

* Fixed exception when attempting to assign IP to interface
* Prevent rack elevation links from opening new tabs/windows
* Fix AttributeError exception when viewing prefixes list

---

## v2.7.0 (2020-01-16)

**Note:** This release completely removes the topology map feature.

### New Features

#### Enhanced Device Type Import

NetBox now supports the import of device types and related component templates using definitions written in YAML or JSON.

#### Bulk Import of Device Components

Device components such as console ports, power ports, and interfaces can now be imported in bulk to multiple devices in CSV format.

#### External File Storage

This release introduces support for several remote storage backends provided by the `django-storages` library.

#### Rack Elevations Rendered via SVG

NetBox v2.7 introduces a new method of rendering rack elevations as an SVG image via a REST API endpoint.

### Changes

#### Topology Maps Removed

The topology maps feature has been removed.

#### Supervisor Replaced with systemd

The NetBox installation documentation has been updated to provide instructions for managing the WSGI and RQ services using systemd.

#### Redis Configuration

This release modifies the `REDIS` parameter to accept two discrete subsections named `webhooks` and `caching`.

#### WEBHOOKS_ENABLED Configuration Setting Removed

As `django-rq` is now a required library, NetBox assumes that the RQ worker process is running.

#### API Choice Fields Now Use String Values

NetBox's REST API presents fields which reference a particular choice as a dictionary with two keys: `value` and `label`.

### Enhancements

* Add ability to clone objects
* Pre-populate form fields when selecting "create and add another"
* Add power port and power outlet types
* Add console port and console server port types
* Relax uniqueness constraint on device and VM names
* Replace `supervisord` with `systemd`
* Add tenant assignment to virtual machine clusters
* Add Jinja2 template support for graphs
* Enable IP address filtering using multiple address parameters
* Add list views for all device components
* Introduce a REST API endpoint for executing custom scripts
* Add `description` field to organizational models

### Bug Fixes

* Ensure deterministic ordering for all models
* Fix exception when deleting device types
* Fix interface filter field when unauthenticated
* Fix utilization graph extending out of bounds when utilization > 100%
* Fix exception when deleting devices with secrets assigned
* Fix API rendering of the `family` field for aggregates

### Bug Fixes (From Beta)

* Fix creation of interfaces for virtual machines
* Fix database migration for cable status field

### API Changes

* Choice fields now use human-friendly strings for their values instead of integers.
* Introduced the `/api/extras/scripts/` endpoint for retrieving and executing custom scripts.
=== END FILE ===

**Version 2.6**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.6/
=== BEGIN FILE ===
# NetBox v2.6 Release Notes

## v2.6.12 (2020-01-13)

### Enhancements

* Improved NAPALM method documentation in Swagger (OpenAPI)
* Preview image attachments when hovering over the link
* Allow NAPALM driver settings to be changed with request headers
* Toggle the display of child prefixes/IP addresses
* Search by description when assigning IP address to interfaces
* Add `tenant` filter field for cables
* Enable filtering of interfaces by name on the device view
* Add rack selection field to rack elevations view
* Paginate assigned circuits at the provider details view
* Add total path length to cable trace
* Include content of response on webhook error
* Enable word expansion during interface creation
* Enable searching by DNS name when assigning IP address
* Allow passing initial data to custom script forms
* Add `local_context_data` filter for virtual machines

### Bug Fixes

* Fix validation on tagged VLANs of an interface
* Fix ordering of models when dumping data to JSON
* Fix device role link on config context view
* Allow filtering VM interfaces by multiple MAC addresses
* Fix rendering of grouped custom links
* Allow filtering device components by multiple device names
* Disallow /0 masks for prefixes and IP addresses
* Paginate related IPs on the IP address view
* Fix minimum/maximum value rendering for site ASN field
* Fix filtering of devices by rack group
* Fix references to deleted cables without a label
* Fix divide-by-zero on power feeds with low power values

---

## v2.6.11 (2020-01-03)

### Bug Fixes

* Fix API-driven filter field rendering (#3812 regression)
* Add missing region filters for multiple objects

---

## v2.6.10 (2020-01-02)

### Enhancements

* Add ability to move inventory items between devices
* Extend admin UI to allow deleting old report results
* Add `assigned_to_interface` filter for IP addresses
* Fail gracefully on custom link rendering exception
* Provide request context when executing custom scripts
* Add date/time picker widgets
* Enable partial search for inventory items
* Optimize size of pages containing a dynamic selection field
* Allow filtering console/power/interface connections by device ID

### Bug Fixes

* Restrict queryset of chained fields when form validation fails
* Include A/Z termination sites for circuits in global search
* Scrolling to target (hash) did not account for the header size
* Fix AttributeError exception in API docs
* Filter platform by manufacturer when editing devices
* Fix filtering of racks by group on device list
* Fix exception when editing a device bay (regression from #3596)

---

## v2.6.9 (2019-12-16)

### Enhancements

* Include direct link to rack elevations on site view
* Move virtual machine results near devices in global search
* Added copy button for API tokens

### Bug Fixes

* Prevent the deletion of a virtual chassis when a cross-member LAG is present
* Respect custom field default values when creating objects via the REST API
* Fix exception on password change page for local users
* Fix unable to assign IP to interface

---

## v2.6.8 (2019-12-10)

### Enhancements

* Disable password change form for LDAP-authenticated users
* Display cable colors on device view
* Remove obsolete P3P policy header
* Add query filters for `created` and `last_updated` fields
* Allow the underscore character in IPAddress DNS names

### Bug Fixes

* Fix validation error when editing power cables in bulk
* Fix exception when connecting a cable to a RearPort with no corresponding FrontPort
* Include `weight` field in prefix/VLAN role form
* Include comments on PowerFeed view
* Fix link for assigned ipaddress in interface page
* Prevent exception when importing an invalid cable definition
* Correctly indicate power feed terminations on cable list
* Fix API filtering of interfaces by more than one device name
* Enforce client validation for minimum service port number

---

## v2.6.7 (2019-11-01)

### Enhancements

* Add support for additional user defined headers to be added to webhook requests
* Add `ca_file_path` to Webhook model to support user supplied CA certificate verification of webhook requests
* Add ChoiceVar for custom scripts
* Add 400GE OSFP interface type
* Add filtering for objects in admin UI

### Bug Fixes

* Rewrite change logging middleware to resolve sporadic testing failures
* Add missing options to connect front ports to console ports
* Enable filter sites/devices/VMs by null region
* Extend upgrade script to validate Python dependencies
* Prevent server error when reassigning a device to a new device bay
* Use `get_lldp_neighors_detail` to validation LLDP neighbors
* Add missing cache support for the circuits app
* Add missing `rack_group` field to PowerFeed CSV export
* Limit next/previous rack by assigned rack group

---

## v2.6.6 (2019-10-10)

### Notes

* This release includes a migration which automatically updates all existing cables to enable filtering by site/rack.

### Enhancements

* Add InfiniBand interface types
* Add `rack` and `site` filters for cables
* Disallow raw HTML in Markdown-rendered fields
* Add `MultiObjectVar` for custom scripts
* Enable editing of individual DeviceType components
* Render text and URL fields as textareas in the custom link form
* Introduce `commit_default` custom script attribute to not commit changes by default

### Bug Fixes

* Prevent primary IP address for a device/VM from being reassigned
* Correct CSV headers for exported power feeds
* Fix device status page loading when NAPALM call fails
* Prevent erroneous redirects when editing tags
* Ensure consistent display of changelog retention period
* Change `device` to `parent` in interface editing VLAN filtering logic
* Restore label for comments field when bulk editing circuits
* Enforce view permissions on global search results
* Enforce object-form JSON for local context data on devices and VMs

---

## v2.6.5 (2019-09-25)

### Enhancements

* Include reserved units when calculating rack utilization
* Extend upgrade script to automatically remove stale content types
* Enable filtering changelog API by `changed_object_id`
* Enable export templates for inventory items
* Enable bulk editing of power outlet/power port associations
* Enable filtering circuits list by region

### Bug Fixes

* Change IP/prefix CSV export to reference VRF name instead of RD
* Fix foreground text color on color picker fields
* Prevent cables from being terminated to virtual/wireless interfaces via API
* Fix error in `parseURL` related to variables in API URL
* Fixed rack role foreground color
* Added blank option for untagged VLANs
* Fixed virtual machine interface edit with new inline vlan edit fields
* Added inline VLAN editing to virtual machine interfaces

---

## v2.6.4 (2019-09-19)

### Enhancements

* Add bulk editing for interface VLAN assignment
* Add `local_context_data` boolean filter for devices
* Increase length of platform name and slug to 100 characters
* Enable inline VLAN assignment while editing an interface
* Enable embedded graphs for devices
* Add minimum/maximum prefix length enforcement for `IPNetworkVar`

### Bug Fixes

* Prevent exception triggered by webhook upon object deletion
* Fix rendering of checkboxes on custom script forms
* Correct API URL for nested device bays
* Fix assignment of tags when creating front/rear ports
* Label TextVar fields when rendering custom script forms

---

## v2.6.3 (2019-09-04)

### New Features

#### Custom Scripts

Custom scripts allow for the execution of arbitrary code via the NetBox UI. They can be used to automatically create, manipulate, or clean up objects or perform other tasks within NetBox.

### Enhancements

* Add `mac_address` filter for virtual machines
* Update Bootstrap CSS to v3.4.1
* Fix population of power port/outlet details on device creation
* Prevent navigation menu from overlapping page content
* Linkify platform field on device view
* Enable filtering circuits by region
* Enable bulk editing of tag color

### Bug Fixes

* Add database index for ObjectChange time
* Serial number filter for racks, devices, and inventory items is now case-insensitive
* Fixed cache invalidation issues
* Fix exception when ordering power connections list by PDU
* Fix tag coloring for non-linked tags
* Improve API error handling for ChoiceFields

---

## v2.6.2 (2019-08-02)

### Enhancements

* Allow ordering circuits by A/Z side
* Add power panels count to home page
* Paginate object changelog entries
* Add BNC port type and coaxial cable type
* Indicate indefinite changelog retention when applicable
* Add filter class to VirtualChassis API

### Bug Fixes

* Components connected via a cable must have an equal number of positions
* Prevent position from being nullified when moving a device to a new rack
* Enable filtering device components by multiple device IDs
* Enable filtering devices/interfaces by multiple MAC addresses
* Fix permissions for ConfigContextBulkDeleteView
* Fix permission evaluation for interface connections view
* Fix cluster delete button
* Maximum and allocated draw fields should be included on power port template creation form
* Fix power panels list when bulk editing power feeds

---

## v2.6.1 (2019-06-25)

### Enhancements

* Add `virtual_chassis_member` device filter
* Add cable trace buttons for console and power ports
* Hide custom links which render as empty text

### Bug Fixes

* Limit rack group selection by parent site on racks list
* Raise validation error when specifying non-existent cable terminations
* Fix error when adding power outlets to a device type
* Reset the PostgreSQL sequence for Tag and TaggedItem IDs
* Fix rack group assignment on PowerFeed CSV import
* Fix server error when viewing cascaded PDUs
* Ignore empty URL query parameters

---

## v2.6.0 (2019-06-20)

### New Features

#### Power Panels and Feeds

NetBox now supports power circuit modeling via two new models: power panels and power feeds.

#### Caching

To improve performance, NetBox now supports caching for most object and list views.

#### View Permissions

Django 2.1 introduced the ability to enforce view-only permissions for different object types.

#### Custom Links

Custom links are created under the admin UI and will be displayed on each object of the selected type.

#### Prometheus Metrics

NetBox now supports exposing native Prometheus metrics from the application.

### Changes

#### New Dependency: Redis

Redis is now required to support NetBox's new caching functionality.

#### API Support for Specifying Related Objects by Attributes

The NetBox API now also supports referencing related objects by a set of sufficiently unique attributes.

#### API Device/VM Config Context Included by Default

The rendered config context for devices and VMs is now included by default in all API results.

#### Changes to Tag Permissions

NetBox now makes use of its own `Tag` model instead of the stock model which ships with django-taggit.

#### CORS_ORIGIN_WHITELIST Requires URI Scheme

Each origin must now include a URI scheme.

### Enhancements

* Add `dns_name` field to IPAddress
* Added power utilization graphs to power feeds, devices, and racks
* Add CustomFieldChoices API endpoint
* Add child object counts to API representation of organizational objects
* Add `color` field for tags
* Add `description` field to console/power components and device bays
* Add `comments` field for tags
* Rename Interface `form_factor` to `type`
* Add change logging to the Tag model
* OR logic now used when multiple values of a query filter are passed
* Annotate changelog retention time on UI

### Bug Fixes

* Correct API documentation for SerializerMethodFields
* Add cable trace button for console server ports and power outlets
* Fixed cosmetic error indicating a missing schema migration
* Corrected count of tags reported via API

### Bug Fixes From v2.6-beta1

* Exempt `/metrics` view from authentication
* Fix exception when viewing PDUs
* Incorrect calculation of PowerFeed available power
* Fix exception when creating a new power outlet
* Add power draw fields to power port creation form
* Add `power_port` and `feed_leg` fields to power outlet creation form
* Add bulk edit capability for power outlets and console server ports
* Fix interface filtering when connecting cables
* Fix link for connecting interface to rear port
* Exception raised when creating/viewing a circuit with a non-connected termination

### API Changes

* New API endpoints for power modeling: `/api/dcim/power-panels/` and `/api/dcim/power-feeds/`
* New API endpoint for custom field choices
* ForeignKey fields now accept either the related object PK or a dictionary of attributes describing the related object.
* Organizational objects now include child object counts.
* The `id__in` filter is now deprecated and will be removed in v2.7.
* Added a `description` field for all device components.
* dcim.Device: The devices list endpoint now includes rendered context data.
* dcim.DeviceType: `instance_count` has been renamed to `device_count`.
* dcim.Interface: `form_factor` has been renamed to `type`.
* dcim.Interface: The `type` filter has been renamed to `kind`.
* dcim.Site: The `count_*` read-only fields have been renamed to `*_count`.
* dcim.Site: Added the `virtualmachine_count` read-only field.
* extras.Tag: Added `color` and `comments` fields to the Tag serializer.
* virtualization.VirtualMachine: The virtual machines list endpoint now includes rendered context data.
=== END FILE ===

**Version 2.5**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.5/
=== BEGIN FILE ===
# NetBox v2.5 Release Notes

## v2.5.13 (2019-05-31)

### Enhancements

* Add tenant group filters
* Catch all exceptions during export template rendering
* Add 2.5GE and 5GE interface form factors
* Add inventory item count to manufacturers list
* Add site link to rack reservations overview
* Enable bulk deletion of sites
* Improve performance for custom field access within templates
* Add interface name filter for IP addresses

### Bug Fixes

* Fixed form field population of tags with spaces
* Circuit termination missing from available cable termination types
* Fix formatting of cable length during cable trace
* Correctly display color block for white cables
* Fix custom field rendering for Jinja2 export templates
* Fix error handling when attempting to delete a protected object via API
* Fix filtering devices by "has power outlets"
* Fix exception when deleting a circuit with a termination(s)
* Fixed login link retaining query parameters

---

## v2.5.12 (2019-05-01)

### Bug Fixes

* Fix natural ordering of device components

---

## v2.5.11 (2019-04-29)

### Notes

This release upgrades the Django framework to version 2.2.

### Enhancements

* Improve natural ordering of device components
* Add support for filtering cables by connected device
* Add decommissioning status for devices

### Bug Fixes

* Upgrade Django requirement to 2.2 to fix object deletion issue in the changelog middleware
* Preserve multiselect filter values when updating per-page count for list views
* Fix ordering of interface connections list by termination B name/device
* Fix `tagged_items` count in tags API endpoint
* Disable `last_login` update on login when maintenance mode is enabled

---

## v2.5.10 (2019-04-08)

### Enhancements

* Add Jinja2 support for export templates

### Bug Fixes

* Redirect to list view after editing an object from list view
* DCIM interfaces API endpoint should not include VM interfaces
* Fix exception when retrieving change object for a component template via API
* Fix form widget for bulk cable label update
* Ignore site/rack fields when connecting a new cable via device search
* Fix exception at reports API endpoint
* Fix exception when writing mac address for an interface via API

---

## v2.5.9 (2019-04-01)

### Enhancements

* Add username to outbound webhook requests
* Add SSL support for django-rq (requires django-rq v1.3.1+)
* Add request ID to outbound webhook requests (for correlating all changes part of a single request)

### Bug Fixes

* Fixes deterministic ordering of interfaces
* Clarification of wording in API regarding filtering
* Add interface type for QSFP28 50GE
* Fix device role selection showing duplicate first entry
* Limit device query to non-racked devices if no rack selected when creating a cable
* Fix API representation of ObjectChange `action` and add `changed_object_type`
* Fixes VM Role filtering
* Fix tag population when running NetBox within a path
* Add missing cable termination types to DCIM `_choices` endpoint
* Tweak prefix/IP filter forms to filter using VRF ID rather than route distinguisher
* Ignore empty local context data when rendering config contexts
* Save assigned tags when creating a new secret

---

## v2.5.8 (2019-03-11)

### Enhancements

* Printer friendly CSS

### Bug Fixes

* Correct documentation for VM interface serializer
* Fix endpoint grouping in API docs
* Fix filtering of sites/devices/VMs by multiple regions
* Provider filter form's site field should be blank by default
* Enforce deterministic ordering of device components returned by API
* Exclude circuit terminations from API interface connections endpoint
* Allow CSV import of prefixes/IPs to VRF without an RD assigned
* Record the deletion of an IP address in the changelog of its parent interface (if any)
* Added the `slug` field to the Tenant filter for use in the API and search function
* Remove trailing slashes to fix root/template paths on Windows
* Prevent exception when exporting inventory items belonging to unnamed devices
* Increase ExportTemplate `mime_type` field length
* Accept `null` cable length_unit via API
* Improve ContentTypeField serializer to elegantly handle invalid data
* Add delete button to tag view
* Improve rendering time for API docs
* Correct CSS class assignment on color picker
* Fix logging of unlabeled cable ID on cable deletion
* Fix pagination page length for rack elevations

---

## v2.5.7 (2019-02-21)

### Enhancements

* Enable filtering of devices by rack face
* Add button to copy unlocked secret to clipboard
* Add Markdown rendering for provider NOC/admin contact fields
* Add cable types for OS1/OS2 singlemode fiber
* Add port types for APC fiber
* Enable filtering cables list by connection status
* Clarify purpose of tags field on interface edit form

### Bug Fixes

* Allow filtering devices by null rack position
* Don't display connect button for wireless interfaces
* Correct foreground color of device roles in rack elevations
* Remove duplicate display of VRF RD on IP address view
* Fix filtering of nullable character fields
* Fix ordering regions by site count
* Fix config context list and edit forms to use Select2 elements
* Cable type in filter form should be blank by default
* Fix assigned prefixes link on VRF view
* Fix empty connected circuit link on device interfaces list
* Fix bulk editing of pass-through ports

---

## v2.5.6 (2019-02-13)

### Enhancements

* Add cable trace button to pass-through ports
* Add "110 punch" type for pass-through ports
* Enable bulk editing of pass-through ports
* Add cellular interface types (GSM/CDMA/LTE)

### Bug Fixes

* Fix filtering by VRF for prefix and IP address lists
* Correct display of far cable end for pass-through ports
* Enable filtering of rack unit list by unit ID
* Fix navigation links between LAG interfaces and their members on device view
* Add `display_name` to DeviceType API serializer; fix DeviceType list for bulk device edit
* Follow return URL when connecting a cable
* Correct display of VRF name when no RD is assigned
* Fixed device role label display on light background color
* Sanitize user password if an exception is raised during login

---

## v2.5.5 (2019-01-31)

### Enhancements

* Allow null route distinguisher for VRFs
* Remove VRF child prefixes table; link to main prefixes view
* Include directly connected device for front/rear ports

### Bug Fixes

* Fix template exception when viewing rack elevations list
* Fix form widget for front port template creation
* Fix certain model filters did not support the `q` query param
* Fix select2 nullable filter fields add multiple null_option elements when paging

---

## v2.5.4 (2019-01-29)

### Enhancements

* Implemented Select2 for all Model backed selection fields
* Implemented the color picker with Select2 to show colors in the background
* Enable bulk assignment of MAC addresses to interfaces
* Implemented Select2 for all list filter form select elements
* Implemented Select2 to replace most all instances of select fields in forms
* Extend users admin table to include superuser and active fields
* Add `is_pool` field for prefix filtering
* Include device site/rack assignment in cable trace view
* Loosen version pinning for Django to allow patch releases
* Include description fields in interface connections export

### Bug Fixes

* Include "none" option when filter IP addresses by role
* Fix AttributeError exception when attempting to delete region(s)
* Fix duplicate display of pagination controls on child prefix/IP tables
* Properly URL-encode "map it" link on site view
* Better error handling for unsupported NAPALM methods
* Handle exception when deleting a device with connected components

---

## v2.5.3 (2019-01-11)

### Enhancements

* Enable bulk editing of prefix/IP mask length
* Add per-page toggle to object lists
* Enable filtering sites by parent region
* Enable regular expressions when bulk renaming device components
* Add DAC and AOC cable types
* Additional cable colors
* Include cables in global search

### Bug Fixes

* Preserve cluster assignment when editing a device
* Always treat first/last IPs within a /31 or /127 as usable
* Add missing DCIM field values to API `_choices` endpoint
* Fix cable validation to handle duplicate connections on import

---

## v2.5.2 (2018-12-21)

### Enhancements

* Add 200G and 400G interface types
* Enable filtering of prefixes by exact prefix value

### Bug Fixes

* Fix exception on LLDP neighbors view for device with a circuit connected
* Cable trace should follow circuits
* Remove pagination restriction on bulk component creation for devices/VMs
* Fix form select widget population on parent with null value
* Correct permission evaluation for circuit termination cabling
* Preserve list filtering after editing objects in bulk
* Fix bulk deletion of tags
* Detect loops when tracing front/rear ports
* Correct permission evaluation when bulk deleting tags
* Limit rear port choices to current device when editing a front port

---

## v2.5.1 (2018-12-13)

### Enhancements

* Add 128GFC Fibrechannel interface type
* Enable filtering changelog by object type under web UI

### Bug Fixes

* Fix ImproperlyConfigured exception when rendering API docs
* Prevent duplicate interfaces from appearing under VLAN members view
* Correct display of length unit in cables list
* Fix exception when passing dictionary value to a ChoiceField
* Fix error when viewing webhook in admin UI without write permission
* Disallow POST requests to `/dcim/interface-connections/` API endpoint
* Fix exception when connecting a cable to a RearPort with no corresponding FrontPort
* Fix custom field filtering
* Correct naming of before/after filters for changelog entries

---

## v2.5.0 (2018-12-10)

### Notes

#### Python 3 Required

As promised, Python 2 support has been completed removed. Python 3.5 or higher is now required to run NetBox. Please see our Python 3 migration guide for assistance with upgrading.

#### Removed Deprecated User Activity Log

The UserAction model, which was deprecated by the new change logging feature in NetBox v2.4, has been removed. If you need to archive legacy user activity, do so prior to upgrading to NetBox v2.5, as the database migration will remove all data associated with this model.

#### View Permissions in Django 2.1

Django 2.1 introduces view permissions for object types (not to be confused with object-level permissions). Implementation of view permissions is planned for NetBox v2.6. Users are encouraged to begin assigning view permissions as desired in preparation for their eventual enforcement.

#### upgrade.sh No Longer Invokes sudo

The `upgrade.sh` script has been tweaked so that it no longer invokes `sudo` internally. This was done to ensure compatibility when running NetBox inside a Python virtual environment. If you need elevated permissions when upgrading NetBox, call the upgrade script with `sudo upgrade.sh`.

### New Features

#### Patch Panels and Cables

NetBox now supports modeling physical cables for console, power, and interface connections. The new pass-through port component type has also been introduced to model patch panels and similar devices.

### Enhancements

* Added `outer_width` and `outer_depth` fields to rack model
* Added `description` field to circuit terminations
* Added an `asset_tag` field for racks
* Added a count of assigned IP addresses to the interface API serializer
* Dropped support for Python 2
* Introduced the `LOGIN_TIMEOUT` configuration setting
* Added description columns to interface connections list
* Added a `status` field for racks
* Improved natural ordering of Interfaces
* Removed the deprecated UserAction model
* Removed deprecated RPCClient functionality
* Introduced `SESSION_FILE_PATH` configuration setting for authentication without write access to database
* `upgrade.sh` no longer invokes sudo

### Changes From v2.5-beta2

* Add `cabled` and `connection_status` filters for device components
* Convert Rack `outer_unit` and Cable `length_unit` to integer-based choice fields
* Enable filtering cables by multiple types/colors
* Delete associated content type and permissions when removing InterfaceConnection model
* Remove extraneous permissions generated from proxy models
* Change representation of null values from `0` to `null`
* Fix preservation of length/dimensions unit for racks and cables
* Include the `connection_status` field in nested representations of connectable device components
* Add `connected_endpoint_type` to connectable device component API representations

### API Changes

* The `/extras/recent-activity/` endpoint (replaced by change logging in v2.4) has been removed
* The `rpc_client` field has been removed from dcim.Platform
* Introduced a new API endpoint for cables at `/dcim/cables/`
* New endpoints for front and rear pass-through ports (and their templates) in parallel with existing device components
* The fields `interface_connection` on Interface and `interface` on CircuitTermination have been replaced with `connected_endpoint` and `connection_status`
* A new `cable` field has been added to console, power, and interface components and to circuit terminations
* New fields for dcim.Rack: `status`, `asset_tag`, `outer_width`, `outer_depth`, `outer_unit`
* The following boolean filters on dcim.Device and dcim.DeviceType have been renamed:
    * `is_console_server`: `console_server_ports`
    * `is_pdu`: `power_outlets`
    * `is_network_device`: `interfaces`
* The following new boolean filters have been introduced for dcim.Device and dcim.DeviceType:
    * `console_ports`
    * `power_ports`
    * `pass_through_ports`
* The field `interface_ordering` has been removed from the DeviceType serializer
* Added a `description` field to the CircuitTermination serializer
* Added `ipaddress_count` to InterfaceSerializer to show the count of assigned IP addresses for each interface
* The `available-prefixes` and `available-ips` IPAM endpoints now return an HTTP 204 response instead of HTTP 400 when no new objects can be created
* Filtering on null values now uses the string `null` instead of zero
=== END FILE ===

**Version 2.4**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.4/
=== BEGIN FILE ===
# NetBox v2.4 Release Notes

## v2.4.9 (2018-12-07)

### Enhancements

* Add SONET interface form factors
* Enable deep-merging of config context data
* Add FibreChannel SFP28 (32GFC) interface form factor

### Bug Fixes

* Correct representation of nested object assignment in API docs
* Correct type for count_* fields in site API representation
* Fixed filtering for interfaces with a virtual form factor
* Fix error handling when assigning a clustered device to a different site
* Decrease live search minimum characters to three
* Tweak live search widget to use brief format for API requests
* Removed the need to pass the model class to the rqworker process for webhooks
* Enforce consistent representation of unnamed devices in rack view

---

## v2.4.8 (2018-11-20)

### Enhancements

* Added bulk editing for config contexts
* Added object view for tags

### Bug Fixes

* Fix encoding of long (>127 character) secrets
* Filter on all tags when multiple are passed
* Improved rendering of Markdown tables
* Correct model specified for rack roles table
* Catch all exceptions from failed NAPALM API Calls
* Virtual machine API serializer should require cluster assignment

---

## v2.4.7 (2018-11-06)

### Enhancements

* Enable filtering of devices/VMs by region
* Allow filtering of interfaces by assigned VLAN or VLAN ID
* Add device field to inventory item filter form

### Bug Fixes

* Allow duplicate VIPs inside a uniqueness-enforced VRF
* Prevent new connections to already connected interfaces
* Only use django-rq admin template if webhooks are enabled
* Enable creating circuit terminations with interface assignment via API
* Changed naming of `peer_device` and `peer_interface` on API /dcim/connected-device/ endpoint to use underscores

---

## v2.4.6 (2018-10-05)

### Enhancements

* Add user permissions for creating/modifying API tokens
* Return abbreviated API output when passed `?brief=1`

### Bug Fixes

* Fix Unicode support for CSV import under Python 2
* Set max item count of API-populated form fields to MAX_PAGE_SIZE
* Local config context not available on the Virtual Machine Edit Form
* Fix cancel button when assigning a service to a device/VM
* Fix exception when importing devices with invalid device type
* Sanitize hostname and port values returned through LLDP

---

## v2.4.5 (2018-10-02)

### Enhancements

* Implemented local context data for devices and virtual machines
* Order and format JSON data in form fields
* Link remote interface connections to the Interface view
* API optimizations for tagged objects

### Bug Fixes

* Remove hard-coded limit of 1000 objects from API-populated form fields
* Tags field missing from device/VM component creation forms
* Nullify "next" link in API when limit=0 is passed
* Enforce JSON object format when creating config contexts
* Improve validation of interface MAC addresses
* Ignore unique address enforcement for IPs with a shared/virtual role
* Log the creation of device/VM components as object changes

---

## v2.4.4 (2018-08-22)

### Enhancements

* Added Extreme SummitStack interface form factors
* Include cluster site as read-only field in VirtualMachine serializer
* Implemented custom admin site to properly handle BASE_PATH
* Implemented searchability for Rack Groups

### Bug Fixes

* Handle `DoesNotExist` exception when deleting a device with connected interfaces
* Increased maximum MTU for interfaces to 65536 bytes
* Added item count to inventory tab on device view
* Record change in device changelog when altering cluster assignment
* Corrected time zone validation on site API serializer
* Redirect to parent device after deleting device bays
* Fix toggling display of IP addresses in virtual machine interfaces list
* Corrected "edit" link for virtual machine interfaces

---

## v2.4.3 (2018-08-09)

### Enhancements

* Added search filters for ConfigContexts

### Bug Fixes

* TypeError raised when WritableNestedSerializer receives a non-integer value
* API requires group field when creating/updating a rack
* Bulk deleting power outlets and console server ports from a device redirects to home page
* Attempting to create the next available prefix within a parent assigned to a VRF raises an AssertionError
* API requires manufacturer field when creating/updating an inventory item
* IntegrityError raised when attempting to assign an invalid IP address as the primary for a VM
* AttributeError when assigning VLANs to an interface on a device/VM not assigned to a site

---

## v2.4.2 (2018-08-08)

### Bug Fixes

* ImportError when viewing a report
* Extend ChoiceField to properly handle true/false choice keys
* TypeError when dispatching a webhook with a secret key configured
* Allow explicitly setting a null value on nullable ChoiceFields
* Webhooks firing on non-enabled event types
* DoesNotExist raised when deleting devices or virtual machines
* Incorrect tab link in VRF changelog view

---

## v2.4.1 (2018-08-07)

### Bug Fixes

* Always redirect to parent object when bulk editing/deleting components
* Custom fields panel absent from object view in UI
* False validation error on certain nested serializers
* Redirect to parent after editing interface from device/VM view
* Running a report yields a ValueError exception
* Serialized representation of object in change log does not include assigned tags

---

## v2.4.0 (2018-08-06)

### New Features

#### Webhooks

Webhooks enable NetBox to send a representation of an object every time one is created, updated, or deleted. Webhooks are sent from NetBox to external services via HTTP, and can be limited by object type.

#### Tagging

Tags are free-form labels which can be assigned to a variety of objects in NetBox.

#### Contextual Configuration Data

Context data enables the association of arbitrary data (expressed in JSON format) to devices and virtual machines grouped by region, site, role, platform, and/or tenancy.

#### Change Logging

NetBox now automatically records a serialized representation of an object when created, updated, or deleted.

### Enhancements

* Allow racks with the same name within a site
* Add a view to show all VLAN IDs available within a group
* Added object/list views for services
* Enabled custom fields for services
* Improved POST/PATCH representation of nested objects
* Added optional NAPALM arguments to Platform model
* Include the ID when showing nested interface connections (API change)
* Added `latitude` and `longitude` fields to Site for GPS coordinates
* Added `created` and `last_updated` fields to DeviceType
* Fixed natural ordering of objects when sorted by name
* Add "view elevations" button for site rack groups

### Bug Fixes

* Allow subdevice_role to be null on DeviceTypeSerializer
* Fixed "mark connected" button for PDU outlet connections

### API Changes

* Introduced the `/extras/config-contexts/`, `/extras/object-changes/`, and `/extras/tags/` API endpoints
* API writes now return a nested representation of related objects
* The dcim.DeviceType serializer now includes `created` and `last_updated` fields
* The dcim.Site serializer now includes `latitude` and `longitude` fields
* The ipam.Service and secrets.Secret serializers now include custom fields
* The dcim.Platform serializer now includes a free-form (JSON) `napalm_args` field

### Changes Since v2.4-beta1

#### Enhancements

* Allow mapping of ConfigContexts to tenant groups
* Add changelog tab to interface view
* Added "map it" link for site GPS coordinates

#### Bug Fixes

* Fixed JSON serialization of dates
* Include changed object type on home page changelog
* Include parent regions when filtering applicable ConfigContexts
* Fix exception when assigning objects to a ConfigContext via the API
* Fix AttributeError when creating a new object with tags assigned
* Fix assignment of an interface to an IP address via API PATCH
* Fix model validation on assignment of ManyToMany fields via API PATCH
* Make VLAN fields optional when creating a VM interface via the API
=== END FILE ===

**Version 2.3**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.3/
=== BEGIN FILE ===
# NetBox v2.3 Release Notes

## v2.3.7 (2018-07-26)

### Enhancements

* Enable partial matching on device asset_tag during search

### Bug Fixes

* Fixed exception when creating a virtual chassis with a non-master device in position 1
* Isolate errors when one of multiple NAPALM methods fails
* Ditched half-baked concept of tenancy inheritance via VRF
* IP addresses created via the `available-ips` API endpoint should have the same mask as their parent prefix (not /32)
* Remove `get_absolute_url()` from DeviceRole (can apply to devices or VMs)
* Include stat counters on report result navigation
* Corrected display of results in reports list
* Prevent navigation menu overlap when jumping to test results on report page
* Corrected casting of RIR utilization stats as floats
* Permit additional logging of exceptions beyond custom middleware

---

## v2.3.6 (2018-07-16)

### Enhancements

* Added virtual chassis to global search
* Show child status in device bay list

### Bug Fixes

* Error when assigning a VLAN to an interface on a VM in a cluster with no assigned site
* Pin django-filter to version 1.1.0

---

## v2.3.5 (2018-07-02)

### Enhancements

* Allow custom choice field to specify a default choice
* Include device serial number in rack elevation pop-up
* Added `address` filter to IPAddress model

### Bug Fixes

* Corrected description of security parameters under API definition
* Fix recursion error when viewing API docs under Python 3.4
* Disable calls to online swagger validator
* Fixed IndexError when automatically allocating IP addresses from large IPv6 prefixes
* Raise validation error on invalid `prefix_length` when allocating next-available prefix
* ValueError can be raised when viewing the interface connections table
* Added missing static choices to circuits and DCIM API endpoints
* Prevent a 0U device from being assigned to a rack position

---

## v2.3.4 (2018-06-07)

### Bug Fixes

* Catch `AddrFormatError` exception on invalid IP addresses
* Enable tenant assignment when creating a rack reservation via the API
* Add missing export button to rack roles list view
* Don't overwrite existing vc_position of master device when creating a virtual chassis
* Fix link to circuit termination in device interfaces table
* Fixed queryset-based bulk deletion of clusters and regions
* Fixed missing checkboxes for host devices in cluster view
* Prevent non-connectable interfaces from being connected
* Accept null value for empty time zone field
* Do not force timezone selection when editing sites in bulk
* Fix display of LLDP neighbors when interface name contains a colon

---

## v2.3.3 (2018-04-19)

### Enhancements

* Improved search function when assigning an IP address to an interface

### Bug Fixes

* Correct filtering logic for custom boolean fields
* Order interfaces naturally when bulk renaming
* Corrected status choices in site CSV import form
* Added missing description field to site edit form
* Fixed deselection of an IP address as the primary IP for its parent device/VM
* Allow assignment of VLANs to VM interfaces via the API
* Avoid casting oversized numbers as integers
* Show 0 for zero-value fields on CSV export
* Manufacturer should not be a required field when importing platforms
* Fixed IndexError exception when attempting to create a new rack reservation

---

## v2.3.2 (2018-03-22)

### Enhancements

* Extend bulk interface creation to support alphanumeric characters
* Introduced AnnotatedMultipleChoiceField for filter forms
* Switched to drf-yasg for Swagger API documentation
* Enable assigning VLANs to virtual machine interfaces
* Implemented a VLAN members view
* Added a button to view elevations on rack groups list
* Implemented a more robust mechanism for assigning VLANs to interfaces

### Bug Fixes

* Fix TypeError when attempting to add a member to an existing virtual chassis
* Fix TypeError exception when importing platforms
* Ignore duplicate IPs when calculating prefix utilization
* Require a plaintext value when creating a new secret
* Include all virtual chassis member interfaces in LLDP neighbors view
* Fixed bug when trying to nullify a selection custom field under Python 2

---

## v2.3.1 (2018-03-01)

### Enhancements

* Added filters for cluster group and cluster type

### Bug Fixes

* Redirect to device view after deleting a component
* Prevent exception when attempting to create a virtual machine without selecting devices
* Ignore ManyToManyFields when validating a new object created via the API
* Include VID in VLAN lists when editing an interface
* Prevent reassignment of parent device when bulk editing VC member interfaces
* Include all VC member interfaces on A side when creating a new interface connection
* Fixed form validation when modifying VLANs assigned to an interface
* Fixed exception when rendering export template on an object type with custom fields assigned
* Correct API validation of VLANs assigned to interfaces
* Trigger validation error when attempting to create a virtual chassis without specifying member positions

---

## v2.3.0 (2018-02-26)

### New Features

#### Virtual Chassis

A virtual chassis represents a set of physical devices with a shared control plane; for example, a stack of switches managed as a single device. Viewing the master device of a virtual chassis will show all member interfaces and IP addresses.

#### Interface VLAN Assignments

Interfaces can now be assigned an 802.1Q mode (access or trunked) and associated with particular VLANs.

#### Bulk Object Creation via the API

The REST API now supports the creation of multiple objects of the same type using a single POST request.

```
curl -X POST -H "Authorization: Token <TOKEN>" -H "Content-Type: application/json" -H "Accept: application/json; indent=4" http://localhost:8000/api/dcim/devices/ --data '[
{"name": "device1", "device_type": 24, "device_role": 17, "site": 6},
{"name": "device2", "device_type": 24, "device_role": 17, "site": 6},
{"name": "device3", "device_type": 24, "device_role": 17, "site": 6},
]'
```

Bulk creation is all-or-none: If any of the creations fails, the entire operation is rolled back.

#### Automatic Provisioning of Next Available Prefixes

NetBox now supports automated provisioning of available prefixes from within a parent prefix.

```
curl -X POST -H "Authorization: Token <TOKEN>" -H "Content-Type: application/json" -H "Accept: application/json; indent=4" http://localhost:8000/api/ipam/prefixes/10153/available-prefixes/ --data '[
{"prefix_length": 28},
{"prefix_length": 28},
{"prefix_length": 28}
]'
```

If the parent prefix cannot accommodate all requested prefixes, the operation is cancelled and no new prefixes are created.

#### Bulk Renaming of Device/VM Components

Device components can now be renamed in bulk via the web interface.

### Enhancements

* Added a `time_zone` field to the site model
* Added `created` and `last_updated` fields for relevant models to their API serializers
* Introduced support for bulk object creation via the API
* Added tenancy assignment for rack reservations
* Allow associating a platform with a specific manufacturer
* Added a `status` field to the site model
* Added a `description` field to the site model
* Added a `status` field to the circuit model

### Bug Fixes

* Enforce model validation during bulk update
* Simplified interface serializer for IP addresses and optimized API view queryset
* Fix KeyError when attempting to create a VirtualChassis with no devices selected
* RecursionError when a virtual chassis master device has no name
* Allow null value for interface encapsulation mode
* Allow filtering on device status with multiple values
* Fixed bulk editing of interface 802.1Q settings
* Provide additional context to identify devices when creating/editing a virtual chassis
* Allow removing an IP as the primary for a device when editing the IP directly

### Breaking Changes

* Constants representing device status have been renamed for clarity.

### API Changes

* API creation calls now accept either a single JSON object or a list of JSON objects.
* Added `created` and `last_updated` fields for objects inheriting from CreatedUpdatedModel.
* Removed the `parent` filter for prefixes.
* The IP address serializer now includes only a minimal nested representation of the assigned interface.
* The rack reservation serializer now includes a nested representation of its owning user.
* Added endpoints for virtual chassis and VC memberships.
* Added `status`, `time_zone`, and `description` fields to dcim.Site.
* Added a `manufacturer` foreign key field on dcim.Platform.
* Added a `status` field on circuits.Circuit.
=== END FILE ===

**Version 2.2**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.2/
=== BEGIN FILE ===
# NetBox v2.2 Release Notes

## v2.2.10 (2018-02-21)

### Enhancements

* Extended topology maps to support console and power connections
* Allow specifying loose or exact matching for custom field filters
* Standardized CSV export functionality for all object lists
* Added explanatory title text to disabled NAPALM buttons on device view
* Added a device filter field for primary IP

### Bug Fixes

* Include device/VM count for cluster list in global search results
* Implemented support for line breaks within CSV fields
* Do not populate initial values for custom fields when editing objects in bulk
* Corrected ordering of VRFs with duplicate names
* Allow setting the primary IPv4/v6 address for a virtual machine via the web UI

---

## v2.2.9 (2018-01-31)

### Enhancements

* Implemented bulk import/edit/delete views for InventoryItems
* Include prefixes/IPs from all VRFs when viewing the children of a container prefix in the global table
* Enable searching for regions by name/slug
* Display tenant description as title text in object tables
* Add virtual machine count to platforms list
* Consistent positioning of previous/next rack buttons

### Bug Fixes

* Tweaked LLDP interface name evaluation logic
* Improved rendering of null options for model choice fields in filter forms
* Populate VRF from parent when creating a new prefix
* Populate tenant assignment from parent when creating a new prefix
* InventoryItem API serializer no longer requires specifying a null value for items with no parent
* Correct display of VMs in list with no role assigned
* Fix TypeError when attempting IP address import if only unnamed devices exist

---

## v2.2.8 (2017-12-20)

### Enhancements

* Added name filter for racks
* Added position filter for devices
* Moved child prefixes table to its own view
* Include a button to refine search results for all object types under global search
* Added `cluster_type` filters for virtual machines

### Bug Fixes

* Fixed display of "select all" button on device power outlets list
* Use proper template for 404 responses
* Preserve initial VRF assignment when adding IP addresses in bulk from a prefix
* Added `vm_role` filter for device roles
* Omit filter forms from browsable API
* Added missing site field to virtualization cluster CSV export

---

## v2.2.7 (2017-12-07)

### Enhancements

* Added virtual machine count to site view
* Added a `contains` API filter to find all prefixes containing a given IP or prefix

### Bug Fixes

* Corrected tenant inheritance for new IP addresses created from a parent prefix
* Differentiated child IP count from utilization percentage for prefixes
* Delete session_key cookie on logout
* Fixed Unicode support for secret plaintexts
* Include number of instances for device types in global search
* Corrected filtering for IPv6 addresses containing letters
* Improved natural ordering of console server ports and power outlets

---

## v2.2.6 (2017-11-16)

### Enhancements

* Clicking "add an IP" from the prefix view will default to the first available IP within the prefix

### Bug Fixes

* Display global search in navigation menu unless display is less than 1200px wide
* Reduce mobile cut-off for navigation menu to 960px
* Added missing import buttons on object lists
* Fixed interface validation for virtual machines
* Set empty label to "Global" or VRF field in IP assignment form

---

## v2.2.5 (2017-11-14)

### Enhancements

* Added a view to search for an IP address being assigned to an interface
* Added IP address roles to device/VM interface lists
* Replaced default 500 handler with custom middleware to provide preliminary troubleshooting assistance
* Replaced prefix `parent` filter with `within` and `within_include`

### Bug Fixes

* Correct bulk selection of IP addresses within a prefix assigned to a VRF
* Validate device type classification when creating console server ports and power outlets
* Correct numeric ordering for interfaces with no alphabetic type
* Correct filtering of child prefixes upon bulk edit/delete from the parent prefix view
* Disregard IP address mask when filtering for child IPs of a prefix
* Fix for NAPALM v2.0+
* Correct nested representation in the API of primary IPs for virtual machines and add missing primary_ip property
* Fixed validation in `extras/0008_reports.py` migration for certain versions of PostgreSQL
* Added API serializer validation for custom integer fields
* Fixed filtering of devices with a status of offline

---

## v2.2.4 (2017-10-31)

### Bug Fixes

* Fixed server error when calling certain filters (regression from #1649)

---

## v2.2.3 (2017-10-31)

### Enhancements

* Display devices on which circuits are terminated in circuits list
* Added initial data for the virtualization app
* Loosen IP address search filter to match all IPs that start with the given string
* Added a `post_run` method to the Report class
* Allow modifying the owner of a rack reservation

### Bug Fixes

* Correct filtering of custom field choices
* Hide selection checkboxes for tables with no available actions
* Allow bulk deletion of all virtual machines
* Correct text-based filtering of IP network and address fields
* Add VM count to device roles table
* Cluster should not be a required field when importing child devices
* Correct filtering on null values (e.g. ?tenant_id=0) for django-filters v1.1.0+
* Remove outdated description for DeviceType's `is_network_device` flag
* Added missing `serial` field in default rack CSV export

---

## v2.2.2 (2017-10-17)

### Enhancements

* Allow cluster assignment when bulk importing devices
* Add primary IP column for virtual machines in global search results

### Bug Fixes

* Avoid duplicating nodes when generating topology maps
* Devices already assigned to a cluster cannot be added to a different cluster
* Add `virtual_machine` attribute to IPAddress
* Colorized virtual machine role column
* Fixed slug-based filtering of virtual machines
* Added clusters and virtual machines to object list for global search
* Added missing `virtual_machine` field to IP address interface serializer

---

## v2.2.1 (2017-10-12)

### Bug Fixes

* Moved PostgreSQL validation logic into the relevant migration (fixed ImproperlyConfigured exception on init)

---

## v2.2.0 (2017-10-12)

**Note:** This release requires PostgreSQL 9.4 or higher. Do not attempt to upgrade unless you are running at least PostgreSQL 9.4.

**Note:** The release replaces the deprecated pycrypto library with pycryptodome. The upgrade script has been extended to automatically uninstall the old library, but please verify your installed packages with `pip freeze | grep pycrypto` if you run into problems.

### New Features

#### Virtual Machines and Clusters

NetBox now supports the creation of virtual machines, which can be assigned virtual interfaces and IP addresses. VMs are arranged into clusters, each of which has a type and (optionally) a group.

#### Custom Validation Reports

Users can now create custom reports which are run to validate data in NetBox. Reports work very similar to Python unit tests: Each report inherits from NetBox's Report class and contains one or more test method. Reports can be run and retrieved via the web UI, API, or CLI.

### Enhancements

* Include asset tag in device info pop-up on rack elevation
* Added a `serial` field to the rack model
* Added an IP address role for CARP
* Extended rack facility ID field from 30 to 50 characters
* Added ability to search by name when adding devices to a cluster
* Replace deprecated pycrypto library with pycryptodome
* Added API endpoints listing static field choices for each app
* Added CPAK, CFP2, and CFP4 100GE interface form factors
* Added CSV import views for all object types

### Bug Fixes

* Corrected interface connections link in navigation menu
* Don't require form_factor when creating an interface assigned to a virtual machine
* Added filtering for virtual machine interfaces
* Prompt user for session key when importing secrets

### API Changes

* Introduced the virtualization app and its associated endpoints at `/api/virtualization`
* Added the `/api/extras/reports` endpoint for fetching and running reports
* The `ipam.Service` and `dcim.Interface` models now have a `virtual_machine` field in addition to the `device` field. Only one of the two fields may be defined for each object
* Added a `vm_role` field to `dcim.DeviceRole`, which indicates whether a role is suitable for assigned to a virtual machine
* Added a `serial` field to 'dcim.Rack` for serial numbers
* Each app now has a `_choices` endpoint, which lists the available options for all model field with static choices (e.g. interface form factors)
=== END FILE ===

**Version 2.1**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.1/
=== BEGIN FILE ===
# NetBox v2.1 Release Notes

## v2.1.6 (2017-10-11)

### Enhancements

* Automatically populate tenant assignment when adding an IP address from the prefix view
* Added primary IP to the devices table in global search
* Made necessary updates for Django REST Framework v3.7.0

---

## v2.1.5 (2017-09-25)

### Enhancements

* Added individual "add VLAN" buttons on the VLAN groups list
* Added `BANNER_LOGIN` configuration setting to display a banner on the login page
* Added utilization graph to child prefixes table
* Improved the natural ordering of interfaces
* Improved formatting of aggregate prefix statistics

### Bug Fixes

* Allow a NAT IP to be assigned as the primary IP for a device
* Prevented truncation when displaying secret strings containing HTML characters
* Ignore subinterface IDs when validating LLDP neighbor connections
* Corrected server error on validation of empty required custom field
* Fixed error when creating the next available IP from a prefix within a VRF
* Redirect on GET request to bulk edit/delete views
* Removed object create/edit forms from the browsable API

---

## v2.1.4 (2017-08-30)

### Enhancements

* Added dropdown widget with common values for circuit speed fields
* Added a `MEDIA_ROOT` configuration setting to specify where uploaded files are stored on disk
* Ignore anycast addresses when detecting duplicate IPs
* Increased max length of name field for device components
* Added interface form factor for 10GBASE-CX4
* Added a `commit_rate` field to the circuits list search form
* Hostnames with no domain are now acceptable in custom URL fields

### Bug Fixes

* Fixed uptime formatting on device status page
* Fixed `devicetype_id` filter for DeviceType components
* Fixed API validation error involving custom field data
* Corrected permission name on prefix/VLAN roles list

---

## v2.1.3 (2017-08-15)

### Bug Fixes

* Raise validation error when assigning an unrelated IP as the primary IP for a device
* Avoid splitting carat/prefix on prefix list
* Removed redundant display of assigned device interface from IP address list
* Selecting a site from the rack filters automatically updates the available rack groups
* Allow editing image attachments without re-uploading an image
* Exclude virtual interfaces from device LLDP neighbors view
* Improved model validation logic for API serializers
* Fixed page title capitalization in the browsable API

---

## v2.1.2 (2017-08-04)

### Enhancements

* Allow the creation of multiple services per device with the same protocol and port
* Tweaked navigation menu styling

### Bug Fixes

* Fixed server error when searching globally for IPs/prefixes
* Fixed IndexError when viewing available IPs within large IPv6 prefixes

---

## v2.1.1 (2017-08-02)

### Enhancements

* Allow filtering by null values for NullCharacterFields
* Render reservations in rack elevations view
* Added NAPALM_ARGS and NAPALM_TIMEOUT configuration parameters
* Renamed `NETBOX_USERNAME` and `NETBOX_PASSWORD` to `NAPALM_USERNAME` and `NAPALM_PASSWORD`
* Allow searching devices by interface MAC address in global search

### Bug Fixes

* Display a validation error when attempting to assign a new child device to a rack face/position
* Connected device API endpoint no longer requires authentication if `LOGIN_REQUIRED` is False

---

## v2.1.0 (2017-07-25)

### New Features

#### IP Address Roles

The IP address model now supports the assignment of a functional role to help identify special-purpose IPs, including:

* Loopback
* Secondary
* Anycast
* VIP
* VRRP
* HSRP
* GLBP

#### Automatic Provisioning of Next Available IP

A new API endpoint has been added at `/api/ipam/prefixes/<pk>/available-ips/` to return a list of available IP addresses within the prefix.

#### NAPALM Integration

The NAPALM automation library provides an interface for pulling live data from network devices. The NetBox API has been extended to support executing read-only NAPALM methods on devices defined in NetBox.

### Enhancements

* Display details of all objects being edited/deleted in bulk
* Added enabled and MTU fields to the interface model
* Added asset_tag and description fields to the InventoryItem model
* Include RD when listing VRFs in a form selection field
* Implemented query filters for all models
* Added IEEE 802.11 wireless interface types
* Added circuit termination to interface serializer
* Removed checkbox from confirmation dialog

### Bug Fixes

* Order interfaces naturally via API
* Enforce model validation when creating/editing objects via the API
* Correct VRF example values in IP/prefix import forms
* Raise validation error when attempting to create an API key that's too short
* Extend DeviceSerializer.parent_device to include standard fields

### API changes

* Added a new API endpoint for NAPALM
* Device components can only be filtered by a single device name or ID
* Added new fields to the interface serializer: `enabled` and `mtu`
* Modified the interface serializer to include connection-related fields
* Added new fields to the inventory item serializer: `asset_tag` and `description`
* Added "wireless" to interface type filter
* Added a new endpoint to retrieve or create available IPs within a prefix
* Extended `parent_device` on DeviceSerializer to include additional fields
=== END FILE ===

**Version 2.0**
URL: https://netboxlabs.com/docs/netbox/en/stable/release-notes/version-2.0/
=== BEGIN FILE ===
# NetBox v2.0 Release Notes

## v2.0.10 (2017-07-14)

### Bug Fixes

* [#1312](https://github.com/netbox-community/netbox/issues/1312) - Catch error when attempting to activate a user key with an invalid private key
* [#1333](https://github.com/netbox-community/netbox/issues/1333) - Corrected label on is_console_server field of DeviceType bulk edit form
* [#1338](https://github.com/netbox-community/netbox/issues/1338) - Allow importing prefixes with "container" status
* [#1339](https://github.com/netbox-community/netbox/issues/1339) - Fixed disappearing checkbox column under django-tables2 v1.7+
* [#1342](https://github.com/netbox-community/netbox/issues/1342) - Allow designation of users and groups when creating/editing a secret role

---

## v2.0.9 (2017-07-10)

### Bug Fixes

* [#1319](https://github.com/netbox-community/netbox/issues/1319) - Fixed server error when attempting to create console/power connections
* [#1325](https://github.com/netbox-community/netbox/issues/1325) - Retain interface attachment when editing a circuit termination

---

## v2.0.8 (2017-07-05)

### Enhancements

* [#1298](https://github.com/netbox-community/netbox/issues/1298) - Calculate prefix utilization based on its status (container or non-container)
* [#1303](https://github.com/netbox-community/netbox/issues/1303) - Highlight installed interface connections in green on device view
* [#1315](https://github.com/netbox-community/netbox/issues/1315) - Enforce lowercase file extensions for image attachments

### Bug Fixes

* [#1279](https://github.com/netbox-community/netbox/issues/1279) - Fix primary_ip assignment during IP address import
* [#1281](https://github.com/netbox-community/netbox/issues/1281) - Show LLDP neighbors tab on device view only if necessary conditions are met
* [#1282](https://github.com/netbox-community/netbox/issues/1282) - Fixed tooltips on "mark connected/planned" toggle buttons for device connections
* [#1288](https://github.com/netbox-community/netbox/issues/1288) - Corrected permission name for deleting image attachments
* [#1289](https://github.com/netbox-community/netbox/issues/1289) - Retain inside NAT assignment when editing an IP address
* [#1297](https://github.com/netbox-community/netbox/issues/1297) - Allow passing custom field choice selection PKs to API as string-quoted integers
* [#1299](https://github.com/netbox-community/netbox/issues/1299) - Corrected permission name for adding services to devices

---

## v2.0.7 (2017-06-15)

### Enhancements

* [#626](https://github.com/netbox-community/netbox/issues/626) - Added bulk disconnect function for console/power/interface connections on device view

### Bug Fixes

* [#1238](https://github.com/netbox-community/netbox/issues/1238) - Fix error when editing an IP with a NAT assignment which has no assigned device
* [#1263](https://github.com/netbox-community/netbox/issues/1263) - Differentiate add and edit permissions for objects
* [#1265](https://github.com/netbox-community/netbox/issues/1265) - Fix console/power/interface connection validation when selecting a device via live search
* [#1266](https://github.com/netbox-community/netbox/issues/1266) - Prevent terminating a circuit to an already-connected interface
* [#1268](https://github.com/netbox-community/netbox/issues/1268) - Fix CSV import error under Python 3
* [#1273](https://github.com/netbox-community/netbox/issues/1273) - Corrected status choices in IP address import form
* [#1274](https://github.com/netbox-community/netbox/issues/1274) - Exclude unterminated circuits from topology maps
* [#1275](https://github.com/netbox-community/netbox/issues/1275) - Raise validation error on prefix import when multiple VLANs are found

---

## v2.0.6 (2017-06-12)

### Enhancements

* [#40](https://github.com/netbox-community/netbox/issues/40) - Added IP utilization graph to prefix list
* [#704](https://github.com/netbox-community/netbox/issues/704) - Allow filtering VLANs by group when editing prefixes
* [#913](https://github.com/netbox-community/netbox/issues/913) - Added headers to object CSV exports
* [#990](https://github.com/netbox-community/netbox/issues/990) - Enable logging configuration in configuration.py
* [#1180](https://github.com/netbox-community/netbox/issues/1180) - Simplified the process of finding related devices when viewing a device

### Bug Fixes

* [#1253](https://github.com/netbox-community/netbox/issues/1253) - Improved `upgrade.sh` to allow forcing Python2

---

## v2.0.5 (2017-06-08)

### Notes

The maximum number of objects an API consumer can request has been set to 1000 (e.g. `?limit=1000`). This limit can be modified by defining `MAX_PAGE_SIZE` in configuration.py. (To remove this limit, set `MAX_PAGE_SIZE=0`.)

### Enhancements

* [#655](https://github.com/netbox-community/netbox/issues/655) - Implemented header-based CSV import of objects
* [#1190](https://github.com/netbox-community/netbox/issues/1190) - Allow partial string matching when searching on custom fields
* [#1237](https://github.com/netbox-community/netbox/issues/1237) - Enabled setting limit=0 to disable pagination in API requests; added `MAX_PAGE_SIZE` configuration setting

### Bug Fixes

* [#837](https://github.com/netbox-community/netbox/issues/837) - Enforce uniqueness where applicable during bulk import of IP addresses
* [#1226](https://github.com/netbox-community/netbox/issues/1226) - Improved validation for custom field values submitted via the API
* [#1232](https://github.com/netbox-community/netbox/issues/1232) - Improved rack space validation on bulk import of devices (see #655)
* [#1235](https://github.com/netbox-community/netbox/issues/1235) - Fix permission name for adding/editing inventory items
* [#1236](https://github.com/netbox-community/netbox/issues/1236) - Truncate rack names in elevations list; add facility ID
* [#1239](https://github.com/netbox-community/netbox/issues/1239) - Fix server error when creating VLANGroup via API
* [#1243](https://github.com/netbox-community/netbox/issues/1243) - Catch ValueError in IP-based object filters
* [#1244](https://github.com/netbox-community/netbox/issues/1244) - Corrected "device" secrets filter to accept a device name

---

## v2.0.4 (2017-05-25)

### Bug Fixes

* [#1206](https://github.com/netbox-community/netbox/issues/1206) - Fix redirection in admin UI after activating secret keys when BASE_PATH is set
* [#1207](https://github.com/netbox-community/netbox/issues/1207) - Include nested LAG serializer when showing interface connections (API)
* [#1210](https://github.com/netbox-community/netbox/issues/1210) - Fix TemplateDoesNotExist errors on browsable API views
* [#1212](https://github.com/netbox-community/netbox/issues/1212) - Allow assigning new VLANs to global VLAN groups
* [#1213](https://github.com/netbox-community/netbox/issues/1213) - Corrected table header ordering links on object list views
* [#1214](https://github.com/netbox-community/netbox/issues/1214) - Add status to list of required fields on child device import form
* [#1219](https://github.com/netbox-community/netbox/issues/1219) - Fix image attachment URLs when BASE_PATH is set
* [#1220](https://github.com/netbox-community/netbox/issues/1220) - Suppressed innocuous warning about untracked migrations under Python 3
* [#1229](https://github.com/netbox-community/netbox/issues/1229) - Fix validation error on forms where API search is used

---

## v2.0.3 (2017-05-18)

### Enhancements

* [#1196](https://github.com/netbox-community/netbox/issues/1196) - Added a lag_id filter to the API interfaces view
* [#1198](https://github.com/netbox-community/netbox/issues/1198) - Allow filtering unracked devices on device list

### Bug Fixes

* [#1157](https://github.com/netbox-community/netbox/issues/1157) - Hide nav menu search bar on small displays
* [#1186](https://github.com/netbox-community/netbox/issues/1186) - Corrected VLAN edit form so that site assignment is not required
* [#1187](https://github.com/netbox-community/netbox/issues/1187) - Fixed table pagination by introducing a custom table template
* [#1188](https://github.com/netbox-community/netbox/issues/1188) - Serialize interface LAG as nested objected (API)
* [#1189](https://github.com/netbox-community/netbox/issues/1189) - Enforce consistent ordering of objects returned by a global search
* [#1191](https://github.com/netbox-community/netbox/issues/1191) - Bulk selection of IPs under a prefix incorrect when "select all" is used
* [#1195](https://github.com/netbox-community/netbox/issues/1195) - Unable to create an interface connection when searching for peer device
* [#1197](https://github.com/netbox-community/netbox/issues/1197) - Fixed status assignment during bulk import of devices, prefixes, IPs, and VLANs
* [#1199](https://github.com/netbox-community/netbox/issues/1199) - Bulk import of secrets does not prompt user to generate a session key
* [#1200](https://github.com/netbox-community/netbox/issues/1200) - Form validation error when connecting power ports to power outlets

---

## v2.0.2 (2017-05-15)

### Enhancements

* [#1122](https://github.com/netbox-community/netbox/issues/1122) - Include NAT inside IPs in IP address list
* [#1137](https://github.com/netbox-community/netbox/issues/1137) - Allow filtering devices list by rack
* [#1170](https://github.com/netbox-community/netbox/issues/1170) - Include A and Z sites for circuits in global search results
* [#1172](https://github.com/netbox-community/netbox/issues/1172) - Linkify racks in side-by-side elevations view
* [#1177](https://github.com/netbox-community/netbox/issues/1177) - Render planned connections as dashed lines on topology maps
* [#1179](https://github.com/netbox-community/netbox/issues/1179) - Adjust topology map text color based on node background
* On all object edit forms, allow filtering the tenant list by tenant group

### Bug Fixes

* [#1158](https://github.com/netbox-community/netbox/issues/1158) - Exception thrown when creating a device component with an invalid name
* [#1159](https://github.com/netbox-community/netbox/issues/1159) - Only superusers can see "edit IP" buttons on the device interfaces list
* [#1160](https://github.com/netbox-community/netbox/issues/1160) - Linkify secrets and tenants in global search results
* [#1161](https://github.com/netbox-community/netbox/issues/1161) - Fix "add another" behavior when creating an API token
* [#1166](https://github.com/netbox-community/netbox/issues/1166) - Fixed bulk IP address creation when assigning tenants
* [#1168](https://github.com/netbox-community/netbox/issues/1168) - Total count of objects missing from list view paginator
* [#1171](https://github.com/netbox-community/netbox/issues/1171) - Allow removing site assignment when bulk editing VLANs
* [#1173](https://github.com/netbox-community/netbox/issues/1173) - Tweak interface manager to fall back to naive ordering

---

## v2.0.1 (2017-05-10)

### Bug Fixes

* [#1149](https://github.com/netbox-community/netbox/issues/1149) - Port list does not populate when creating a console or power connection
* [#1150](https://github.com/netbox-community/netbox/issues/1150) - Error when uploading image attachments with Unicode names under Python 2
* [#1151](https://github.com/netbox-community/netbox/issues/1151) - Server error: name 'escape' is not defined
* [#1152](https://github.com/netbox-community/netbox/issues/1152) - Unable to edit user keys
* [#1153](https://github.com/netbox-community/netbox/issues/1153) - UnicodeEncodeError when searching for non-ASCII characters on Python 2

---

## v2.0.0 (2017-05-09)

### New Features

#### API 2.0 ([#113](https://github.com/netbox-community/netbox/issues/113))

The NetBox API has been completely rewritten and now features full read/write ability.

#### Image Attachments ([#152](https://github.com/netbox-community/netbox/issues/152))

Users are now able to attach photos and other images to sites, racks, and devices. (Please ensure that the new `media` directory is writable by the system account NetBox runs as.)

#### Global Search ([#159](https://github.com/netbox-community/netbox/issues/159))

NetBox now supports searching across all primary object types at once.

#### Rack Elevations View ([#951](https://github.com/netbox-community/netbox/issues/951))

A new view has been introduced to display the elevations of multiple racks side-by-side.

### Enhancements

* [#154](https://github.com/netbox-community/netbox/issues/154) - Expanded device status field to include options other than active/offline
* [#430](https://github.com/netbox-community/netbox/issues/430) - Include circuits when rendering topology maps
* [#578](https://github.com/netbox-community/netbox/issues/578) - Show topology maps not assigned to a site on the home view
* [#1100](https://github.com/netbox-community/netbox/issues/1100) - Add a "view all" link to completed bulk import views is_pool for prefixes)
* [#1110](https://github.com/netbox-community/netbox/issues/1110) - Expand bulk edit forms to include boolean fields (e.g. toggle is_pool for prefixes)

### Bug Fixes

From v1.9.6:

* [#403](https://github.com/netbox-community/netbox/issues/403) - Record console/power/interface connects and disconnects as user actions
* [#853](https://github.com/netbox-community/netbox/issues/853) -  Added "status" field to device bulk import form
* [#1101](https://github.com/netbox-community/netbox/issues/1101) - Fix AJAX scripting for device component selection forms
* [#1103](https://github.com/netbox-community/netbox/issues/1103) - Correct handling of validation errors when creating IP addresses in bulk
* [#1104](https://github.com/netbox-community/netbox/issues/1104) - Fix VLAN assignment on prefix import
* [#1115](https://github.com/netbox-community/netbox/issues/1115) - Enabled responsive (side-scrolling) tables for small screens
* [#1116](https://github.com/netbox-community/netbox/issues/1116) - Correct object links on recursive deletion error
* [#1125](https://github.com/netbox-community/netbox/issues/1125) - Include MAC addresses on a device's interface list
* [#1144](https://github.com/netbox-community/netbox/issues/1144) - Allow multiple status selections for Prefix, IP address, and VLAN filters

From beta3:

* [#1113](https://github.com/netbox-community/netbox/issues/1113) - Fixed server error when attempting to delete an image attachment
* [#1114](https://github.com/netbox-community/netbox/issues/1114) - Suppress OSError when attempting to access a deleted image attachment
* [#1126](https://github.com/netbox-community/netbox/issues/1126) - Fixed server error when editing a user key via admin UI attachment
* [#1132](https://github.com/netbox-community/netbox/issues/1132) - Prompt user to unlock session key when importing secrets

### Additional Changes

* The Module DCIM model has been renamed to InventoryItem to better reflect its intended function, and to make room for work on [#824](https://github.com/netbox-community/netbox/issues/824).
* Redundant portions of the admin UI have been removed ([#973](https://github.com/netbox-community/netbox/issues/973)).
* The Docker build components have been moved into [their own repository](https://github.com/netbox-community/netbox-docker).
=== END FILE ===

